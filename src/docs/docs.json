[
  {
    "groupLabel": "",
    "topics": [
      {
        "slug": "Getting-Started",
        "docs": [
          {
            "slug": "what-is-payload",
            "content": "\n<YouTube\n  id=\"In_lFhzmbME\"\n  title=\"Payload Introduction - Closing the Gap Between Headless CMS and Application Frameworks\"\n/>\n\nPayload is a headless CMS and application framework. It's meant to provide a massive boost to your\ndevelopment process, but importantly, stay out of your way as your apps get more complex.\n\n<Banner type=\"success\">\n  <strong>Payload 2.0 has been released!</strong>\n  <br />\n  Includes Postgres support, Live Preview, Lexical Editor, and more. <a href=\"/blog/payload-2-0\">Read the announcement</a>.\n</Banner>\n\nOut of the box, Payload gives you a lot of the things that you often need when developing a new website, web app, or native app:\n\n- A database to store your data (Postgres and MongoDB supported)\n- A way to store, retrieve, and manipulate data of any shape via full REST and GraphQL APIs\n- Authentication—complete with commonly required functionality like registration, email verification, login, & password reset\n- Deep access control to your data, based on document or field-level functions\n- File storage and access control\n- A beautiful admin UI that's generated specifically to suit your data\n\n## What does \"headless\" mean?\n\nA headless CMS is a system that sticks to what it's good at—managing content. It concentrates solely on granting administrators an effective way to author and maintain content, but doesn't control how and where that content is used.\n\nIn this way, the CMS can ensure that its content editing experience is highly polished and effective while avoiding placing creative constraints on designers or restricting development teams. In contrast, traditional content management systems bind the presentation of your content to the storage of your content and severely limit the creativity, development and usability of the content that they manage.\n\nAt this point this concept is [widely](https://en.wikipedia.org/wiki/Headless_content_management_system) [discussed](https://css-tricks.com/what-is-a-headless-cms/) online, and for good reason. The web has become more complicated and with complexity comes the demand for developers to better structure their code. The rise of interface libraries like React and Vue are now the de-facto standard for building modern applications and traditional content management systems are often not designed to make use of them.\n\n### Why Payload?\n\nThe team behind Payload has been building websites and apps with existing content management systems and application frameworks for over a decade. We know what works and what doesn't about each of the existing solutions, and to this day have found no silver bullet solution.\n\n**We believe that a CMS should be:**\n\n- Cost-effective and should save time and effort\n- Intuitive for developers and content authors alike\n- Self-hosted however and wherever the application specifies\n- Designed in code but used with no coding experience\n- Blazing fast\n- Secure\n- Fully flexible and extensible\n\nPayload is our silver bullet solution. We've blended the best parts of our experience with other CMS and app frameworks into Payload, and we finally have everything we need when we build new apps and websites:\n\n- A beautiful, dynamic, customizable admin UI\n- Extensible and reusable authentication\n- Content localization\n- Local file storage\n- Extremely flexible access control\n- Field conditional logic\n- Block-based layout building\n- Array field type(s)\n- Security\n- and much more\n",
            "desc": "Payload is a next-gen headless Content Management System (CMS) and application framework.",
            "headings": [
              {
                "id": "what-does-headless-mean",
                "level": 2,
                "text": "What does \"headless\" mean?"
              },
              {
                "id": "why-payload",
                "level": 3,
                "text": "Why Payload?"
              }
            ],
            "keywords": "documentation, getting started, guide, Content Management System, cms, headless, javascript, node, react, express",
            "label": "What is Payload?",
            "order": 10,
            "title": "What is Payload?"
          },
          {
            "slug": "concepts",
            "content": "\nPayload is based around a small and intuitive set of concepts. Before starting to work with Payload, it's a good idea to familiarize yourself with the following:\n\n### Config\n\n<Banner type=\"info\">The Payload config is where you configure everything that Payload does.</Banner>\n\nBy default, the Payload config lives in the root folder of your code and is named `payload.config.js` (`payload.config.ts` if you're using TypeScript), but you can customize its name and where you store it. You can write full functions and even full React components right into your config.\n\n### Collections\n\n<Banner type=\"info\">\n  A Collection represents a type of content that Payload will store and can contain many documents.\n</Banner>\n\nCollections define the shape of your data as well as all functionalities attached to that data. They will contain one or many \"documents\", all corresponding with the same fields and functionalities that you define.\n\nThey can represent anything you can store in a database - for example - pages, posts, users, people, orders, categories, events, customers, transactions, and anything else your app needs.\n\n### Globals\n\n<Banner type=\"info\">\n  A Global is a \"one-off\" piece of content that is perfect for storing navigational structures,\n  themes, top-level meta data, and more.\n</Banner>\n\nGlobals are in many ways similar to Collections, but there is only ever **one** instance of a Global, whereas Collections can contain many documents.\n\n### Fields\n\n<Banner type=\"info\">\n  Fields are the building blocks of Payload. Collections and Globals both use Fields to define the\n  shape of the data that they store.\n</Banner>\n\nPayload comes with [many different field types](../fields/overview) that give you a ton of flexibility while designing your API. Each Field type has its own potential properties that allow you to customize how they work.\n\n### Hooks\n\n<Banner type=\"info\">\n  Hooks are where you can \"tie in\" to existing Payload actions to perform your own additional logic\n  or modify how Payload operates altogether.\n</Banner>\n\nHooks are an extremely powerful concept and are central to extending and customizing your app. Payload provides a wide variety of hooks which you can utilize. For example, imagine if you'd like to send an email every time a document is created in your Orders collection. To do so, you can add an `afterChange` hook function to your Orders collection that receives the Order data and allows you to send an email accordingly.\n\nThere are many more potential reasons to use Hooks. For more, visit the [Hooks documentation](../hooks/overview).\n\n### Access Control\n\n<Banner type=\"info\">\n  Access Control refers to Payload's system of defining who can do what to your API.\n</Banner>\n\nAccess Control is extremely powerful but easy and intuitive to manage. You can easily define your own full-blown RBAC (role-based access control) or any other access control pattern that your scenario requires. No conventions or structure is forced on you whatsoever.\n\nFor more, visit the [Access Control documentation](../access-control/overview).\n\n### Depth\n\n<Banner type=\"info\">\n  \"Depth\" gives you control over how many levels down related documents should be automatically\n  populated when retrieved.\n</Banner>\n\nYou can specify population `depth` via query parameter in the REST API and by an option in the local API. _Depth has no effect in the GraphQL API, because there, depth is based on the shape of your queries._\nIt is also possible to limit the depth for specific `relation` and `upload` fields using the `maxDepth` property in your configuration.\n**For example, let's look at the following Collections:** `departments`, `users`, `posts`\n\n```\n// type: 'relationship' fields are equal to 1 depth level\n\n{\n\tslug: 'posts',\n\tfields: [\n\t\t{\n\t\t\tname: 'title',\n\t\t\ttype: 'text',\n\t\t},\n\t\t{\n\t\t\tname: 'author',\n\t\t\tlabel: 'Post Author',\n\t\t\ttype: 'relationship',\n\t\t\trelationTo: 'users',\n\t\t}\n\t]\n}\n\n{\n\tslug: 'users',\n\tfields: [\n\t\t{\n\t\t\tname: 'email',\n\t\t\ttype: 'email',\n\t\t},\n\t\t{\n\t\t\tname: 'department'\n\t\t\ttype: 'relationship',\n\t\t\trelationTo: 'departments'\n\t\t}\n\t]\n}\n\n{\n\tslug: 'departments',\n\tfields: [\n\t\t{\n\t\t\tname: 'name'\n\t\t\ttype: 'text',\n\t\t}\n\t]\n}\n```\n\nIf you were to query the Posts endpoint at, say, `http://localhost:3000/api/posts?depth=1`, you will retrieve Posts with populations one level deep. This depth parameter can be thought of as N, where N is the number of levels you want to populate. To populate one level further, you would simply specify N+1 as the depth. A returned result may look like the following:\n\n```\n// ?depth=1\n\n{\n  id: '5ae8f9bde69e394e717c8832',\n  title: 'This post sucks',\n  author: {\n    id: '5f7dd05cd50d4005f8bcab17',\n    email: 'spiderman@superheroes.gov',\n    department: '5e3ca05cd50d4005f8bdab15'\n  }\n}\n```\n\nNotice how the `user.author` is fully populated, but `user.author.department` is left as a document ID? That's because the User collection counted as the first level of `depth` and got populated—but then prevented any further populations from taking place.\n\nTo populate `user.author.department` in it's entirety you could specify `?depth=2` or _higher_.\n\n```\n// ?depth=2\n\n{\n  id: '5ae8f9bde69e394e717c8832',\n  title: 'This post sucks',\n  author: {\n    id: '5f7dd05cd50d4005f8bcab17',\n    email: 'spiderman@superheroes.gov',\n    department: {\n      id: '5e3ca05cd50d4005f8bdab15',\n      name: 'Marvel'\n    }\n  }\n}\n```\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  When access control on collections prevents relationship fields from populating, the API response\n  will contain the relationship id instead of the full document.\n</Banner>\n",
            "desc": "Payload is based around a small and intuitive set of concepts. Key concepts include collections, globals, fields and more.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "collections",
                "level": 3,
                "text": "Collections"
              },
              {
                "id": "globals",
                "level": 3,
                "text": "Globals"
              },
              {
                "id": "fields",
                "level": 3,
                "text": "Fields"
              },
              {
                "id": "hooks",
                "level": 3,
                "text": "Hooks"
              },
              {
                "id": "access-control",
                "level": 3,
                "text": "Access Control"
              },
              {
                "id": "depth",
                "level": 3,
                "text": "Depth"
              }
            ],
            "keywords": "documentation, getting started, guide, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Concepts",
            "order": 20,
            "title": "Payload Concepts"
          },
          {
            "slug": "installation",
            "content": "\n#### Software Requirements\n\nPayload requires the following software:\n\n- Any JavaScript package manager (Yarn, NPM, or pnpm)\n- Node.js version 16+\n- Any [compatible database](../database/overview) (MongoDB or Postgres)\n\n<Banner type=\"warning\">\n  Before proceeding any further, please ensure that you have the above requirements met.\n</Banner>\n\n## Quickstart with create-payload-app\n\nTo quickly scaffold a new Payload app in the fastest way possible, you can use [create-payload-app](https://npmjs.com/package/create-payload-app). To do so, run the following command:\n\n```\nnpx create-payload-app@latest\n```\n\nThen just follow the prompts! You'll get set up with a new folder and a functioning Payload app inside.\n\n## Adding to an existing app\n\nAdding Payload to either a new or existing TypeScript + Express app is super straightforward. To add to an existing app, just run `npm install --save --legacy-peer-deps payload`.\n\nFrom there, the first step is writing a baseline config. Create a new `payload.config.ts` in your project's `/src` directory (or whatever your root TS dir is). The simplest config contains the following:\n\n```js\nimport { buildConfig } from 'payload/config'\n\nexport default buildConfig({\n  // By default, Payload will boot up normally\n  // and you will be provided with a base `User` collection.\n  // But, here is where you define how you'd like Payload to work!\n})\n```\n\nWrite the above code into your newly created config file. This baseline config will automatically provide you with a default `User` collection. For more information about users and authentication, including how to provide your own user config, jump to the [Authentication](../authentication/config) section.\n\nAlthough this is just the bare minimum config, there are _many_ more options that you can control here. To reference the full config and all of its options, [click here](../configuration/overview).\n\n### Server\n\nNow that you've got a baseline Payload config, it's time to initialize Payload. It requires an Express server that you provide, so if you're not familiar with how to set up a baseline Express server, please read up on exactly what Express is and why to use it. Express' own [Documentation](https://expressjs.com/en/starter/hello-world.html) is a good place to start. Otherwise, follow along below for how to build your own Express server to use with Payload.\n\n1. Run `npm install --save --legacy-peer-deps express` if you have not done so already\n1. Create a new `server.ts` file in the root directory of your app\n1. Add the following code to `server.ts`:\n\n```ts\nimport express from 'express'\n\nconst app = express()\n\napp.listen(3000, async () => {\n  console.log(\n    \"Express is now listening for incoming connections on port 3000.\"\n  )\n})\n```\n\nThis server doesn't do anything just yet. But, after you have this in place, we can initialize Payload via its asynchronous `init()` method, which accepts a small set of arguments to tell it how to operate.\n\nTo initialize Payload, update your `server.ts` file to reflect the following code:\n\n```ts\nimport express from 'express'\nimport payload from 'payload'\n\nrequire('dotenv').config()\nconst app = express()\n\nconst start = async () => {\n  await payload.init({\n    secret: process.env.PAYLOAD_SECRET,\n    express: app,\n  })\n\n  app.listen(3000, async () => {\n    console.log(\n      \"Express is now listening for incoming connections on port 3000.\"\n    )\n  })\n}\n\nstart()\n```\n\nA quick reminder: in this configuration, we're making use of environmental variables, `process.env.PAYLOAD_SECRET`. Often, it's smart to store these values in an `.env` file at the root of your directory and set different values for each of your environments (local, stage, prod, etc). The `dotenv` package is very handy and works well alongside of Payload. A typical `.env` file will look like this:\n\n```\nDATABASE_URI=mongodb://127.0.0.1/your-payload-app\nPAYLOAD_SECRET=your-payload-secret\n```\n\nHere is a list of all properties available to pass through `payload.init`:\n\n##### secret\n**Required**. This is a secure string that will be used to authenticate with Payload. It can be random but should be at least 14 characters and be very difficult to guess.\n\nPayload uses this secret key to generate secure user tokens (JWT). Behind the scenes, we do not use your secret key to encrypt directly - instead, we first take the secret key and create an encrypted string using the SHA-256 hash function. Then, we reduce the encrypted string to its first 32 characters. This final value is what Payload uses for encryption.\n\n##### config\n\nAllows you to pass your config directly to the onInit function. The config passed here should match the payload.config file.\n\n##### disableOnInit\n\nA boolean that disables running your `onInit` function when Payload starts up.\n\n##### disableDBConnect\n\nA boolean that disables the database connection when Payload starts up.\n\n##### email\n\nAn object used to configure SMTP. [Read more](../email/overview).\n\n##### express\nThis is your Express app as shown above. Payload will tie into your existing `app` and scope all of its functionalities to sub-routers. By default, Payload will add an `/admin` router and an `/api` router, but you can customize these paths.\n\n##### local\n\nA boolean that when set to `true` tells Payload to start in local-only mode which will bypass setting up API routes. When set to `true`, `express` is not required. This is useful when running scripts that need to use Payload's [local-api](../local-api/overview).\n\n##### loggerDestination\n\nSpecify destination stream for the built-in Pino logger that Payload uses for internal logging. See [Pino Docs](https://getpino.io/#/docs/api?id=pino-destination) for more info on what is available.\n\n##### loggerOptions\n\nSpecify options for the built-in Pino logger that Payload uses for internal logging. See [Pino Docs](https://getpino.io/#/docs/api?id=options) for more info on what is available.\n\n##### onInit\n\nA function that is called immediately following startup that receives the Payload instance as it's only argument.\n\n### Test it out\n\nAfter you've gotten this far, it's time to boot up Payload. Start your project in your application's folder to get going.\n\nAfter it starts, you can go to `http://localhost:3000/admin` to create your first Payload user!\n\n### Docker\n\nLooking to deploy Payload with Docker? New projects with `create-payload-app` come with a Dockerfile and docker-compose.yml file ready to go. Examples of these files can be seen in our [Deployment docs](../production/deployment#docker).\n",
            "desc": "To quickly get started with Payload, simply run npx create-payload-app or install from scratch.",
            "headings": [
              {
                "id": "quickstart-with-create-payload-app",
                "level": 2,
                "text": "Quickstart with create-payload-app"
              },
              {
                "id": "adding-to-an-existing-app",
                "level": 2,
                "text": "Adding to an existing app"
              },
              {
                "id": "server",
                "level": 3,
                "text": "Server"
              },
              {
                "id": "test-it-out",
                "level": 3,
                "text": "Test it out"
              },
              {
                "id": "docker",
                "level": 3,
                "text": "Docker"
              }
            ],
            "keywords": "documentation, getting started, guide, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Installation",
            "order": 30,
            "title": "Installation"
          }
        ]
      },
      {
        "slug": "Configuration",
        "docs": [
          {
            "slug": "overview",
            "content": "\nPayload is a _config-based_, code-first CMS and application framework. The Payload config is central to everything that Payload does. It scaffolds the data that Payload stores as well as maintains custom React components, hook logic, custom validations, and much more.\n\n**Also, because the Payload source code is fully written in TypeScript, its configs are strongly typed—meaning that even if you aren't using TypeScript, your IDE (such as VSCode) may still provide helpful information like type-ahead suggestions while you write your config.**\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  This file is included in the Payload admin bundle, so make sure you do not embed any sensitive\n  information.\n</Banner>\n\n## Options\n\n| Option                | Description                                                                                                                                                                       |\n| --------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `admin` \\*            | Base Payload admin configuration. Specify bundler*, custom components, control metadata, set the Admin user collection, and [more](../admin/overview#admin-options). Required. |\n| `editor` \\*           | Rich Text Editor which will be used by richText fields. Required.                                                                                                                 |\n| `db` \\*               | Database Adapter which will be used by Payload. Read more [here](../database/overview). Required.                                                                              |\n| `serverURL`           | A string used to define the absolute URL of your app including the protocol, for example `https://example.com`. No paths allowed, only protocol, domain and (optionally) port     |\n| `collections`         | An array of all Collections that Payload will manage. To read more about how to define your collection configs, [click here](../configuration/collections).                    |\n| `globals`             | An array of all Globals that Payload will manage. For more on Globals and their configs, [click here](../configuration/globals).                                               |\n| `cors`                | Either a whitelist array of URLS to allow CORS requests from, or a wildcard string (`'*'`) to accept incoming requests from any domain.                                           |\n| `localization`        | Opt-in and control how Payload handles the translation of your content into multiple locales. [More](../configuration/localization)                                            |\n| `graphQL`             | Manage GraphQL-specific functionality here. Define your own queries and mutations, manage query complexity limits, and [more](../graphql/overview#graphql-options).            |\n| `cookiePrefix`        | A string that will be prefixed to all cookies that Payload sets.                                                                                                                  |\n| `csrf`                | A whitelist array of URLs to allow Payload cookies to be accepted from as a form of CSRF protection. [More](../authentication/overview#csrf-protection)                        |\n| `defaultDepth`        | If a user does not specify `depth` while requesting a resource, this depth will be used. [More](../getting-started/concepts#depth)                                             |\n| `maxDepth`            | The maximum allowed depth to be permitted application-wide. This setting helps prevent against malicious queries. Defaults to `10`.                                               |\n| `indexSortableFields` | Automatically index all sortable top-level fields in the database to improve sort performance and add database compatibility for Azure Cosmos and similar.                        |\n| `upload`              | Base Payload upload configuration. [More](../upload/overview#payload-wide-upload-options).                                                                                     |\n| `routes`              | Control the routing structure that Payload binds itself to. Specify `admin`, `api`, `graphQL`, and `graphQLPlayground`.                                                           |\n| `email`               | Base email settings to allow Payload to generate email such as Forgot Password requests and other requirements. [More](../email/overview#configuration)                        |\n| `express`             | Express-specific middleware options such as compression and JSON parsing. [More](../configuration/express)                                                                     |\n| `debug`               | Enable to expose more detailed error information.                                                                                                                                 |\n| `telemetry`           | Disable Payload telemetry by passing `false`. [More](../configuration/overview#telemetry)                                                                                      |\n| `rateLimit`           | Control IP-based rate limiting for all Payload resources. Used to prevent DDoS attacks and [more](../production/preventing-abuse#rate-limiting-requests).                      |\n| `hooks`               | Tap into Payload-wide hooks. [More](../hooks/overview)                                                                                                                         |\n| `plugins`             | An array of Payload plugins. [More](../plugins/overview)                                                                                                                       |\n| `endpoints`           | An array of custom API endpoints added to the Payload router. [More](../rest-api/overview#custom-endpoints)                                                                    |\n| `custom`              | Extension point for adding custom data (e.g. for plugins)                                                                                                                         |\n\n_\\* An asterisk denotes that a property is required._\n\n#### Simple example\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport { mongooseAdapter } from '@payloadcms/db-mongodb'\nimport { postgresAdapter } from '@payloadcms/db-postgres' // beta\n\nimport { viteBundler } from '@payloadcms/bundler-vite'\nimport { webpackBundler } from '@payloadcms/bundler-webpack'\n\nimport { lexicalEditor } from '@payloadcms/richtext-lexical' // beta\nimport { slateEditor } from '@payloadcms/richtext-slate'\n\nexport default buildConfig({\n  admin: {\n    bundler: webpackBundler(), // or viteBundler()\n  },\n  db: mongooseAdapter({}), // or postgresAdapter({})\n  editor: lexicalEditor({}), // or slateEditor({})\n  collections: [\n    {\n      slug: 'pages',\n      fields: [\n        {\n          name: 'title',\n          type: 'text',\n          required: true,\n        },\n        {\n          name: 'content',\n          type: 'richText',\n          required: true,\n        },\n      ],\n    },\n  ],\n  globals: [\n    {\n      slug: 'header',\n      fields: [\n        {\n          name: 'nav',\n          type: 'array',\n          fields: [\n            {\n              name: 'page',\n              type: 'relationship',\n              relationTo: 'pages',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n})\n```\n\n#### Full example config\n\nYou can see a full [example config](https://github.com/payloadcms/public-demo/blob/master/src/payload/payload.config.ts) in the Public Demo source code on GitHub.\n\n### Using environment variables in your config\n\nWe suggest using the `dotenv` package to handle environment variables alongside of Payload. All that's necessary to do is to require the package as high up in your application as possible (for example, at the top of your `server.js` file), and ensure that it can find an `.env` file that you create.\n\n**Add this line to the top of your server:**\n\n```\nrequire('dotenv').config()\n// ...\n// the rest of your `server.js` file goes here\n```\n\nNote that if you rely on any environment variables in your config itself, you should also call `dotenv()` at the top of your config itself as well. There's no harm in calling it in both your server and your config itself!\n\n**Here is an example project structure w/ `dotenv` and an `.env` file:**\n\n```\nproject-name\n---- .env\n---- package.json\n---- payload.config.js\n---- server.js\n```\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  If you use an environment variable to configure any properties that are required for the Admin\n  panel to function (ex. serverURL or any routes), you need to make sure that your Admin panel code\n  can access it. [Click here](../admin/webpack#admin-environment-vars) for more info.\n</Banner>\n\n### Customizing & Automating Config Location Detection\n\nPayload is designed to automatically locate your configuration file. By default, it will first look in the root of your current working directory for a file named `payload.config.js` or `payload.config.ts` if you're using TypeScript.\n\nIn development mode, if the configuration file is not found at the root, Payload will attempt to read your `tsconfig.json`, and search in the directory specified in `compilerOptions.rootDir` (typically \"src\").\n\nIn production mode, Payload will first attempt to find the config file in the output directory specified in `compilerOptions.outDir` of your `tsconfig.json`, then fallback to the source directory (`compilerOptions.rootDir`), and finally will check the 'dist' directory.\n\nPlease ensure your `tsconfig.json` is properly configured if you want Payload to accurately auto-detect your configuration file location. If `tsconfig.json` does not exist or doesn't specify `rootDir` or `outDir`, Payload will default to the current working directory.\n\n#### Overriding the Config Location\n\nIn addition to the above automated detection, you can specify your own location for the Payload config file. This is done by using the environment variable `PAYLOAD_CONFIG_PATH`. The path you provide via this environment variable can either be absolute or relative to your current working directory. This can be useful in situations where your Payload config is not in a standard location, or you wish to switch between multiple configurations.\n\n**Example in package.json:**\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"PAYLOAD_CONFIG_PATH=path/to/custom-config.js node server.js\"\n  }\n}\n```\n\nWhen `PAYLOAD_CONFIG_PATH` is set, Payload will use this path to load the configuration, bypassing all automated detection.\n\n### Developing within the Config\n\nPayload comes with `isomorphic-fetch` installed which means that even in Node, you can use the `fetch` API just as you would within the browser. No need to import `axios` or similar, unless you want to!\n\n### TypeScript\n\nYou can import config types as follows:\n\n```ts\nimport { Config } from 'payload/config'\n\n// This is the type used for an incoming Payload config.\n// Only the bare minimum properties are marked as required.\n```\n\n```ts\nimport { SanitizedConfig } from 'payload/config'\n\n// This is the type used after an incoming Payload config is fully sanitized.\n// Generally, this is only used internally by Payload.\n```\n\n### Telemetry\n\nPayload collects **completely anonymous** telemetry data about general usage. This data is super important to us and helps us accurately understand how we're growing and what we can do to build the software into everything that it can possibly be. The telemetry that we collect also help us demonstrate our growth in an accurate manner, which helps us as we seek investment to build and scale our team. If we can accurately demonstrate our growth, we can more effectively continue to support Payload as free and open-source software. To opt out of telemetry, you can pass `telemetry: false` within your Payload config.\n\nFor more information about what we track, take a look at our [privacy policy](/privacy).\n",
            "desc": "The Payload config is central to everything that Payload does, from adding custom React components, to modifying collections, controlling localization and much more.",
            "headings": [
              {
                "id": "options",
                "level": 2,
                "text": "Options"
              },
              {
                "id": "using-environment-variables-in-your-config",
                "level": 3,
                "text": "Using environment variables in your config"
              },
              {
                "id": "customizing-and-automating-config-location-detection",
                "level": 3,
                "text": "Customizing & Automating Config Location Detection"
              },
              {
                "id": "developing-within-the-config",
                "level": 3,
                "text": "Developing within the Config"
              },
              {
                "id": "typescript",
                "level": 3,
                "text": "TypeScript"
              },
              {
                "id": "telemetry",
                "level": 3,
                "text": "Telemetry"
              }
            ],
            "keywords": "overview, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "The Payload Config"
          },
          {
            "slug": "collections",
            "content": "\nPayload Collections are defined through configs of their own, and you can define as many as your application needs. Each\nCollection will scaffold a new collection automatically in your database of choice, based on fields that you define.\n\nIt's often best practice to write your Collections in separate files and then import them into the main Payload config.\n\n## Options\n\n| Option            | Description                                                                                                                                                                                                              |\n|-------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`slug`** \\*     | Unique, URL-friendly string that will act as an identifier for this Collection.                                                                                                                                          |\n| **`fields`** \\*   | Array of field types that will determine the structure and functionality of the data stored within this Collection. [Click here](../fields/overview) for a full list of field types as well as how to configure them. |\n| **`labels`**      | Singular and plural labels for use in identifying this Collection throughout Payload. Auto-generated from slug if not defined.                                                                                           |\n| **`admin`**       | Admin-specific configuration. See below for [more detail](#admin-options).                                                                                                                                               |\n| **`hooks`**       | Entry points to \"tie in\" to Collection actions at specific points. [More](../hooks/overview#collection-hooks)                                                                                                         |\n| **`access`**      | Provide access control functions to define exactly who should be able to do what with Documents in this Collection. [More](../access-control/overview/#collections)                                                   |\n| **`auth`**        | Specify options if you would like this Collection to feature authentication. For more, consult the [Authentication](../authentication/config) documentation.                                                          |\n| **`upload`**      | Specify options if you would like this Collection to support file uploads. For more, consult the [Uploads](../upload/overview) documentation.                                                                         |\n| **`timestamps`**  | Set to false to disable documents' automatically generated `createdAt` and `updatedAt` timestamps.                                                                                                                       |\n| **`versions`**    | Set to true to enable default options, or configure with object properties. [More](../versions/overview#collection-config)                                                                                            |\n| **`endpoints`**   | Add custom routes to the REST API. Set to `false` to disable routes. [More](../rest-api/overview#custom-endpoints)                                                                                                    |\n| **`graphQL`**     | An object with `singularName` and `pluralName` strings used in schema generation. Auto-generated from slug if not defined. Set to `false` to disable GraphQL.                                                            |\n| **`typescript`**  | An object with property `interface` as the text used in schema generation. Auto-generated from slug if not defined.                                                                                                      |\n| **`defaultSort`** | Pass a top-level field to sort by default in the collection List view. Prefix the name of the field with a minus symbol (\"-\") to sort in descending order.                                                               |\n| **`custom`**      | Extension point for adding custom data (e.g. for plugins)                                                                                                                                                                |\n| **`dbName`**      | Custom table or collection name depending on the database adapter. Auto-generated from slug if not defined.                                                                                                              |\n| **`db`**          | Set custom database operations for this Collection. [More](../database/overview#collection-operations)                                                                                                                |\n\n_\\* An asterisk denotes that a property is required._\n\n#### Simple collection example\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Orders: CollectionConfig = {\n  slug: 'orders',\n  fields: [\n    {\n      name: 'total',\n      type: 'number',\n      required: true,\n    },\n    {\n      name: 'placedBy',\n      type: 'relationship',\n      relationTo: 'customers',\n      required: true,\n    },\n  ],\n}\n```\n\n#### More collection config examples\n\nYou can find an assortment\nof [example collection configs](https://github.com/payloadcms/public-demo/tree/master/src/payload/collections) in the\nPublic\nDemo source code on GitHub.\n\n### Admin options\n\nYou can customize the way that the Admin panel behaves on a collection-by-collection basis by defining the `admin`\nproperty on a collection's config.\n\n| Option                       | Description                                                                                                                                                                                           |\n|------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `group`                      | Text used as a label for grouping collection and global links together in the navigation.                                                                                                             |\n| `hidden`                     | Set to true or a function, called with the current user, returning true to exclude this collection from navigation and admin routing.                                                                 |\n| `hooks`                      | Admin-specific hooks for this collection. [More](#admin-hooks)                                                                                                                                        |\n| `useAsTitle`                 | Specify a top-level field to use for a document title throughout the Admin panel. If no field is defined, the ID of the document is used as the title.                                                |\n| `description`                | Text or React component to display below the Collection label in the List view to give editors more information.                                                                                      |\n| `defaultColumns`             | Array of field names that correspond to which columns to show by default in this collection's List view.                                                                                              |\n| `disableDuplicate `          | Disables the \"Duplicate\" button while editing documents within this collection.                                                                                                                       |\n| `hideAPIURL`                 | Hides the \"API URL\" meta field while editing documents within this collection.                                                                                                                        |\n| `enableRichTextLink`         | The [Rich Text](../fields/rich-text) field features a `Link` element which allows for users to automatically reference related documents within their rich text. Set to `true` by default.         |\n| `enableRichTextRelationship` | The [Rich Text](../fields/rich-text) field features a `Relationship` element which allows for users to automatically reference related documents within their rich text. Set to `true` by default. |\n| `preview`                    | Function to generate preview URLS within the Admin panel that can point to your app. [More](#preview).                                                                                                |\n| `livePreview`                | Enable real-time editing for instant visual feedback of your front-end application. [More](../live-preview/overview).                                                                              |\n| `components`                 | Swap in your own React components to be used within this collection. [More](../admin/components#collections)                                                                                       |\n| `listSearchableFields`       | Specify which fields should be searched in the List search view. [More](#list-searchable-fields)                                                                                                      |\n| **`pagination`**             | Set pagination-specific options for this collection. [More](#pagination)                                                                                                                              |\n\n### Preview\n\nCollection `admin` options can accept a `preview` function that will be used to generate a link pointing to the frontend\nof your app to preview data.\n\nIf the function is specified, a Preview button will automatically appear in the corresponding collection's Edit view.\nClicking the Preview button will link to the URL that is generated by the function.\n\n**The preview function accepts two arguments:**\n\n1. The document being edited\n1. An `options` object, containing `locale` and `token` properties. The `token` is the currently logged-in user's JWT.\n\n**Example collection with preview function:**\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Posts: CollectionConfig = {\n  slug: 'posts',\n  fields: [\n    {\n      name: 'slug',\n      type: 'text',\n      required: true,\n    },\n  ],\n  admin: {\n    preview: (doc, { locale }) => {\n      if (doc?.slug) {\n        return `https://bigbird.com/preview/posts/${doc.slug}?locale=${locale}`\n      }\n\n      return null\n    },\n  },\n}\n```\n\n### Pagination\n\nHere are a few options that you can specify options for pagination on a collection-by-collection basis:\n\n| Option         | Description                                                                                         |\n|----------------|-----------------------------------------------------------------------------------------------------|\n| `defaultLimit` | Integer that specifies the default per-page limit that should be used. Defaults to 10.              |\n| `limits`       | Provide an array of integers to use as per-page options for admins to choose from in the List view. |\n\n### Access control\n\nYou can specify extremely granular access control (what users can do with documents in a collection) on a collection by\ncollection basis. To learn more, go to the [Access Control](../access-control/overview) docs.\n\n### Hooks\n\nHooks are a powerful way to extend collection functionality and execute your own logic, and can be defined on a\ncollection by collection basis. To learn more, go to the [Hooks](../hooks/overview) documentation.\n\n### Field types\n\nCollections support all field types that Payload has to offer—including simple fields like text and checkboxes all the\nway to more complicated layout-building field groups like Blocks. [Click here](../fields/overview) to learn more\nabout field types.\n\n### List Searchable Fields\n\nIn the List view, there is a \"search\" box that allows you to quickly find a document with a search. By default, it\nsearches on the ID field. If you have `admin.useAsTitle` defined, the list search will use that field. However, you can\ndefine more than one field to search to make it easier on your admin editors to find the data they need.\n\nFor example, let's say you have a Posts collection with `title`, `metaDescription`, and `tags` fields - and you want all\nthree of those fields to be searchable in the List view. You can simply\nadd `admin.listSearchableFields: ['title', 'metaDescription', 'tags']` - and the admin UI will automatically search on\nthose three fields plus the ID field.\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  If you are adding <strong>listSearchableFields</strong>, make sure you index each of these fields\n  so your admin queries can remain performant.\n</Banner>\n\n### Admin Hooks\n\nIn addition to collection hooks themselves, Payload provides for admin UI-specific hooks that you can leverage.\n\n**`beforeDuplicate`**\n\nThe `beforeDuplicate` hook is an async function that accepts an object containing the data to duplicate, as well as the\nlocale of the doc to duplicate. Within this hook, you can modify the data to be duplicated, which is useful in cases\nwhere you have unique fields that need to be incremented or similar, as well as if you want to automatically modify a\ndocument's `title`.\n\nExample:\n\n```ts\nimport { BeforeDuplicate, CollectionConfig } from 'payload/types'\n// Your auto-generated Page type\nimport { Page } from '../payload-types.ts'\n\nconst beforeDuplicate: BeforeDuplicate<Page> = ({ data }) => {\n  return {\n    ...data,\n    title: `${data.title} Copy`,\n    uniqueField: data.uniqueField ? `${data.uniqueField}-copy` : '',\n  }\n}\n\nexport const Page: CollectionConfig = {\n  slug: 'pages',\n  admin: {\n    hooks: {\n      beforeDuplicate,\n    },\n  },\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n    },\n    {\n      name: 'uniqueField',\n      type: 'text',\n      unique: true,\n    },\n  ],\n}\n```\n\n### TypeScript\n\nYou can import collection types as follows:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\n// This is the type used for incoming collection configs.\n// Only the bare minimum properties are marked as required.\n```\n\n```ts\nimport { SanitizedCollectionConfig } from 'payload/types'\n\n// This is the type used after an incoming collection config is fully sanitized.\n// Generally, this is only used internally by Payload.\n```\n",
            "desc": "Structure your Collections for your needs by defining fields, adding slugs and labels, establishing access control, tying in hooks, setting timestamps and more.",
            "headings": [
              {
                "id": "options",
                "level": 2,
                "text": "Options"
              },
              {
                "id": "admin-options",
                "level": 3,
                "text": "Admin options"
              },
              {
                "id": "preview",
                "level": 3,
                "text": "Preview"
              },
              {
                "id": "pagination",
                "level": 3,
                "text": "Pagination"
              },
              {
                "id": "access-control",
                "level": 3,
                "text": "Access control"
              },
              {
                "id": "hooks",
                "level": 3,
                "text": "Hooks"
              },
              {
                "id": "field-types",
                "level": 3,
                "text": "Field types"
              },
              {
                "id": "list-searchable-fields",
                "level": 3,
                "text": "List Searchable Fields"
              },
              {
                "id": "admin-hooks",
                "level": 3,
                "text": "Admin Hooks"
              },
              {
                "id": "typescript",
                "level": 3,
                "text": "TypeScript"
              }
            ],
            "keywords": "collections, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Collections",
            "order": 20,
            "title": "Collection Configs"
          },
          {
            "slug": "globals",
            "content": "\nGlobal configs are in many ways similar to [Collections](../configuration/collections). The big difference is that\nCollections will potentially contain _many_ documents, while a Global is a \"one-off\". Globals are perfect for things\nlike header nav, site-wide banner alerts, app-wide localized strings, and other \"global\" data that your site or app\nmight rely on.\n\nAs with Collection configs, it's often best practice to write your Globals in separate files and then import them into\nthe main Payload config.\n\n## Options\n\n| Option             | Description                                                                                                                                                                                                          |\n|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`slug`** \\*      | Unique, URL-friendly string that will act as an identifier for this Global.                                                                                                                                          |\n| **`fields`** \\*    | Array of field types that will determine the structure and functionality of the data stored within this Global. [Click here](../fields/overview) for a full list of field types as well as how to configure them. |\n| **`label`**        | Text for the name in the Admin panel or an object with keys for each language. Auto-generated from slug if not defined.                                                                                              |\n| **`description`**  | Text or React component to display below the Global header to give editors more information.                                                                                                                         |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](../configuration/globals#admin-options).                                                                                                                |\n| **`hooks`**        | Entry points to \"tie in\" to collection actions at specific points. [More](../hooks/overview#global-hooks)                                                                                                         |\n| **`access`**       | Provide access control functions to define exactly who should be able to do what with this Global. [More](../access-control/overview/#globals)                                                                    |\n| **`versions`**     | Set to true to enable default options, or configure with object properties. [More](../versions/overview#globals-config)                                                                                           |\n| **`endpoints`**    | Add custom routes to the REST API. [More](../rest-api/overview#custom-endpoints)                                                                                                                                  |\n| **`graphQL.name`** | Text used in schema generation. Auto-generated from slug if not defined.                                                                                                                                             |\n| **`typescript`**   | An object with property `interface` as the text used in schema generation. Auto-generated from slug if not defined.                                                                                                  |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                                            |\n| **`dbName`**       | Custom table or collection name for this global depending on the database adapter. Auto-generated from slug if not defined.\n\n_\\* An asterisk denotes that a property is required._\n\n#### Simple Global example\n\n```ts\nimport { GlobalConfig } from 'payload/types'\n\nconst Nav: GlobalConfig = {\n  slug: 'nav',\n  fields: [\n    {\n      name: 'items',\n      type: 'array',\n      required: true,\n      maxRows: 8,\n      fields: [\n        {\n          name: 'page',\n          type: 'relationship',\n          relationTo: 'pages', // \"pages\" is the slug of an existing collection\n          required: true,\n        },\n      ],\n    },\n  ],\n}\n\nexport default Nav\n```\n\n#### Global config example\n\nYou can find a few [example Global configs](https://github.com/payloadcms/public-demo/tree/master/src/payload/globals)\nin the Public Demo source code on GitHub.\n\n### Admin options\n\nYou can customize the way that the Admin panel behaves on a Global-by-Global basis by defining the `admin` property on a\nGlobal's config.\n\n| Option        | Description                                                                                                                       |\n|---------------|-----------------------------------------------------------------------------------------------------------------------------------|\n| `group`       | Text used as a label for grouping collection and global links together in the navigation.                                         |\n| `hidden`      | Set to true or a function, called with the current user, returning true to exclude this global from navigation and admin routing. |\n| `components`  | Swap in your own React components to be used within this Global. [More](../admin/components#globals)                           |\n| `preview`     | Function to generate a preview URL within the Admin panel for this global that can point to your app. [More](#preview).           |\n| `livePreview` | Enable real-time editing for instant visual feedback of your front-end application. [More](../live-preview/overview).          |\n| `hideAPIURL`  | Hides the \"API URL\" meta field while editing documents within this collection.                                                    |\n\n### Preview\n\nGlobal `admin` options can accept a `preview` function that will be used to generate a link pointing to the frontend of\nyour app to preview data.\n\nIf the function is specified, a Preview button will automatically appear in the corresponding global's Edit view.\nClicking the Preview button will link to the URL that is generated by the function.\n\n**The preview function accepts two arguments:**\n\n1. The document being edited\n1. An `options` object, containing `locale` and `token` properties. The `token` is the currently logged-in user's JWT.\n\n**Example global with preview function:**\n\n```ts\nimport { GlobalConfig } from 'payload/types'\n\nexport const MyGlobal: GlobalConfig = {\n  slug: 'my-global',\n  fields: [\n    {\n      name: 'slug',\n      type: 'text',\n      required: true,\n    },\n  ],\n  admin: {\n    preview: (doc, { locale }) => {\n      if (doc?.slug) {\n        return `https://bigbird.com/preview/${doc.slug}?locale=${locale}`\n      }\n\n      return null\n    },\n  },\n}\n```\n\n### Access control\n\nAs with Collections, you can specify extremely granular access control (what users can do with this Global) on a\nGlobal-by-Global basis. However, Globals only have `update` and `read` access control due to their nature of only having\none document. To learn more, go to the [Access Control](../access-control/overview) docs.\n\n### Hooks\n\nGlobals also fully support a smaller subset of Hooks. To learn more, go to the [Hooks](../hooks/overview)\ndocumentation.\n\n### Field types\n\nGlobals support all field types that Payload has to offer—including simple fields like text and checkboxes all the way\nto more complicated layout-building field groups like Blocks. [Click here](../fields/overview) to learn more about\nfield types.\n\n### TypeScript\n\nYou can import global types as follows:\n\n```ts\nimport { GlobalConfig } from 'payload/types'\n\n// This is the type used for incoming global configs.\n// Only the bare minimum properties are marked as required.\n```\n\n```ts\nimport { SanitizedGlobalConfig } from 'payload/types'\n\n// This is the type used after an incoming global config is fully sanitized.\n// Generally, this is only used internally by Payload.\n```\n",
            "desc": "Set up your Global config for your needs by defining fields, adding slugs and labels, establishing access control, tying in hooks and more.",
            "headings": [
              {
                "id": "options",
                "level": 2,
                "text": "Options"
              },
              {
                "id": "admin-options",
                "level": 3,
                "text": "Admin options"
              },
              {
                "id": "preview",
                "level": 3,
                "text": "Preview"
              },
              {
                "id": "access-control",
                "level": 3,
                "text": "Access control"
              },
              {
                "id": "hooks",
                "level": 3,
                "text": "Hooks"
              },
              {
                "id": "field-types",
                "level": 3,
                "text": "Field types"
              },
              {
                "id": "typescript",
                "level": 3,
                "text": "TypeScript"
              }
            ],
            "keywords": "globals, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Globals",
            "order": 30,
            "title": "Global Configs"
          },
          {
            "slug": "i18n",
            "content": "\nNot only does Payload support managing localized content, it also has internationalization support so that admin users can work in their preferred language. Payload's i18n support is built on top of [i18next](https://www.i18next.com). It comes included by default and can be extended in your config.\n\nWhile Payload's built-in features come translated, you may want to also translate parts of your project's configuration too. This is possible in places like collections and globals labels and groups, field labels, descriptions and input placeholder text. The admin UI will display all the correct translations you provide based on the user's language.\n\nHere is an example of a simple collection supporting both English and Spanish editors:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Articles: CollectionConfig = {\n  slug: 'articles',\n  labels: {\n    singular: {\n      en: 'Article',\n      es: 'Artículo',\n    },\n    plural: {\n      en: 'Articles',\n      es: 'Artículos',\n    },\n  },\n  admin: {\n    group: { en: 'Content', es: 'Contenido' },\n  },\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n      label: {\n        en: 'Title',\n        es: 'Título',\n      },\n      admin: {\n        placeholder: { en: 'Enter title', es: 'Introduce el título' },\n      },\n    },\n    {\n      name: 'type',\n      type: 'radio',\n      options: [\n        {\n          value: 'news',\n          label: { en: 'News', es: 'Noticias' },\n        }, // etc...\n      ],\n    },\n  ],\n}\n```\n\n### Admin UI\n\nThe Payload admin panel reads the language settings of a user's browser and display all text in that language, or will fall back to English if the user's language is not yet supported.\nAfter a user logs in, they can change their language selection in the `/account` view.\n\n<Banner>\n  <strong>Note:</strong>\n  <br />\n  If there is a language that Payload does not yet support, we accept code\n  [contributions](https://github.com/payloadcms/payload/blob/main/CONTRIBUTING.md).\n</Banner>\n\n### Node Express\n\nPayload's backend uses express middleware to set the language on incoming requests before they are handled. This allows backend validation to return error messages in the user's own language or system generated emails to be sent using the correct translation. You can make HTTP requests with the `accept-language` header and Payload will use that language.\n\nAnywhere in your Payload app that you have access to the `req` object, you can access i18next's extensive internationalization features assigned to `req.i18n`. To access text translations you can use `req.t('namespace:key')`.\n\nRead the i18next [API documentation](https://www.i18next.com/overview/api) to learn more.\n\n### Configuration Options\n\nIn your Payload config, you can add translations and customize the settings in `i18n`. Payload will use your custom options and merge it with the default, allowing you to override the settings Payload provides.\n\n**Example Payload config extending i18n:**\n\n```ts\nimport { buildConfig } from 'payload/config'\n\nexport default buildConfig({\n  //...\n  i18n: {\n    fallbackLng: 'en', // default\n    debug: false, // default\n    resources: {\n      en: {\n        custom: {\n          // namespace can be anything you want\n          key1: 'Translation with {{variable}}', // translation\n        },\n        // override existing translation keys\n        general: {\n          dashboard: 'Home',\n        },\n      },\n    },\n  },\n  //...\n})\n```\n\nSee the i18next [configuration options](https://www.i18next.com/overview/configuration-options) to learn more.\n",
            "desc": "Manage and customize internationalization support in your CMS editor experience",
            "headings": [
              {
                "id": "admin-ui",
                "level": 3,
                "text": "Admin UI"
              },
              {
                "id": "node-express",
                "level": 3,
                "text": "Node Express"
              },
              {
                "id": "configuration-options",
                "level": 3,
                "text": "Configuration Options"
              }
            ],
            "keywords": "internationalization, i18n, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "I18n",
            "order": 40,
            "title": "I18n"
          },
          {
            "slug": "localization",
            "content": "\nPayload features deep field-based localization support. Maintaining as many locales as you need is easy. All\nlocalization support is opt-in by default. To do so, follow the two steps below.\n\n### Enabling in the Payload config\n\nAdd the `localization` property to your Payload config to enable localization project-wide. You'll need to provide a\nlist of all locales that you'd like to support as well as set a few other options.\n\n**Example Payload config set up for localization:**\n\n```ts\nimport { buildConfig } from 'payload/config'\n\nexport default buildConfig({\n  collections: [\n    // collections go here\n  ],\n  localization: {\n    locales: ['en', 'es', 'de'], // required\n    defaultLocale: 'en', // required\n    fallback: true,\n  },\n})\n```\n\n**Example Payload config set up for localization with full locales objects:**\n\n```ts\nimport { buildConfig } from 'payload/config'\n\nexport default buildConfig({\n  collections: [\n    // collections go here\n  ],\n  localization: {\n    locales: [\n      {\n        label: 'English',\n        code: 'en',\n      },\n      {\n        label: 'Arabic',\n        code: 'ar',\n        // opt-in to setting default text-alignment on Input fields to rtl (right-to-left)\n        // when current locale is rtl\n        rtl: true,\n      },\n    ],\n    defaultLocale: 'en', // required\n    fallback: true,\n  },\n})\n```\n\n**Example Payload config set up for localization with full locales objects (\nincluding [internationalization](../configuration/i18n) support):**\n\n```ts\nimport { buildConfig } from 'payload/config'\n\nexport default buildConfig({\n  collections: [\n    // collections go here\n  ],\n  localization: {\n    locales: [\n      {\n        label: {\n          en: 'English', // English label\n          nb: 'Engelsk', // Norwegian label\n        },\n        code: 'en',\n      },\n      {\n        label: {\n          en: 'Norwegian', // English label\n          nb: 'Norsk', // Norwegian label\n        },\n        code: 'nb',\n      },\n    ],\n    defaultLocale: 'en', // required\n    fallback: true,\n  },\n})\n```\n\n**Here is a brief explanation of each of the options available within the `localization` property:**\n\n**`locales`**\n\nArray-based list of all the languages that you would like to support. This can be an array containing strings for each\nlanguage code you want your project to store and serve or objects with a `label`, a locale `code`, `rtl` (\nright-to-left), and `fallbackLocale` property. The locale codes do not need to be in any specific format. It's up to you\nto define how to represent your locales. Common patterns are to use two-letter ISO 639 language codes or four-letter\nlanguage and country codes (ISO 3166‑1) such as `en-US`, `en-UK`, `es-MX`, etc.\n\n### Locale Properties:\n\n| Option               | Description                                                                                                                    |\n|----------------------|--------------------------------------------------------------------------------------------------------------------------------|\n| **`code`** \\*        | Unique code to identify the language throughout the APIs for `locale` and `fallbackLocale`                                     |\n| **`label`**          | A string to use for the selector when choosing a language, or an object keyed on the i18n keys for different languages in use. |\n| **`rtl`**            | A boolean that when true will make the admin UI display in Right-To-Left.                                                      |\n| **`fallbackLocale`** | The code for this language to fallback to when properties of a document are not present.                                       |\n\n_\\* An asterisk denotes that a property is required._\n\n**`defaultLocale`**\n\nRequired string that matches one of the locale codes from the array provided. By default, if no locale is specified,\ndocuments will be returned in this locale.\n\n**`fallback`**\n\nBoolean enabling \"fallback\" locale functionality. If a document is requested in a locale, but a field does not have a\nlocalized value corresponding to the requested locale, then if this property is enabled, the document will automatically\nfall back to the fallback locale value. If this property is not enabled, the value will not be populated.\n\n### Field by field localization\n\nPayload localization works on a **field** level—not a document level. In addition to configuring the base Payload config\nto support localization, you need to specify each field that you would like to localize.\n\n**Here is an example of how to enable localization for a field:**\n\n```js\n{\n  name: 'title',\n  type: 'text',\n  // highlight-start\n  localized: true,\n  // highlight-end\n}\n```\n\nWith the above configuration, the `title` field will now be saved in the database as an object of all locales instead of\na single string.\n\nAll field types with a `name` property support the `localized` property—even the more complex field types like `array`s\nand `block`s.\n\n<Banner>\n  <strong>Note:</strong>\n  <br />\n  Enabling localization for field types that support nested fields will automatically create\n  localized \"sets\" of all fields contained within the field. For example, if you have a page layout\n  using a blocks field type, you have the choice of either localizing the full layout, by enabling\n  localization on the top-level blocks field, or only certain fields within the layout.\n</Banner>\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  When converting an existing field to or from `localized: true` the data structure in the document\n  will change for this field and so existing data for this field will be lost. Before changing the\n  localization setting on fields with existing data, you may need to consider a field migration\n  strategy.\n</Banner>\n\n### Retrieving localized docs\n\nWhen retrieving documents, you can specify which locale you'd like to receive as well as which fallback locale should be\nused.\n\n##### REST API\n\nREST API locale functionality relies on URL query parameters.\n\n**`?locale=`**\n\nSpecify your desired locale by providing the `locale` query parameter directly in the endpoint URL.\n\n**`?fallback-locale=`**\n\nSpecify fallback locale to be used by providing the `fallback-locale` query parameter. This can be provided as either a\nvalid locale as provided to your base Payload config, or `'null'`, `'false'`, or `'none'` to disable falling back.\n\n**Example:**\n\n```\nfetch('https://localhost:3000/api/pages?locale=es&fallback-locale=none');\n```\n\n##### GraphQL API\n\nIn the GraphQL API, you can specify `locale` and `fallbackLocale` args to all relevant queries and mutations.\n\nThe `locale` arg will only accept valid locales, but locales will be formatted automatically as valid GraphQL enum\nvalues (dashes or special characters will be converted to underscores, spaces will be removed, etc.). If you are curious\nto see how locales are auto-formatted, you can use the [GraphQL playground](../graphql/overview#graphql-playground).\n\nThe `fallbackLocale` arg will accept valid locales as well as `none` to disable falling back.\n\n**Example:**\n\n```graphql\nquery {\n    Posts(locale: de, fallbackLocale: none) {\n        docs {\n            title\n        }\n    }\n}\n```\n\n<Banner>\n  In GraphQL, specifying the locale at the top level of a query will automatically apply it\n  throughout all nested relationship fields. You can override this behavior by re-specifying locale\n  arguments in nested related document queries.\n</Banner>\n\n##### Local API\n\nYou can specify `locale` as well as `fallbackLocale` within the Local API as well as properties on the `options`\nargument. The `locale` property will accept any valid locale, and the `fallbackLocale` property will accept any valid\nlocale as well as `'null'`, `'false'`, `false`, and `'none'`.\n\n**Example:**\n\n```js\nconst posts = await payload.find({\n  collection: 'posts',\n  locale: 'es',\n  fallbackLocale: false,\n})\n```\n\n<Banner type=\"alert\">\n  <strong>Tip:</strong>\n  <br />\n  The REST and Local APIs can return all localization data in one request by passing 'all' or '*' as\n  the <strong>locale</strong> parameter. The response will be structured so that field values come\n  back as the full objects keyed for each locale instead of the single, translated value.\n</Banner>\n",
            "desc": "Add and maintain as many locales as you need by adding Localization to your Payload config, set options for default locale, fallbacks, fields and more.",
            "headings": [
              {
                "id": "enabling-in-the-payload-config",
                "level": 3,
                "text": "Enabling in the Payload config"
              },
              {
                "id": "locale-properties",
                "level": 3,
                "text": "Locale Properties:"
              },
              {
                "id": "field-by-field-localization",
                "level": 3,
                "text": "Field by field localization"
              },
              {
                "id": "retrieving-localized-docs",
                "level": 3,
                "text": "Retrieving localized docs"
              }
            ],
            "keywords": "localization, internationalization, i18n, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Localization",
            "order": 50,
            "title": "Localization"
          },
          {
            "slug": "express",
            "content": "\nPayload utilizes a few Express-specific middleware packages within its own routers. You can customize how they work by passing in configuration options to the main Payload config's `express` property.\n\n### Custom Middleware\n\nPayload allows you to pass in custom Express middleware to be used on all of the routes it opens. This is useful for adding logging or any other custom functionality to your endpoints.\n\nThere are 2 exposed properties. Each property is an array of middleware functions.\n\n- `preMiddleware` - runs before any of the Payload middleware\n- `postMiddleware` - runs after all of the Payload middleware\n\n```ts\n{\n  express: {\n    preMiddleware: [\n      (req, res, next) => {\n        // do something\n        next()\n      }\n    ],\n    postMiddleware: [\n      (req, res, next) => {\n        // do something\n        next()\n      }\n    ]\n  }\n}\n\n// Example logging middleware function\nconst requestLoggerMiddleware = (req, res, next) => {\n  req.payload.logger.info(`request: ${req.method} ${req.url}`)\n  next()\n}\n```\n\n### JSON\n\n`express.json()` is used to parse JSON body content into JavaScript objects accessible on the Express `req`. Payload allows you to customize all of the `json` method's options. Common examples of customization use-cases are increasing the max allowed JSON body size which defaults to `2MB`.\n\n**Example payload.config.js for how to increase the max JSON size allowed to be sent to Payload endpoints:**\n\n```js\n{\n\texpress: {\n\t\tjson: {\n\t\t\tlimit: '4mb',\n\t\t}\n\t}\n}\n```\n\nYou can find a list of all available options that are able to be passed to `express.json()` [here](https://expressjs.com/en/api.html).\n\n### Compression\n\nPayload uses the `compression` package to optimize transfer size for all of the routes it opens, and you can pass customization options through the Payload config.\n\nTo customize compression options, pass an object to the Payload config's `express` property.\n\n**Example payload.config.js:**\n\n```js\n{\n  express: {\n    compression: {\n      // settings go here\n    }\n  }\n}\n```\n\nTypically, the default options for this package are suitable. However, for a list of all available customization options, [click here](http://expressjs.com/en/resources/middleware/compression.html).\n",
            "desc": "Payload utilizes Express middleware packages, you can customize how they work by passing in configuration options.",
            "headings": [
              {
                "id": "custom-middleware",
                "level": 3,
                "text": "Custom Middleware"
              },
              {
                "id": "json",
                "level": 3,
                "text": "JSON"
              },
              {
                "id": "compression",
                "level": 3,
                "text": "Compression"
              }
            ],
            "keywords": "config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Express",
            "order": 60,
            "title": "Express"
          }
        ]
      },
      {
        "slug": "Database",
        "docs": [
          {
            "slug": "overview",
            "content": "\nPayload interacts with your database via the database adapter that you choose. Right now, Payload officially supports two database adapters:\n\n1. [MongoDB](../database/mongodb) w/ [Mongoose](https://mongoosejs.com/)\n1. [Postgres](../database/postgres) w/ [Drizzle](https://drizzle.team/)\n\nWe will be adding support for SQLite and MySQL in the near future using Drizzle ORM.\n\nTo use a specific database adapter, you need to install it and configure it according to its own specifications. Visit the documentation for your applicable database adapter to learn more.\n\n## Selecting a database\n\nThere are several factors to consider when choosing which database technology and hosting option is right for your project and workload. Payload can theoretically support any database, but it's up to you to decide which database to use.\n\n#### When to use MongoDB\n\nIf your project has a lot of dynamic fields, and you are comfortable with allowing Payload to enforce data integrity across your documents, MongoDB is a great choice. With it, your Payload documents are stored as _one_ document in your database—no matter if you have localization enabled, how many block or array fields you have, etc. This means that the shape of your data in your database will very closely reflect your field schema, and there is minimal complexity involved in storing or retrieving your data.\n\nYou should prefer MongoDB if:\n\n- You prefer simplicity within your database\n- You don't want to deal with keeping production / staging databases in sync via [DDL changes](https://en.wikipedia.org/wiki/Data_definition_language)\n- Most (or everything) in your project is localized\n- You leverage a lot of array fields, block fields, or `hasMany` select fields and similar\n\n#### When to use a relational DB\n\nMany projects might call for more rigid database architecture where the shape of your data is strongly enforced at the database level. For example, if you know the shape of your data and it's relatively \"flat\", and you don't anticipate it to change often, your workload might suit relational databases like Postgres very well.\n\nYou should prefer a relational DB like Postgres if:\n\n- You are comfortable with migration workflows\n- You require enforced data consistency at the database level\n- You have a lot of relationships between collections and require relationships to be enforced\n\n#### Differences in Payload features\n\nIt's important to note that almost everything Payload does is available in all of our officially supported database adapters, including localization, arrays, blocks, etc. \n\nThe only thing that is not supported in Postgres yet is the [Point field](../fields/point), but that should be added soon. \n\nIt's up to you to choose which database you would like to use.\n\n## Configuration\n\nTo configure the database for your Payload application, an adapter can be assigned to `config.db`. This property is required within your Payload config. \n\nHere's an example:\n\n```ts\nimport { postgresAdapter } from '@payloadcms/db-postgres'\n\nexport default buildConfig({\n  // Your config goes here\n  collections: [\n    // Collections go here\n  ],\n  // Here is where you pass your database adapter\n  // and the adapter will require options specific to itself\n  db: postgresAdapter({\n    pool: {\n      connectionString: process.env.DATABASE_URI,\n    }\n  }),\n})\n```\n\n## Collection Operations\n\nTo configure Collection database operations in your Payload application, your Collection config has methods that can override default database operations for that Collection.\n\nThe override methods receive arguments useful for augmenting operations such as Field data, the collection slug, and the req.\n\nHere is an example:\n```ts\nimport type { CollectionConfig } from 'payload/types'\n\nexport const Collection: CollectionConfig => {\n  return {\n    slug: 'collection-db-operations',\n    db: {\n      // Create a document in a custom db\n      create: async ({ collection, data, req }) => {\n        const doc = await fetch(`https://example.com/api/${collection}/create`, {\n          method: \"POST\",\n          body: JSON.stringify(data),\n          headers: {\n            'x-app-user': `payload_${req.payload.user}`,\n            'Content-Type': 'application/json'\n          }\n        }).then(response => response.json())\n        \n        return doc\n      },\n\n      // Delete a document in a custom db\n      deleteOne: async ({ collection, data, req }) => {\n        const docs = await fetch(`https://example.com/api/${collection}/delete/${data.id}`, {\n          method: 'DELETE',\n          headers: {\n            'x-app-user': `payload_${req.payload.user}`\n          }\n        }).then(response => response.json())\n        \n        return docs\n      },\n\n      // Delete many documents in a custom db\n      deleteMany: async ({ collection, data, req }) => {\n        const docs = await fetch(`https://example.com/api/${collection}/delete`, {\n          method: 'DELETE'\n          headers: {\n            'x-app-user': `payload_${req.payload.user}`\n          }\n          body: JSON.stringify(data),\n        }).then(response => response.json())\n        \n        return docs\n      },\n\n      // Find documents in a custom db\n      find: async ({ collection, data, req, where, limit }) => {\n        const docs = await fetch(`https://example.com/api/${collection}/find`, {\n          headers: {\n            'x-app-user': `payload_${req.payload.user}`\n          }\n          body: JSON.stringify({data, where, limit}),\n        }).then(response => response.json())\n        \n        return { docs }\n      },\n\n      // Find one document in a custom db\n      findOne: async ({ collection, data, req }) => {\n        const doc = await fetch(`https://example.com/api/${collection}/find/${data.id}`, {\n          headers: {\n            'x-app-user': `payload_${req.payload.user}`\n          }\n        }).then(response => response.json())\n        \n        return doc\n      },\n\n      // Update one document in an custom db\n      updateOne: async ({ collection, data, req }) => {\n        const doc = await fetch(`https://example.com/api/${collection}/update/${data.id}`, {\n          method: 'PUT',\n          body: JSON.stringify(data),\n          headers: {\n            'x-app-user': `payload_${req.payload.user}`,\n            'Content-Type': 'application/json'\n          }\n        }).then(response => response.json())\n        \n        return { ...doc, updated: true }\n      },\n    },\n    fields: [\n      {\n        name: 'name',\n        type: 'text',\n      },\n    ],\n  }\n}\n\n```\n",
            "desc": "With Payload, you bring your own database and own your data. You have full control.",
            "headings": [
              {
                "id": "selecting-a-database",
                "level": 2,
                "text": "Selecting a database"
              },
              {
                "id": "configuration",
                "level": 2,
                "text": "Configuration"
              },
              {
                "id": "collection-operations",
                "level": 2,
                "text": "Collection Operations"
              }
            ],
            "keywords": "database, mongodb, postgres, documentation, Content Management System, cms, headless, typescript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Database"
          },
          {
            "slug": "migrations",
            "content": "\nPayload exposes a full suite of migration controls available for your use. Migration commands are accessible via\nthe `npm run payload` command in your project directory.\n\nEnsure you have an npm script called \"payload\" in your `package.json` file.\n\n```json\n{\n  \"scripts\": {\n    \"payload\": \"cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts payload\"\n  }\n}\n```\n\n<Banner>\n  Note that you need to run Payload migrations through the package manager that you are using, because Payload should not be globally installed on your system.\n</Banner>\n\n### Migration file contents\n\nPayload stores all created migrations in a folder that you can specify. By default, migrations are stored\nin `./src/migrations`.\n\nA migration file has two exports - an `up` function, which is called when a migration is executed, and a `down` function\nthat will be called if for some reason the migration fails to complete successfully. The `up` function should contain\nall changes that you attempt to make within the migration, and the `down` should ideally revert any changes you make.\n\nFor an added level of safety, migrations should leverage Payload [transactions](../database/transactions). Migration\nfunctions should make use of the `req` by adding it to the arguments of your payload local API calls such\nas `payload.create` and database adapter methods like `payload.db.create`.\n\nHere is an example migration file:\n\n```ts\nimport { MigrateUpArgs, MigrateDownArgs } from '@payloadcms/your-db-adapter'\n\nexport async function up ({ payload, req }: MigrateUpArgs): Promise<void> {\n  // Perform changes to your database here.\n  // You have access to `payload` as an argument, and\n  // everything is done in TypeScript.\n};\n\nexport async function down ({ payload, req }: MigrateDownArgs): Promise<void> {\n  // Do whatever you need to revert changes if the `up` function fails\n};\n```\n\n### Migrations Directory\n\nEach DB adapter has an optional property `migrationDir` where you can override where you want your migrations to be\nstored/read. If this is not specified, Payload will check the default and possibly make a best effort to find your\nmigrations directory by searching in common locations ie. `./src/migrations`, `./dist/migrations`, `./migrations`, etc.\n\nAll database adapters should implement similar migration patterns, but there will be small differences based on the\nadapter and its specific needs. Below is a list of all migration commands that should be supported by your database\nadapter.\n\n## Commands\n\n### Migrate\n\nThe `migrate` command will run any migrations that have not yet been run.\n\n```text\nnpm run payload migrate\n```\n\n### Create\n\nCreate a new migration file in the migrations directory. You can optionally name the migration that will be created. By\ndefault, migrations will be named using a timestamp.\n\n```text\nnpm run payload migrate:create optional-name-here\n```\n\n### Status\n\nThe `migrate:status` command will check the status of migrations and output a table of which migrations have been run,\nand which migrations have not yet run.\n\n`payload migrate:status`\n\n```text\nnpm run payload migrate:status\n```\n\n### Down\n\nRoll back the last batch of migrations.\n\n```text\nnpm run payload migrate:down\n```\n\n### Refresh\n\nRoll back all migrations that have been run, and run them again.\n\n```text\nnpm run payload migrate:refresh\n```\n\n### Reset\n\nRoll back all migrations.\n\n```text\nnpm run payload migrate:reset\n```\n\n### Fresh\n\nDrops all entities from the database and re-runs all migrations from scratch.\n\n```text\nnpm run payload migrate:fresh\n```\n",
            "desc": "Payload features first-party database migrations all done in TypeScript.",
            "headings": [
              {
                "id": "migration-file-contents",
                "level": 3,
                "text": "Migration file contents"
              },
              {
                "id": "migrations-directory",
                "level": 3,
                "text": "Migrations Directory"
              },
              {
                "id": "commands",
                "level": 2,
                "text": "Commands"
              },
              {
                "id": "migrate",
                "level": 3,
                "text": "Migrate"
              },
              {
                "id": "create",
                "level": 3,
                "text": "Create"
              },
              {
                "id": "status",
                "level": 3,
                "text": "Status"
              },
              {
                "id": "down",
                "level": 3,
                "text": "Down"
              },
              {
                "id": "refresh",
                "level": 3,
                "text": "Refresh"
              },
              {
                "id": "reset",
                "level": 3,
                "text": "Reset"
              },
              {
                "id": "fresh",
                "level": 3,
                "text": "Fresh"
              }
            ],
            "keywords": "database, migrations, ddl, sql, mongodb, postgres, documentation, Content Management System, cms, headless, typescript, node, react, express",
            "label": "Migrations",
            "order": 20,
            "title": "Migrations"
          },
          {
            "slug": "transactions",
            "content": "\nDatabase transactions allow your application to make a series of database changes in an all-or-nothing commit. Consider an HTTP request that creates a new **Order** and has an `afterChange` hook to update the stock count of related **Items**. If an error occurs when updating an **Item** and an HTTP error is returned to the user, you would not want the new **Order** to be persisted or any other items to be changed either. This kind of interaction with the database is handled seamlessly with transactions.\n\nBy default, Payload will use transactions for all operations, as long as it is supported by the configured database. Database changes are contained within all Payload operations and any errors thrown will result in all changes being rolled back without being committed. When transactions are not supported by the database, Payload will continue to operate as expected without them.\n\n<Banner type=\"info\">\n  <strong>Note:</strong>\n  <br />\n  MongoDB requires a connection to a replicaset in order to make use of transactions.\n</Banner>\n\nThe initial request made to Payload will begin a new transaction and attach it to the `req.transactionID`. If you have a `hook` that interacts with the database, you can opt-in to using the same transaction by passing the `req` in the arguments. For example:\n\n```ts\nconst afterChange: CollectionAfterChangeHook = async ({ req }) => {\n  // because req.transactionID is assigned from Payload and passed through,\n  // my-slug will only persist if the entire request is successful\n  await req.payload.create({\n    req,\n    collection: 'my-slug',\n    data: {\n      some: 'data',\n    },\n  })\n}\n```\n\n### Async Hooks with Transactions\n\nSince Payload hooks can be async and be written to not await the result, it is possible to have an incorrect success response returned on a request that is rolled back. If you have a hook where you do not `await` the result, then you should **not** pass the `req.transactionID`.\n\n```ts\nconst afterChange: CollectionAfterChangeHook = async ({ req }) => {\n  // WARNING: an async call made with the same req, but NOT awaited,\n  // may fail resulting in an OK response being returned with response data that is not committed\n  const dangerouslyIgnoreAsync = req.payload.create({\n    req,\n    collection: 'my-slug',\n    data: {\n      some: 'other data',\n    },\n  })\n\n  // Should this call fail, it will not rollback other changes\n  // because the req (and its transactionID) is not passed through\n  const safelyIgnoredAsync = req.payload.create({\n    collection: 'my-slug',\n    data: {\n      some: 'other data',\n    },\n  })\n}\n```\n\n### Direct Transaction Access\n\nWhen writing your own scripts or custom endpoints, you may wish to have direct control over transactions. This is useful for interacting with your database in something like a background job, outside the normal request-response flow.\n\nThe following functions can be used for managing transactions:\n\n`payload.db.beginTransaction` - Starts a new session and returns a transaction ID for use in other Payload Local API calls. Note that if your database does not support transactions, this will return `null`.\\\n`payload.db.commitTransaction` - Takes the identifier for the transaction, finalizes any changes.\\\n`payload.db.rollbackTransaction` - Takes the identifier for the transaction, discards any changes.\n\nYou can then use the transaction ID with Payload's local API by passing it inside the `PayloadRequest` object.\n\nHere is an example for a \"background job\" function, which utilizes the direct transaction API to make sure it either succeeds completely or gets rolled back in case of an error.\n\n```ts\nasync function allOrNothingJob() {\n    const req = {} as PayloadRequest;\n    req.transactionID = await payload.db.beginTransaction();\n    try {\n      await payload.create({\n        req, // use our manual transaction\n        collection: 'my-slug',\n        data: {\n          some: 'data'\n        }\n      });\n\n      await payload.create({\n        req, // use our manual transaction\n        collection: 'something-else',\n        data: {\n          some: 'data'\n        }\n      });\n      console.log('Everything done.');\n      if (req.transactionID) await payload.db.commitTransaction(req.transactionID);\n    } catch (e) {\n      console.error('Oh no, something went wrong!');\n      if (req.transactionID) await payload.db.rollbackTransaction(req.transactionID);\n    }\n\n}\n```\n",
            "desc": "Database transactions are fully supported within Payload.",
            "headings": [
              {
                "id": "async-hooks-with-transactions",
                "level": 3,
                "text": "Async Hooks with Transactions"
              },
              {
                "id": "direct-transaction-access",
                "level": 3,
                "text": "Direct Transaction Access"
              }
            ],
            "keywords": "database, transactions, sql, mongodb, postgres, documentation, Content Management System, cms, headless, typescript, node, react, express",
            "label": "Transactions",
            "order": 30,
            "title": "Transactions"
          },
          {
            "slug": "mongodb",
            "content": "\nTo use Payload with MongoDB, install the package `@payloadcms/db-mongodb`. It will come with everything you need to\nstore your Payload data in MongoDB.\n\nThen from there, pass it to your Payload config as follows:\n\n```ts\nimport { mongooseAdapter } from '@payloadcms/db-mongodb'\n\nexport default buildConfig({\n  // Your config goes here\n  collections: [\n    // Collections go here\n  ],\n  // Configure the Mongoose adapter here\n  db: mongooseAdapter({\n    // Mongoose-specific arguments go here.\n    // URL is required.\n    url: process.env.DATABASE_URI,\n  }),\n})\n```\n\n### Options\n\n| Option               | Description                                                                                                                                                                                                                                                                                                  |\n|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `autoPluralization`  | Tell Mongoose to auto-pluralize any collection names if it encounters any singular words used as collection `slug`s.                                                                                                                                                                                         |\n| `schemaOptions`      | Customize schema options for all Mongoose schemas created internally.                                                                                                                                                                                                                                        |\n| `jsonParse`          | Set to false to disable the automatic JSON stringify/parse of data queried by MongoDB. For example, if you have data not tracked by Payload such as `Date` fields and similar, you can use this option to ensure that existing `Date` properties remain as `Date` and not strings.                           |\n| `collections`        | Options on a collection-by-collection basis. [More](#collections-options)                                                                                                                                                                                                                                    |\n| `globals`            | Options for the Globals collection created by Payload. [More](#globals-options)                                                                                                                                                                                                                              |\n| `connectOptions`     | Customize MongoDB connection options. Payload will connect to your MongoDB database using default options which you can override and extend to include all the [options](https://mongoosejs.com/docs/connections.html#options) available to mongoose.                                                        |\n| `disableIndexHints`  | Set to true to disable hinting to MongoDB to use 'id' as index. This is currently done when counting documents for pagination, as it increases the speed of the count function used in that query. Disabling this optimization might fix some problems with AWS DocumentDB. Defaults to false                |\n| `migrationDir`       | Customize the directory that migrations are stored.                                                                                                                                                                                                                                                          |\n| `transactionOptions` | An object with configuration properties used in [transactions](https://www.mongodb.com/docs/manual/core/transactions/) or `false` which will disable the use of transactions.                                                                                                                                |\n| `collation`          | Enable language-specific string comparison with customizable options. Available on MongoDB 3.4+. Defaults locale to \"en\". Example: `{ strength: 3 }`. For a full list of collation options and their definitions, see the [MongoDB documentation](https://www.mongodb.com/docs/manual/reference/collation/). |\n\n### Access to Mongoose models\n\nAfter Payload is initialized, this adapter exposes all of your Mongoose models and they are available for you to work\nwith directly.\n\nYou can access Mongoose models as follows:\n\n- Collection models - `payload.db.collections[myCollectionSlug]`\n- Globals model - `payload.db.globals`\n- Versions model (both collections and globals) - `payload.db.versions[myEntitySlug]`\n\n### Collections Options\n\nYou can configure the way the MongoDB adapter works on a collection-by-collection basis, including customizing Mongoose `schemaOptions` for each collection schema created.\n\nExample:\n\n```ts\nconst db = mongooseAdapter({\n  url: 'your-url-here',\n  collections: {\n    users: {\n      //\n      schemaOptions: {\n        strict: false,\n      }\n    }\n  }\n})\n```\n\n### Global Options\n\nPayload automatically creates a single `globals` collection that correspond with any Payload globals that you define. When you initialize the `mongooseAdapter`, you can specify settings here for your globals in a similar manner to how you can for collections above. Right now, the only property available is `schemaOptions` but more may be added in the future.\n\n### Preserving externally managed data\n\nYou can use Payload in conjunction with an existing MongoDB database, where you might have some fields \"tracked\" in Payload via corresponding field configs, and other fields completely unknown to Payload.\n\nIf you have external field data in existing MongoDB collections which you'd like to use in combination with Payload, and you don't want to lose those external fields, you can configure Payload to \"preserve\" that data while it makes updates to your existing documents.\n\nTo do this, the first step is to configure Mongoose's `strict` property, which tells Mongoose to write all data that it receives (and not disregard any data that it does not know about).\n\nThe second step is to disable Payload's automatic JSON parsing of documents it receives from MongoDB.\n\nHere's an example for how to configure your Mongoose adapter to preserve external collection fields that are not tracked by Payload:\n\n```ts\nmongooseAdapter({\n  url: process.env.DATABASE_URI,\n  // Disable the JSON parsing that Payload performs\n  jsonParse: false,\n  // Disable strict mode for Mongoose\n  schemaOptions: {\n    strict: false,\n  },\n})\n```\n",
            "desc": "Payload has supported MongoDB natively since we started. The flexible nature of MongoDB lends itself well to Payload's powerful fields.",
            "headings": [
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "access-to-mongoose-models",
                "level": 3,
                "text": "Access to Mongoose models"
              },
              {
                "id": "collections-options",
                "level": 3,
                "text": "Collections Options"
              },
              {
                "id": "global-options",
                "level": 3,
                "text": "Global Options"
              },
              {
                "id": "preserving-externally-managed-data",
                "level": 3,
                "text": "Preserving externally managed data"
              }
            ],
            "keywords": "MongoDB, documentation, typescript, Content Management System, cms, headless, javascript, node, react, express",
            "label": "MongoDB",
            "order": 40,
            "title": "MongoDB"
          },
          {
            "slug": "postgres",
            "content": "\nTo use Payload with Postgres, install the package `@payloadcms/db-postgres`. It leverages Drizzle ORM and `node-postgres` to interact with a Postgres database that you provide.\n\n<Banner>\n  The Postgres database adapter is currently in beta. If you would like to help us test this package, we'd love to hear if you find any bugs or issues!\n</Banner>\n\nIt automatically manages changes to your database for you in development mode, and exposes a full suite of migration controls for you to leverage in order to keep other database environments in sync with your schema. DDL transformations are automatically generated.\n\nTo configure Payload to use Postgres, pass the `postgresAdapter` to your Payload config as follows:\n\n```ts\nimport { postgresAdapter } from '@payloadcms/db-postgres'\n\nexport default buildConfig({\n  // Your config goes here\n  collections: [\n    // Collections go here\n  ],\n  // Configure the Postgres adapter here\n  db: postgresAdapter({\n    // Postgres-specific arguments go here.\n    // `pool` is required.\n    pool: {\n      connectionString: process.env.DATABASE_URI,\n    }\n  }),\n})\n```\n\n### Options\n\n| Option                | Description                                                                                                                                                                                           |\n|-----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `pool` \\*             | [Pool connection options](https://orm.drizzle.team/docs/quick-postgresql/node-postgres) that will be passed to Drizzle and `node-postgres`.                                                           |\n| `push`                | Disable Drizzle's [`db push`](https://orm.drizzle.team/kit-docs/overview#prototyping-with-db-push) in development mode. By default, `push` is enabled for development mode only.                      |\n| `migrationDir`        | Customize the directory that migrations are stored.                                                                                                                                                   |\n| `logger`              | The instance of the logger to be passed to drizzle. By default Payload's will be used.                                                                                                                |\n| `schemaName`   | A string for the postgres schema to use, defaults to 'public'.                                                                                                                   |\n| `localesSuffix`       | A string appended to the end of table names for storing localized fields. Default is '_locales'.                                                                                                      |\n| `relationshipsSuffix` | A string appended to the end of table names for storing relationships. Default is '_rels'.                                                                                                            |\n| `versionsSuffix`      | A string appended to the end of table names for storing versions. Defaults to '_v'.                                                                                                                   |\n\n\n\n### Access to Drizzle\n\nAfter Payload is initialized, this adapter will expose the full power of Drizzle to you for use if you need it.\n\nYou can access Drizzle as follows:\n\n```text\npayload.db.drizzle\n```\n\n### Tables, relations, and enums\n\nIn addition to exposing Drizzle directly, all of the tables, Drizzle relations, and enum configs are exposed for you via the `payload.db` property as well.\n\n- Tables - `payload.db.tables`\n- Enums - `payload.db.enums`\n- Relations - `payload.db.relations`\n\n### Prototyping in development mode\n\nDrizzle exposes two ways to work locally in development mode.\n\nThe first is [`db push`](https://orm.drizzle.team/kit-docs/overview#prototyping-with-db-push), which automatically pushes changes you make to your Payload config (and therefore, Drizzle schema) to your database so you don't have to manually migrate every time you change your Payload config. This only works in development mode, and should not be mixed with manually running [`migrate`](../database/migrations) commands.\n\nYou will be warned if any changes that you make will entail data loss while in development mode. Push is enabled by default, but you can opt out if you'd like.\n\nAlternatively, you can disable `push` and rely solely on migrations to keep your local database in sync with your Payload config.\n\n### Migration workflows\n\nMigrations are extremely powerful thanks to the seamless way that Payload and Drizzle work together. Let's take the following scenario:\n\n1. You are building your Payload config locally, with a local database used for testing.\n1. You have left the default setting of `push` enabled, so every time you change your Payload config (add or remove fields, collections, etc.), Drizzle will automatically push changes to your local DB.\n1. Once you're done with your changes, or have completed a feature, you can run `npm run payload migrate:create`.\n1. Payload and Drizzle will look for any existing migrations, and automatically generate all SQL changes necessary to convert your schema from its prior state into the state of your current Payload config, and store the resulting DDL in a newly created migration.\n1. Once you're ready to go to production, you will be able to run `npm run payload migrate` against your production database, which will apply any new migrations that have not yet run.\n1. Now your production database is in sync with your Payload config!\n\n<Banner type=\"warning\">\n  Warning: do not mix \"push\" and migrations with your local development database. If you use \"push\" locally, and then try to migrate, Payload will throw a warning, telling you that these two methods are not meant to be used interchangeably.\n</Banner>\n",
            "desc": "Payload supports Postgres through an officially supported Drizzle database adapter.",
            "headings": [
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "access-to-drizzle",
                "level": 3,
                "text": "Access to Drizzle"
              },
              {
                "id": "tables-relations-and-enums",
                "level": 3,
                "text": "Tables, relations, and enums"
              },
              {
                "id": "prototyping-in-development-mode",
                "level": 3,
                "text": "Prototyping in development mode"
              },
              {
                "id": "migration-workflows",
                "level": 3,
                "text": "Migration workflows"
              }
            ],
            "keywords": "Postgres, documentation, typescript, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Postgres",
            "order": 50,
            "title": "Postgres"
          }
        ]
      },
      {
        "slug": "Fields",
        "docs": [
          {
            "slug": "overview",
            "content": "\n<Banner type=\"info\">\n  Fields are the building blocks of Payload. Collections and Globals both use Fields to define the\n  shape of the data that they store. Payload offers a wide variety of field types - both simple and\n  complex.\n</Banner>\n\nFields are defined as an array on Collections and Globals via the `fields` key. They define the shape of the data that will be stored as well as automatically construct the corresponding Admin UI.\n\nThe required `type` property on a field determines what values it can accept, how it is presented in the API, and how the field will be rendered in the admin interface.\n\n**Simple collection with two fields:**\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Page: CollectionConfig = {\n  slug: 'pages',\n  fields: [\n    {\n      name: 'myField',\n      type: 'text', // highlight-line\n    },\n    {\n      name: 'otherField',\n      type: 'checkbox', // highlight-line\n    },\n  ],\n}\n```\n\n### Field types\n\n- [Array](../fields/array) - for repeating content, supports nested fields\n- [Blocks](../fields/blocks) - block-based fields, allowing powerful layout creation\n- [Checkbox](../fields/checkbox) - boolean true / false checkbox\n- [Code](../fields/code) - code editor that saves a string to the database\n- [Collapsible](../fields/collapsible) - used for admin layout, nest fields within a collapsible component\n- [Date](../fields/date) - date / time field that saves a timestamp\n- [Email](../fields/email) - validates the entry is a properly formatted email\n- [Group](../fields/group) - nest fields within an object\n- [JSON](../fields/json) - saves actual JSON in the database\n- [Number](../fields/number) - field that enforces that its value be a number\n- [Point](../fields/point) - geometric coordinates for location data\n- [Radio](../fields/radio) - radio button group, allowing only one value to be selected\n- [Relationship](../fields/relationship) - assign relationships to other collections\n- [Rich Text](../fields/rich-text) - fully extensible Rich Text editor\n- [Row](../fields/row) - used for admin field layout, no effect on data shape\n- [Select](../fields/select) - dropdown / picklist style value selector\n- [Tabs](../fields/tabs) - used for admin layout, nest fields within tabs\n- [Text](../fields/text) - simple text input\n- [Textarea](../fields/textarea) - allows a bit larger of a text editor\n- [Upload](../fields/upload) - allows local file and image upload\n- [UI](../fields/ui) - inject your own custom components and do whatever you need\n\n### Field-level hooks\n\nOne of the most powerful parts about Payload is its ability for you to define field-level hooks that can control the logic of your fields to a fine-grained level. for more information about how to define field hooks, [click here](../hooks/overview#field-hooks).\n\n### Field-level access control\n\nIn addition to being able to define access control on a document-level, you can define extremely granular permissions on a field by field level. For more information about field-level access control, [click here](../access-control/overview#fields).\n\n### Field names\n\nAll fields require a `name` property. This is the key that will be used to store and retrieve the field's value in the database. This property must be unique within the Collection, Global, or nested group that it is defined in.\n\nPayload reserves various field names for internal use. Using reserved field names will result in your field being sanitized from the config.\n\nThe following field names are forbidden and cannot be used:\n\n  - `__v`\n  - `salt`\n  - `hash`\n  - `file`\n\n### Validation\n\nField validation is enforced automatically based on the field type and other properties such as `required` or `min` and `max` value constraints on certain field types. This default behavior can be replaced by providing your own validate function for any field. It will be used on both the frontend and the backend, so it should not rely on any Node-specific packages. The validation function can be either synchronous or asynchronous and expects to return either `true` or a string error message to display in both API responses and within the Admin panel.\n\nThere are two arguments available to custom validation functions.\n\n1. The value which is currently assigned to the field\n2. An optional object with dynamic properties for more complex validation having the following:\n\n| Property      | Description                                                                                                              |\n| ------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| `data`        | An object of the full collection or global document.                                                                     |\n| `siblingData` | An object of the document data limited to fields within the same parent to the field.                                    |\n| `operation`   | Will be \"create\" or \"update\" depending on the UI action or API call.                                                     |\n| `id`          | The value of the collection `id`, will be `undefined` on create request.                                                 |\n| `t`           | The function for translating text, [more](../configuration/i18n).                                                     |\n| `user`        | The currently authenticated user object.                                                                                 |\n| `payload`     | If the `validate` function is being executed on the server, Payload will be exposed for easily running local operations. |\n\nExample:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Orders: CollectionConfig = {\n  slug: 'orders',\n  fields: [\n    {\n      name: 'customerNumber',\n      type: 'text',\n      validate: async (val, { operation }) => {\n        if (operation !== 'create') {\n          // skip validation on update\n          return true\n        }\n        const response = await fetch(`https://your-api.com/customers/${val}`)\n        if (response.ok) {\n          return true\n        }\n\n        return 'The customer number provided does not match any customers within our records.'\n      },\n    },\n  ],\n}\n```\n\nWhen supplying a field `validate` function, Payload will use yours in place of the default. To make use of the default field validation in your custom logic you can import, call and return the result as needed.\n\nFor example:\n\n```ts\nimport { text } from 'payload/fields/validations'\n\nconst field: Field = {\n  name: 'notBad',\n  type: 'text',\n  validate: (val, args) => {\n    if (val === 'bad') {\n      return 'This cannot be \"bad\"'\n    }\n    // highlight-start\n    return text(val, args)\n    // highlight-end\n  },\n}\n```\n\n### Customizable ID\n\nCollections ID fields are generated automatically by default. An explicit `id` field can be declared in the `fields` array to override this behavior.\nUsers are then required to provide a custom ID value when creating a record through the Admin UI or API.\nValid ID types are `number` and `text`.\nWhen using the text value, remember that it shouldn't contain the / (slash) sign, as the API will read it separately and this can result in unexpected behavior.\n\nExample:\n\n```ts\n{\n  fields: [\n    {\n      name: 'id',\n      type: 'number',\n    },\n  ],\n}\n```\n\n### Admin config\n\nIn addition to each field's base configuration, you can define specific traits and properties for fields that only have effect on how they are rendered in the Admin panel. The following properties are available for all fields within the `admin` property:\n\n| Option              | Description                                                                                                                                                                                                                      |\n| ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `condition`         | You can programmatically show / hide fields based on what other fields are doing. [Click here](#conditional-logic) for more info.                                                                                                |\n| `components`        | All field components can be completely and easily swapped out for custom components that you define. [Click here](#custom-components) for more info.                                                                             |\n| `description`       | Helper text to display with the field to provide more information for the editor user. [Click here](#description) for more info.                                                                                                 |\n| `position`          | Specify if the field should be rendered in the sidebar by defining `position: 'sidebar'`.                                                                                                                                        |\n| `width`             | Restrict the width of a field. you can pass any string-based value here, be it pixels, percentages, etc. This property is especially useful when fields are nested within a `Row` type where they can be organized horizontally. |\n| `style`             | Attach raw CSS style properties to the root DOM element of a field.                                                                                                                                                              |\n| `className`         | Attach a CSS class name to the root DOM element of a field.                                                                                                                                                                      |\n| `readOnly`          | Setting a field to `readOnly` has no effect on the API whatsoever but disables the admin component's editability to prevent editors from modifying the field's value.                                                            |\n| `disabled`          | If a field is `disabled`, it is completely omitted from the Admin panel.                                                                                                                                                         |\n| `disableBulkEdit`   | Set `disableBulkEdit` to `true` to prevent fields from appearing in the select options when making edits for multiple documents.                                                                                                 |\n| `disableListColumn` | Set `disableListColumn` to `true` to prevent fields from appearing in the list view column selector.                                                                                                                             |\n| `disableListFilter` | Set `disableListFilter` to `true` to prevent fields from appearing in the list view filter options.                                                                                                                              |\n| `hidden`            | Setting a field's `hidden` property on its `admin` config will transform it into a `hidden` input type. Its value will still submit with the Admin panel's requests, but the field itself will not be visible to editors.        |\n\n### Custom components\n\nAll Payload fields support the ability to swap in your own React components with ease. For more information, including examples, [click here](../admin/components#fields).\n\n### Conditional logic\n\nYou can show and hide fields based on what other fields are doing by utilizing conditional logic on a field by field basis. The `condition` property on a field's admin config accepts a function which takes three arguments:\n\n- `data` - the entire document's data that is currently being edited\n- `siblingData` - only the fields that are direct siblings to the field with the condition\n- `{ user }` - the final argument is an object containing the currently authenticated user\n\nThe `condition` function should return a boolean that will control if the field should be displayed or not.\n\n**Example:**\n\n```ts\n{\n  fields: [\n    {\n      name: 'enableGreeting',\n      type: 'checkbox',\n      defaultValue: false,\n    },\n    {\n      name: 'greeting',\n      type: 'text',\n      admin: {\n        // highlight-start\n        condition: (data, siblingData, { user }) => {\n          if (data.enableGreeting) {\n            return true\n          } else {\n            return false\n          }\n        },\n        // highlight-end\n      },\n    },\n  ]\n}\n```\n\n### Default values\n\nFields can be prefilled with starting values using the `defaultValue` property. This is used in the admin UI and also on the backend as API requests will be populated with missing or undefined field values. You can assign the defaultValue directly in the field configuration or supply a function for dynamic behavior. Values assigned during a create request on the server are added before validation occurs.\n\nFunctions are called with an optional argument object containing:\n\n- `user` - the authenticated user object\n- `locale` - the currently selected locale string\n\nHere is an example of a defaultValue function that uses both:\n\n```ts\nconst translation: {\n  en: 'Written by'\n  es: 'Escrito por'\n}\n\nconst field = {\n  name: 'attribution',\n  type: 'text',\n  // highlight-start\n  defaultValue: ({ user, locale }) => `${translation[locale]} ${user.name}`,\n  // highlight-end\n}\n```\n\n<Banner type=\"success\">\n  You can use async defaultValue functions to fill fields with data from API requests.\n</Banner>\n\n### Description\n\nA description can be configured in three ways.\n\n- As a string\n- As a function which returns a string\n- As a React component\n\nFunctions are called with an optional argument object with the following shape, and React components are rendered with the following props:\n\n- `path` - the path of the field\n- `value` - the current value of the field\n\nAs shown above, you can simply provide a string that will show by the field, but there are use cases where you may want to create some dynamic feedback. By using a function or a component for the `description` property you can provide realtime feedback as the user interacts with the form.\n\n**Function Example:**\n\n```ts\n{\n  fields: [\n    {\n      name: 'message',\n      type: 'text',\n      maxLength: 20,\n      admin: {\n        description: ({ path, value }) =>\n          `${typeof value === 'string' ? 20 - value.length : '20'} characters left (field: ${path})`,\n      },\n    },\n  ]\n}\n```\n\nThis example will display the number of characters allowed as the user types.\n\n**Component Example:**\n\n```ts\n{\n  fields: [\n    {\n      name: 'message',\n      type: 'text',\n      maxLength: 20,\n      admin: {\n        description:\n          ({ path, value }) => (\n            <div>\n              Character count:\n              {' '}\n              { value?.length || 0 }\n               (field: {path})\n            </div>\n          )\n      }\n    }\n  ]\n}\n```\n\nThis component will count the number of characters entered, as well as display the path of the field.\n\n### TypeScript\n\nYou can import the internal Payload `Field` type as well as other common field types as follows:\n\n```ts\nimport type { Field } from 'payload/types'\n```\n",
            "desc": "Fields are the building blocks of Payload, find out how to add or remove a field, change field type, add hooks, define access control and validation.",
            "headings": [
              {
                "id": "field-types",
                "level": 3,
                "text": "Field types"
              },
              {
                "id": "field-level-hooks",
                "level": 3,
                "text": "Field-level hooks"
              },
              {
                "id": "field-level-access-control",
                "level": 3,
                "text": "Field-level access control"
              },
              {
                "id": "field-names",
                "level": 3,
                "text": "Field names"
              },
              {
                "id": "validation",
                "level": 3,
                "text": "Validation"
              },
              {
                "id": "customizable-id",
                "level": 3,
                "text": "Customizable ID"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin config"
              },
              {
                "id": "custom-components",
                "level": 3,
                "text": "Custom components"
              },
              {
                "id": "conditional-logic",
                "level": 3,
                "text": "Conditional logic"
              },
              {
                "id": "default-values",
                "level": 3,
                "text": "Default values"
              },
              {
                "id": "description",
                "level": 3,
                "text": "Description"
              },
              {
                "id": "typescript",
                "level": 3,
                "text": "TypeScript"
              }
            ],
            "keywords": "overview, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Fields Overview"
          },
          {
            "slug": "array",
            "content": "\n<Banner>\n  The Array field type is used when you need to have a set of \"repeating\" fields. It stores an array\n  of objects containing the fields that you define. Its uses can be simple or highly complex.\n</Banner>\n\n<LightDarkImage\nsrcLight=\"https://payloadcms.com/images/docs/fields/array.png\"\nsrcDark=\"https://payloadcms.com/images/docs/fields/array-dark.png\"\nalt=\"Array field with two Rows in Payload admin panel\"\ncaption=\"Admin panel screenshot of an Array field with two Rows\"\n/>\n\n**Example uses:**\n\n- A \"slider\" with an image ([upload field](../fields/upload)) and a caption ([text field](../fields/text))\n- Navigational structures where editors can specify nav items containing\n  pages ([relationship field](../fields/relationship)), an \"open in new tab\" [checkbox field](../fields/checkbox)\n- Event agenda \"timeslots\" where you need to specify start & end time ([date field](../fields/date)),\n  label ([text field](../fields/text)), and Learn More page [relationship](../fields/relationship)\n\n### Config\n\n| Option              | Description                                                                                                                                                                                                                                                                        |\n|---------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`name`** \\*       | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                                                                                                             |\n| **`label`**         | Text used as the heading in the Admin panel or an object with keys for each language. Auto-generated from name if not defined.                                                                                                                                                     |\n| **`fields`** \\*     | Array of field types to correspond to each row of the Array.                                                                                                                                                                                                                       |\n| **`validate`**      | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                                                                                                       |\n| **`minRows`**       | A number for the fewest allowed items during validation when a value is present.                                                                                                                                                                                                   |\n| **`maxRows`**       | A number for the most allowed items during validation when a value is present.                                                                                                                                                                                                     |\n| **`saveToJWT`**     | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                                                                                                      |\n| **`hooks`**         | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                                                                                                         |\n| **`access`**        | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                                                                                                            |\n| **`hidden`**        | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                                                                                                   |\n| **`defaultValue`**  | Provide an array of row data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                                                                               |\n| **`localized`**     | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config. If enabled, a separate, localized set of all data within this Array will be kept, so there is no need to specify each nested field as `localized`. |\n| **`required`**      | Require this field to have a value.                                                                                                                                                                                                                                                |\n| **`labels`**        | Customize the row labels appearing in the Admin dashboard.                                                                                                                                                                                                                         |\n| **`admin`**         | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                                                                                                          |\n| **`custom`**        | Extension point for adding custom data (e.g. for plugins)                                                                                                                                                                                                                          |\n| **`interfaceName`** | Create a top level, reusable [Typescript interface](../typescript/generating-types#custom-field-interfaces) & [GraphQL type](../graphql/graphql-schema#custom-field-schemas).                                                                                                |\n| **`dbName`**        | Custom table name for the field when using SQL database adapter ([Postgres](../database/postgres)). Auto-generated from name if not defined.                                                                                                                                    |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin Config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), you can adjust the following\nproperties:\n\n| Option                    | Description                                                                                                          |\n|---------------------------|----------------------------------------------------------------------------------------------------------------------|\n| **`initCollapsed`**       | Set the initial collapsed state                                                                                      |\n| **`isSortable`**          | Disable array order sorting by setting this value to `false`                                                               |\n| **`components.RowLabel`** | Function or React component to be rendered as the label on the array row. Receives `({ data, index, path })` as args |\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\nimport { RowLabelArgs } from 'payload/dist/admin/components/forms/RowLabel/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'slider', // required\n      type: 'array', // required\n      label: 'Image Slider',\n      minRows: 2,\n      maxRows: 10,\n      interfaceName: 'CardSlider', // optional\n      labels: {\n        singular: 'Slide',\n        plural: 'Slides',\n      },\n      fields: [\n        // required\n        {\n          name: 'title',\n          type: 'text',\n        },\n        {\n          name: 'image',\n          type: 'upload',\n          relationTo: 'media',\n          required: true,\n        },\n        {\n          name: 'caption',\n          type: 'text',\n        },\n      ],\n      admin: {\n        components: {\n          RowLabel: ({ data, index }: RowLabelArgs) => {\n            return data?.title || `Slide ${String(index).padStart(2, '0')}`\n          },\n        },\n      },\n    },\n  ],\n}\n```\n",
            "desc": "Array fields are intended for sets of repeating fields, that you define. Learn how to use array fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "array, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Array",
            "order": 20,
            "title": "Array Field"
          },
          {
            "slug": "blocks",
            "content": "\n<Banner>\n  The Blocks field type is <strong>incredibly powerful</strong> and can be used as a{' '}\n  <em>layout builder</em> as well as to define any other flexible content model you can think of. It\n  stores an array of objects, where each object must match the shape of one of your provided block\n  configs.\n</Banner>\n\n<LightDarkImage\nsrcLight=\"https://payloadcms.com/images/docs/fields/blocks.png\"\nsrcDark=\"https://payloadcms.com/images/docs/fields/blocks-dark.png\"\nalt=\"Admin panel screenshot of add Blocks drawer view\"\ncaption=\"Admin panel screenshot of add Blocks drawer view\"\n/>\n\n**Example uses:**\n\n- A layout builder tool that grants editors to design highly customizable page or post layouts. Blocks could include\n  configs such as `Quote`, `CallToAction`, `Slider`, `Content`, `Gallery`, or others.\n- A form builder tool where available block configs might be `Text`, `Select`, or `Checkbox`.\n- Virtual event agenda \"timeslots\" where a timeslot could either be a `Break`, a `Presentation`, or a `BreakoutSession`.\n\n### Field config\n\n| Option             | Description                                                                                                                                                                                                                                                                        |\n|--------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                                                                                                             |\n| **`label`**        | Text used as the heading in the Admin panel or an object with keys for each language. Auto-generated from name if not defined.                                                                                                                                                     |\n| **`blocks`** \\*    | Array of [block configs](../fields/blocks#block-configs) to be made available to this field.                                                                                                                                                                                    |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                                                                                                       |\n| **`minRows`**      | A number for the fewest allowed items during validation when a value is present.                                                                                                                                                                                                   |\n| **`maxRows`**      | A number for the most allowed items during validation when a value is present.                                                                                                                                                                                                     |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                                                                                                      |\n| **`hooks`**        | Provide field-level hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                                                                                                         |\n| **`access`**       | Provide field-level access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                                                                                                            |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API response or the Admin panel.                                                                                                                          |\n| **`defaultValue`** | Provide an array of block data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                                                                             |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config. If enabled, a separate, localized set of all data within this field will be kept, so there is no need to specify each nested field as `localized`. |\n| **`unique`**       | Enforce that each entry in the Collection has a unique value for this field.                                                                                                                                                                                                       |\n| **`labels`**       | Customize the block row labels appearing in the Admin dashboard.                                                                                                                                                                                                                   |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                                                                                                          |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                                                                                                          |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin Config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), you can adjust the following\nproperties:\n\n| Option              | Description                     |\n|---------------------|---------------------------------|\n| **`initCollapsed`** | Set the initial collapsed state |\n| **`isSortable`** | Disable block order sorting by setting this value to `false` |\n\n### Block configs\n\nBlocks are defined as separate configs of their own.\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  Best practice is to define each block config in its own file, and then import them into your\n  Blocks field as necessary. This way each block config can be easily shared between fields. For\n  instance, using the \"layout builder\" example, you might want to feature a few of the same blocks\n  in a Post collection as well as a Page collection. Abstracting into their own files trivializes\n  their reusability.\n</Banner>\n\n| Option                     | Description                                                                                                                                                                         |\n|----------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`slug`** \\*              | Identifier for this block type. Will be saved on each block as the `blockType` property.                                                                                            |\n| **`fields`** \\*            | Array of fields to be stored in this block.                                                                                                                                         |\n| **`labels`**               | Customize the block labels that appear in the Admin dashboard. Auto-generated from slug if not defined.                                                                             |\n| **`imageURL`**             | Provide a custom image thumbnail to help editors identify this block in the Admin UI.                                                                                               |\n| **`imageAltText`**         | Customize this block's image thumbnail alt text.                                                                                                                                    |\n| **`interfaceName`**        | Create a top level, reusable [Typescript interface](../typescript/generating-types#custom-field-interfaces) & [GraphQL type](../graphql/graphql-schema#custom-field-schemas). |\n| **`graphQL.singularName`** | Text to use for the GraphQL schema name. Auto-generated from slug if not defined. NOTE: this is set for deprecation, prefer `interfaceName`.                                        |\n| **`dbName`**               | Custom table name for this block type when using SQL database adapter ([Postgres](../database/postgres)). Auto-generated from slug if not defined.\n| **`custom`**               | Extension point for adding custom data (e.g. for plugins)                                                                                                                           |\n\n#### Auto-generated data per block\n\nIn addition to the field data that you define on each block, Payload will store two additional properties on each block:\n\n**`blockType`**\n\nThe `blockType` is saved as the slug of the block that has been selected.\n\n**`blockName`**\n\nThe Admin panel provides each block with a `blockName` field which optionally allows editors to label their blocks for\nbetter editability and readability.\n\n### Example\n\n`collections/ExampleCollection.js`\n\n```ts\nimport { Block, CollectionConfig } from 'payload/types'\n\nconst QuoteBlock: Block = {\n  slug: 'Quote', // required\n  imageURL: 'https://google.com/path/to/image.jpg',\n  imageAltText: 'A nice thumbnail image to show what this block looks like',\n  interfaceName: 'QuoteBlock', // optional\n  fields: [\n    // required\n    {\n      name: 'quoteHeader',\n      type: 'text',\n      required: true,\n    },\n    {\n      name: 'quoteText',\n      type: 'text',\n    },\n  ],\n}\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'layout', // required\n      type: 'blocks', // required\n      minRows: 1,\n      maxRows: 20,\n      blocks: [\n        // required\n        QuoteBlock,\n      ],\n    },\n  ],\n}\n```\n\n### TypeScript\n\nAs you build your own Block configs, you might want to store them in separate files but retain typing accordingly. To do\nso, you can import and use Payload's `Block` type:\n\n```ts\nimport type { Block } from 'payload/types'\n```\n",
            "desc": "The Blocks field type is a great layout build and can be used to construct any flexible content model. Learn how to use Block fields, see examples and options.",
            "headings": [
              {
                "id": "field-config",
                "level": 3,
                "text": "Field config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin Config"
              },
              {
                "id": "block-configs",
                "level": 3,
                "text": "Block configs"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              },
              {
                "id": "typescript",
                "level": 3,
                "text": "TypeScript"
              }
            ],
            "keywords": "blocks, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Blocks",
            "order": 30,
            "title": "Blocks Field"
          },
          {
            "slug": "checkbox",
            "content": "\n<Banner>The Checkbox field type saves a boolean in the database.</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/checkbox.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/checkbox-dark.png\"\n  alt=\"Checkbox field with text field in Payload admin panel\"\n  caption=\"Admin panel screenshot of Checkbox field with Text field below\"\n/>\n\n### Config\n\n| Option             | Description                                                                                                                                                                                         |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                              |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                                             |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                        |\n| **`index`**        | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                       |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                          |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                             |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                    |\n| **`defaultValue`** | Provide data to be used for this field's default value, will default to false if field is also `required`. [More](../fields/overview#default-values)                                             |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                                                     |\n| **`required`**     | Require this field to have a value.                                                                                                                                                                 |\n| **`admin`**        | Admin-specific configuration. See the [default field admin config](../fields/overview#admin-config) for more details.                                                                            |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                           |\n\n_\\* An asterisk denotes that a property is required._\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'enableCoolStuff', // required\n      type: 'checkbox', // required\n      label: 'Click me to see fanciness',\n      defaultValue: false,\n    },\n  ],\n}\n```\n",
            "desc": "Checkbox field types allow the developer to save a boolean value in the database. Learn how to use Checkbox fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "checkbox, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Checkbox",
            "order": 40,
            "title": "Checkbox Field"
          },
          {
            "slug": "code",
            "content": "\n<Banner>\n  The Code field type saves a string in the database, but provides the Admin panel with a code\n  editor styled interface.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/code.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/code-dark.png\"\n  alt=\"Shows a Code field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Code field\"\n/>\n\nThis field uses the `monaco-react` editor syntax highlighting.\n\n### Config\n\n| Option             | Description                                                                                                                                                                                         |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                              |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                                             |\n| **`unique`**       | Enforce that each entry in the Collection has a unique value for this field.                                                                                                                        |\n| **`index`**        | Build an [index](../database#overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`minLength`**    | Used by the default validation function to ensure values are of a minimum character length.                                                                                                         |\n| **`maxLength`**    | Used by the default validation function to ensure values are of a maximum character length.                                                                                                         |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                        |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                       |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                          |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                             |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                    |\n| **`defaultValue`** | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                                                     |\n| **`required`**     | Require this field to have a value.                                                                                                                                                                 |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                           |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                           |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin Config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), you can adjust the following properties:\n\n| Option              | Description                                                                                                                                                                     |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`language`**      | This property can be set to any language listed [here](https://github.com/microsoft/monaco-editor/tree/main/src/basic-languages).                                               |\n| **`editorOptions`** | Options that can be passed to the monaco editor, [view the full list](https://microsoft.github.io/monaco-editor/typedoc/interfaces/editor.IDiffEditorConstructionOptions.html). |\n\n### Example\n\n`collections/ExampleCollection.ts\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'trackingCode', // required\n      type: 'code', // required\n      required: true,\n      admin: {\n        language: 'javascript',\n      },\n    },\n  ],\n}\n```\n",
            "desc": "The Code field type will store any string in the Database. Learn how to use Code fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "code, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Code",
            "order": 50,
            "title": "Code Field"
          },
          {
            "slug": "json",
            "content": "\n<Banner>\n  The JSON field type saves actual JSON in the database, which differs from the Code field that\n  saves the value as a string in the database.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/json.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/json-dark.png\"\n  alt=\"Shows a JSON field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a JSON field\"\n/>\n\nThis field uses the `monaco-react` editor syntax highlighting.\n\n### Config\n\n| Option             | Description                                                                                                                                                                                         |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                              |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                                             |\n| **`unique`**       | Enforce that each entry in the Collection has a unique value for this field.                                                                                                                        |\n| **`index`**        | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                        |\n| **`jsonSchema`**   | Provide a JSON schema that will be used for validation. [JSON schemas](https://json-schema.org/learn/getting-started-step-by-step)                                                                  |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                       |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                          |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                             |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                    |\n| **`defaultValue`** | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                                                     |\n| **`required`**     | Require this field to have a value.                                                                                                                                                                 |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                           |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                           |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin Config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), you can adjust the following properties:\n\n| Option              | Description                                                                                                                                                                        |\n| ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`editorOptions`** | Options that can be passed to the monaco editor, [view the full list](https://microsoft.github.io/monaco-editor/typedoc/variables/editor.EditorOptions.html). |\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'customerJSON', // required\n      type: 'json', // required\n      required: true,\n    },\n  ],\n}\n```\n\n### JSON Schema Validation\n\nPayload JSON fields fully support the [JSON schema](https://json-schema.org/) standard. By providing a schema in your field config, the editor will be guided in the admin UI, getting typeahead for properties and their formats automatically. When the document is saved, the default validation will prevent saving any invalid data in the field according to the schema in your config.\n\nIf you only provide a URL to a schema, Payload will fetch the desired schema if it is publicly available. If not, it is recommended to add the schema directly to your config or import it from another file so that it can be implemented consistently in your project.\n\n\n#### Local JSON Schema\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'customerJSON', // required\n      type: 'json', // required\n      jsonSchema: {\n        uri: 'a://b/foo.json', // required\n        fileMatch: ['a://b/foo.json'], // required\n        schema: {\n          type: 'object',\n          properties: {\n            foo: {\n              enum: ['bar', 'foobar'],\n            }\n          },\n        },\n      },\n\n    },\n  ],\n}\n// {\"foo\": \"bar\"} or {\"foo\": \"foobar\"} - ok\n// Attempting to create {\"foo\": \"not-bar\"} will throw an error\n```\n\n#### Remote JSON Schema\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'customerJSON', // required\n      type: 'json', // required\n      jsonSchema: {\n        uri: 'https://example.com/customer.schema.json', // required\n        fileMatch: ['https://example.com/customer.schema.json'], // required\n      },\n    },\n  ],\n}\n// If 'https://example.com/customer.schema.json' has a JSON schema\n// {\"foo\": \"bar\"} or {\"foo\": \"foobar\"} - ok\n// Attempting to create {\"foo\": \"not-bar\"} will throw an error\n```\n",
            "desc": "The JSON field type will store any string in the Database. Learn how to use JSON fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              },
              {
                "id": "json-schema-validation",
                "level": 3,
                "text": "JSON Schema Validation"
              }
            ],
            "keywords": "json, jsonSchema, schema, validation, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "JSON",
            "order": 50,
            "title": "JSON Field"
          },
          {
            "slug": "collapsible",
            "content": "\n<Banner>\n  The Collapsible field is presentational-only and only affects the Admin panel. By using it, you\n  can place fields within a nice layout component that can be collapsed / expanded.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/collapsible.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/collapsible-dark.png\"\n  alt=\"Shows a Collapsible field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Collapsible field\"\n/>\n\n### Config\n\n| Option          | Description                                                                                                                                                                  |\n| --------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`label`** \\*  | A label to render within the header of the collapsible component. This can be a string, function or react component. Function/components receive `({ data, path })` as args. |\n| **`fields`** \\* | Array of field types to nest within this Collapsible.                                                                                                                        |\n| **`admin`**     | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                    |\n| **`custom`**    | Extension point for adding custom data (e.g. for plugins)                                                                                                                    |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin Config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), you can adjust the following properties:\n\n| Option              | Description                     |\n| ------------------- | ------------------------------- |\n| **`initCollapsed`** | Set the initial collapsed state |\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      label: ({ data }) => data?.title || 'Untitled',\n      type: 'collapsible', // required\n      fields: [\n        // required\n        {\n          name: 'title',\n          type: 'text',\n          required: true,\n        },\n        {\n          name: 'someTextField',\n          type: 'text',\n          required: true,\n        },\n      ],\n    },\n  ],\n}\n```\n",
            "desc": "With the Collapsible field, you can place fields within a collapsible layout component that can be collapsed / expanded.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "row, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Collapsible",
            "order": 60,
            "title": "Collapsible Field"
          },
          {
            "slug": "date",
            "content": "\n<Banner>\n  The Date field type saves a Date in the database and provides the Admin panel with a customizable\n  time picker interface.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/date.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/date-dark.png\"\n  alt=\"Shows a Date field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Date field\"\n/>\n\nThis field uses [`react-datepicker`](https://www.npmjs.com/package/react-datepicker) for the Admin panel component.\n\n### Config\n\n| Option             | Description                                                                                                                                                                                         |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                              |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                                             |\n| **`index`**        | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                        |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                       |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                          |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                             |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                    |\n| **`defaultValue`** | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                                                     |\n| **`required`**     | Require this field to have a value.                                                                                                                                                                 |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                           |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                           |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin Config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), you can customize the following fields that will adjust how the component displays in the admin panel via the `date` property.\n\n| Property                       | Description                                                                                 |\n| ------------------------------ | ------------------------------------------------------------------------------------------- |\n| **`placeholder`**              | Placeholder text for the field.                                                             |\n| **`date`**                     | Pass options to customize date field appearance.                                            |\n| **`date.displayFormat`**       | Format date to be shown in field **cell**.                                                  |\n| **`date.pickerAppearance`** \\* | Determines the appearance of the datepicker: `dayAndTime` `timeOnly` `dayOnly` `monthOnly`. |\n| **`date.monthsToShow`** \\*     | Number of months to display max is 2. Defaults to 1.                                        |\n| **`date.minDate`** \\*          | Min date value to allow.                                                                    |\n| **`date.maxDate`** \\*          | Max date value to allow.                                                                    |\n| **`date.minTime`** \\*          | Min time value to allow.                                                                    |\n| **`date.maxTime`** \\*          | Max date value to allow.                                                                    |\n| **`date.overrides`** \\*        | Pass any valid props directly to the [react-datepicker](https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md)     |\n| **`date.timeIntervals`** \\*    | Time intervals to display. Defaults to 30 minutes.                                          |\n| **`date.timeFormat`** \\*       | Determines time format. Defaults to `'h:mm aa'`.                                            |\n\n_\\* This property is passed directly to [react-datepicker](https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md). ._\n\n#### Display Format and Picker Appearance\n\nThese properties only affect how the date is displayed in the UI. The full date is always stored in the format `YYYY-MM-DDTHH:mm:ss.SSSZ` (e.g. `1999-01-01T8:00:00.000+05:00`).\n\n`displayFormat` determines how the date is presented in the field **cell**, you can pass any valid (unicode date format)[https://date-fns.org/v2.29.3/docs/format].\n\n`pickerAppearance` sets the appearance of the **react datepicker**, the options available are `dayAndTime`, `dayOnly`, `timeOnly`, and `monthOnly`. By default, the datepicker will display `dayOnly`.\n\nWhen only `pickerAppearance` is set, an equivalent format will be rendered in the date field cell. To overwrite this format, set `displayFormat`.\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'dateOnly',\n      type: 'date',\n      admin: {\n        date: {\n          pickerAppearance: 'dayOnly',\n          displayFormat: 'd MMM yyy',\n        },\n      },\n    },\n    {\n      name: 'timeOnly',\n      type: 'date',\n      admin: {\n        date: {\n          pickerAppearance: 'timeOnly',\n          displayFormat: 'h:mm:ss a',\n        },\n      },\n    },\n    {\n      name: 'monthOnly',\n      type: 'date',\n      admin: {\n        date: {\n          pickerAppearance: 'monthOnly',\n          displayFormat: 'MMMM yyyy',\n        },\n      },\n    },\n  ],\n}\n```\n",
            "desc": "The Date field type stores a Date in the database. Learn how to use and customize the Date field, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "date, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Date",
            "order": 70,
            "title": "Date Field"
          },
          {
            "slug": "email",
            "content": "\n<Banner>The Email field enforces that the value provided is a valid email address.</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/email.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/email-dark.png\"\n  alt=\"Shows an Email field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of an Email field\"\n/>\n\n### Config\n\n| Option             | Description                                                                                                                                                                                         |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                              |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                                             |\n| **`unique`**       | Enforce that each entry in the Collection has a unique value for this field.                                                                                                                        |\n| **`index`**        | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                        |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                       |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                          |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                             |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                    |\n| **`defaultValue`** | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                                                     |\n| **`required`**     | Require this field to have a value.                                                                                                                                                                 |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                           |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                           |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), this field type allows for the following `admin` properties:\n\n**`placeholder`**\n\nSet this property to define a placeholder string for the field.\n\n**`autoComplete`**\n\nSet this property to a string that will be used for browser autocomplete.\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'contact', // required\n      type: 'email', // required\n      label: 'Contact Email Address',\n      required: true,\n    },\n  ],\n}\n```\n",
            "desc": "The Email field enforces that the value provided is a valid email address. Learn how to use Email fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "email, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Email",
            "order": 80,
            "title": "Email Field"
          },
          {
            "slug": "group",
            "content": "\n<Banner>\n  The Group field allows fields to be nested under a common property name. It also groups fields\n  together visually in the Admin panel.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/group.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/group-dark.png\"\n  alt=\"Shows a Group field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Group field\"\n/>\n\n### Config\n\n| Option              | Description                                                                                                                                                                                                                                                                        |\n| ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*       | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                                                                                                             |\n| **`fields`** \\*     | Array of field types to nest within this Group.                                                                                                                                                                                                                                    |\n| **`label`**         | Used as a heading in the Admin panel and to name the generated GraphQL type.                                                                                                                                                                                                       |\n| **`validate`**      | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                                                                                                       |\n| **`saveToJWT`**     | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                                                                                                      |\n| **`hooks`**         | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                                                                                                         |\n| **`access`**        | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                                                                                                            |\n| **`hidden`**        | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                                                                                                   |\n| **`defaultValue`**  | Provide an object of data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                                                                                  |\n| **`localized`**     | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config. If enabled, a separate, localized set of all data within this Group will be kept, so there is no need to specify each nested field as `localized`. |\n| **`admin`**         | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                                                                                                          |\n| **`custom`**        | Extension point for adding custom data (e.g. for plugins)                                                                                                                                                                                                                          |\n| **`interfaceName`** | Create a top level, reusable [Typescript interface](../typescript/generating-types#custom-field-interfaces) & [GraphQL type](../graphql/graphql-schema#custom-field-schemas).                                                                                                |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), the Group allows for the following admin property:\n\n**`hideGutter`**\n\nSet this property to `true` to hide this field's gutter within the admin panel. The field gutter is rendered as a vertical line and padding, but often if this field is nested within a Group, Block, or Array, you may want to hide the gutter.\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'pageMeta', // required\n      type: 'group', // required\n      interfaceName: 'Meta', // optional\n      fields: [\n        // required\n        {\n          name: 'title',\n          type: 'text',\n          required: true,\n          minLength: 20,\n          maxLength: 100,\n        },\n        {\n          name: 'description',\n          type: 'textarea',\n          required: true,\n          minLength: 40,\n          maxLength: 160,\n        },\n      ],\n    },\n  ],\n}\n```\n",
            "desc": "The Group field allows other fields to be nested under a common property. Learn how to use Group fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "group, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Group",
            "order": 90,
            "title": "Group Field"
          },
          {
            "slug": "number",
            "content": "\n<Banner>\n  The Number field stores and validates numeric entry and supports additional numerical validation\n  and formatting features.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/number.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/number-dark.png\"\n  alt=\"Shows a Number field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Number field\"\n/>\n\n### Config\n\n| Option             | Description                                                                                                                                                                                         |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                              |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                                             |\n| **`min`**          | Minimum value accepted. Used in the default `validation` function.                                                                                                                                  |\n| **`max`**          | Maximum value accepted. Used in the default `validation` function.                                                                                                                                  |\n| **`hasMany`**      | Makes this field an ordered array of numbers instead of just a single number.                                                                                                                       |\n| **`minRows`**      | Minimum number of numbers in the numbers array, if `hasMany` is set to true.                                                                                                                        |\n| **`maxRows`**      | Maximum number of numbers in the numbers array, if `hasMany` is set to true.                                                                                                                        |\n| **`unique`**       | Enforce that each entry in the Collection has a unique value for this field.                                                                                                                        |\n| **`index`**        | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                        |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                       |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                          |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                             |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                    |\n| **`defaultValue`** | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                                                     |\n| **`required`**     | Require this field to have a value.                                                                                                                                                                 |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                           |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                           |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), this field type allows for the following `admin` properties:\n\n**`step`**\n\nSet a value for the number field to increment / decrement using browser controls.\n\n**`placeholder`**\n\nSet this property to define a placeholder string for the field.\n\n**`autoComplete`**\n\nSet this property to a string that will be used for browser autocomplete.\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'age', // required\n      type: 'number', // required\n      required: true,\n      admin: {\n        step: 1,\n      },\n    },\n  ],\n}\n```\n",
            "desc": "Number fields store and validate numeric data. Learn how to use and format Number fields, see examples and Number field options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "number, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Number",
            "order": 100,
            "title": "Number Field"
          },
          {
            "slug": "point",
            "content": "\n<Banner>\n  The Point field type saves a pair of coordinates in the database and assigns an index for location\n  related queries.\n</Banner>\n\n<Banner type=\"warning\">\n  <strong>Note:</strong> The Point field type is currently only supported in MongoDB.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/point.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/point-dark.png\"\n  alt=\"Shows a Point field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Point field\"\n/>\n\nThe data structure in the database matches the GeoJSON structure to represent point. The Payload APIs simplifies the object data to only the [longitude, latitude] location.\n\n### Config\n\n| Option             | Description                                                                                                                                                                                                       |\n| ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                                            |\n| **`label`**        | Used as a field label in the Admin panel and to name the generated GraphQL type.                                                                                                                                  |\n| **`unique`**       | Enforce that each entry in the Collection has a unique value for this field.                                                                                                                                      |\n| **`index`**        | Build an [index](../database/overview) for this field to produce faster queries. To support location queries, point index defaults to `2dsphere`, to disable the index set to `false`. |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                                      |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                                     |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                                        |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                                           |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                                  |\n| **`defaultValue`** | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                              |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                                                                   |\n| **`required`**     | Require this field to have a value.                                                                                                                                                                               |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                                         |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                                         |\n\n_\\* An asterisk denotes that a property is required._\n\n<Banner type=\"warning\">\n  <strong>Note:</strong> The Point field type is currently only supported in MongoDB.\n</Banner>\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'location',\n      type: 'point',\n      label: 'Location',\n    },\n  ],\n}\n```\n\n### Querying\n\nIn order to do query based on the distance to another point, you can use the `near` operator. When querying using the near operator, the returned documents will be sorted by nearest first.\n",
            "desc": "The Point field type stores coordinates in the database. Learn how to use Point field for geolocation and geometry.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              },
              {
                "id": "querying",
                "level": 3,
                "text": "Querying"
              }
            ],
            "keywords": "point, geolocation, geospatial, geojson, 2dsphere, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Point",
            "order": 110,
            "title": "Point Field"
          },
          {
            "slug": "radio",
            "content": "\n<Banner>\n  The Radio Group field type allows for the selection of one value from a predefined set of possible\n  values and presents a radio group-style set of inputs to the Admin panel.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/radio.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/radio-dark.png\"\n  alt=\"Shows a Radio field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Radio field\"\n/>\n\n### Config\n\n| Option             | Description                                                                                                                                                                                         |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                              |\n| **`options`** \\*   | Array of options to allow the field to store. Can either be an array of strings, or an array of objects containing an `label` string and a `value` string.                                          |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                                             |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                        |\n| **`index`**        | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                       |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                          |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                             |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                    |\n| **`defaultValue`** | Provide data to be used for this field's default value. The default value must exist within provided values in `options`. [More](../fields/overview#default-values)                              |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                                                     |\n| **`required`**     | Require this field to have a value.                                                                                                                                                                 |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                           |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                           |\n| **`enumName`**     | Custom enum name for this field when using SQL database adapter ([Postgres](../database/postgres)). Auto-generated from name if not defined.\n\n_\\* An asterisk denotes that a property is required._\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  Option values should be strings that do not contain hyphens or special characters due to GraphQL\n  enumeration naming constraints. Underscores are allowed. If you determine you need your option\n  values to be non-strings or contain special characters, they will be formatted accordingly before\n  being used as a GraphQL enum.\n</Banner>\n\n### Admin config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), the Radio Group field type allows for the specification of the following `admin` properties:\n\n**`layout`**\n\nThe `layout` property allows for the radio group to be styled as a horizonally or vertically distributed list. The default value is `horizontal`.\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'color', // required\n      type: 'radio', // required\n      options: [\n        // required\n        {\n          label: 'Mint',\n          value: 'mint',\n        },\n        {\n          label: 'Dark Gray',\n          value: 'dark_gray',\n        },\n      ],\n      defaultValue: 'mint', // The first value in options.\n      admin: {\n        layout: 'horizontal',\n      },\n    },\n  ],\n}\n```\n",
            "desc": "The Radio field type allows for the selection of one value from a predefined set of possible values. Learn how to use Radio fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "radio, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Radio Group",
            "order": 120,
            "title": "Radio Group Field"
          },
          {
            "slug": "relationship",
            "content": "\n<Banner>\n  The Relationship field is one of the most powerful fields Payload features. It provides for the\n  ability to easily relate documents together.\n</Banner>\n\n<LightDarkImage\nsrcLight=\"https://payloadcms.com/images/docs/fields/relationship.png\"\nsrcDark=\"https://payloadcms.com/images/docs/fields/relationship-dark.png\"\nalt=\"Shows a relationship field in the Payload admin panel\"\ncaption=\"Admin panel screenshot of a Relationship field\"\n/>\n\n**Example uses:**\n\n- To add `Product` documents to an `Order` document\n- To allow for an `Order` to feature a `placedBy` relationship to either an `Organization` or `User` collection\n- To assign `Category` documents to `Post` documents\n\n### Config\n\n| Option              | Description                                                                                                                                                                   |\n|---------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`name`** \\*       | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                        |\n| **`relationTo`** \\* | Provide one or many collection `slug`s to be able to assign relationships to.                                                                                                 |\n| **`filterOptions`** | A query to filter which options appear in the UI and validate against. [More](#filtering-relationship-options).                                                               |\n| **`hasMany`**       | Boolean when, if set to `true`, allows this field to have many relations instead of only one.                                                                                 |\n| **`minRows`**       | A number for the fewest allowed items during validation when a value is present. Used with `hasMany`.                                                                         |\n| **`maxRows`**       | A number for the most allowed items during validation when a value is present. Used with `hasMany`.                                                                           |\n| **`maxDepth`**      | Sets a number limit on iterations of related documents to populate when queried. [Depth](../getting-started/concepts#depth)                                                |\n| **`label`**         | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                       |\n| **`unique`**        | Enforce that each entry in the Collection has a unique value for this field.                                                                                                  |\n| **`validate`**      | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                  |\n| **`index`**         | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`saveToJWT`**     | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                 |\n| **`hooks`**         | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                    |\n| **`access`**        | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                       |\n| **`hidden`**        | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                              |\n| **`defaultValue`**  | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                          |\n| **`localized`**     | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                               |\n| **`required`**      | Require this field to have a value.                                                                                                                                           |\n| **`admin`**         | Admin-specific configuration. See the [default field admin config](../fields/overview#admin-config) for more details.                                                      |\n| **`custom`**        | Extension point for adding custom data (e.g. for plugins)                                                                                                                     |\n\n_\\* An asterisk denotes that a property is required._\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  The [Depth](../getting-started/concepts#depth) parameter can be used to automatically populate\n  related documents that are returned by the API.\n</Banner>\n\n### Admin config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), the Relationship field type also\nallows for the following admin-specific properties:\n\n**`isSortable`**\n\nSet to `true` if you'd like this field to be sortable within the Admin UI using drag and drop (only works when `hasMany`\nis set to `true`).\n\n**`allowCreate`**\n\nSet to `false` if you'd like to disable the ability to create new documents from within the relationship field (hides\nthe \"Add new\" button in the admin UI).\n\n**`sortOptions`**\n\nThe `sortOptions` property allows you to define a default sorting order for the options within a Relationship field's\ndropdown. This can be particularly useful for ensuring that the most relevant options are presented first to the user.\n\nYou can specify `sortOptions` in two ways:\n\n**As a string:**\n\nProvide a string to define a global default sort field for all relationship field dropdowns across different\ncollections. You can prefix the field name with a minus symbol (\"-\") to sort in descending order.\n\nExample:\n\n```ts\nsortOptions: 'fieldName',\n```\n\nThis configuration will sort all relationship field dropdowns by `\"fieldName\"` in ascending order.\n\n**As an object :**\n\nSpecify an object where keys are collection slugs and values are strings representing the field names to sort by. This\nallows for different sorting fields for each collection's relationship dropdown.\n\nExample:\n\n```ts\nsortOptions: {\n  \"pages\"\n:\n  \"fieldName1\",\n    \"posts\"\n:\n  \"-fieldName2\",\n    \"categories\"\n:\n  \"fieldName3\"\n}\n```\n\nIn this configuration:\n\n- Dropdowns related to `pages` will be sorted by `\"fieldName1\"` in ascending order.\n- Dropdowns for `posts` will use `\"fieldName2\"` for sorting in descending order (noted by the \"-\" prefix).\n- Dropdowns associated with `categories` will sort based on `\"fieldName3\"` in ascending order.\n\nNote: If `sortOptions` is not defined, the default sorting behavior of the Relationship field dropdown will be used.\n\n### Filtering relationship options\n\nOptions can be dynamically limited by supplying a [query constraint](../queries/overview), which will be used both\nfor validating input and filtering available relationships in the UI.\n\nThe `filterOptions` property can either be a `Where` query, or a function returning `true` to not filter, `false` to\nprevent all, or a `Where` query. When using a function, it will be\ncalled with an argument object with the following properties:\n\n| Property      | Description                                                                          |\n|---------------|--------------------------------------------------------------------------------------|\n| `relationTo`  | The `relationTo` to filter against (as defined on the field)                         |\n| `data`        | An object of the full collection or global document currently being edited           |\n| `siblingData` | An object of the document data limited to fields within the same parent to the field |\n| `id`          | The value of the collection `id`, will be `undefined` on create request              |\n| `user`        | The currently authenticated user object                                              |\n\n### Example\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'purchase',\n      type: 'relationship',\n      relationTo: ['products', 'services'],\n      filterOptions: ({ relationTo, siblingData }) => {\n        // returns a Where query dynamically by the type of relationship\n        if (relationTo === 'products') {\n          return {\n            stock: { greater_than: siblingData.quantity },\n          }\n        }\n\n        if (relationTo === 'services') {\n          return {\n            isAvailable: { equals: true },\n          }\n        }\n      },\n    },\n  ],\n}\n```\n\nYou can learn more about writing queries [here](../queries/overview).\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  When a relationship field has both <strong>filterOptions</strong> and a custom{' '}\n  <strong>validate</strong> function, the api will not validate <strong>filterOptions</strong>{' '}\n  unless you call the default relationship field validation function imported from{' '}\n  <strong>payload/fields/validations</strong> in your validate function.\n</Banner>\n\n### How the data is saved\n\nGiven the variety of options possible within the `relationship` field type, the shape of the data needed for creating\nand updating these fields can vary. The following sections will describe the variety of data shapes that can arise from\nthis field.\n\n#### Has One\n\nThe most simple pattern of a relationship is to use `hasMany: false` with a `relationTo` that allows for only one type\nof collection.\n\n```ts\n{\n  slug: 'example-collection',\n    fields\n:\n  [\n    {\n      name: 'owner', // required\n      type: 'relationship', // required\n      relationTo: 'users', // required\n      hasMany: false,\n    }\n  ]\n}\n```\n\nThe shape of the data to save for a document with the field configured this way would be:\n\n```json\n{\n  // ObjectID of the related user\n  \"owner\": \"6031ac9e1289176380734024\"\n}\n```\n\nWhen querying documents in this collection via REST API, you could query as follows:\n\n`?where[owner][equals]=6031ac9e1289176380734024`.\n\n#### Has One - Polymorphic\n\nAlso known as **dynamic references**, in this configuration, the `relationTo` field is an array of Collection slugs that\ntells Payload which Collections are valid to reference.\n\n```ts\n{\n  slug: 'example-collection',\n    fields\n:\n  [\n    {\n      name: 'owner', // required\n      type: 'relationship', // required\n      relationTo: ['users', 'organizations'], // required\n      hasMany: false,\n    }\n  ]\n}\n```\n\nThe shape of the data to save for a document with more than one relationship type would be:\n\n```json\n{\n  \"owner\": {\n    \"relationTo\": \"organizations\",\n    \"value\": \"6031ac9e1289176380734024\"\n  }\n}\n```\n\nHere is an example for how to query documents by this data (note the difference in referencing the `owner.value`):\n\n`?where[owner.value][equals]=6031ac9e1289176380734024`.\n\nYou can also query for documents where a field has a relationship to a specific Collection:\n\n`?where[owners.relationTo][equals]=organizations`.\n\nThis query would return only documents that have an owner relationship to organizations.\n\n#### Has Many\n\nThe `hasMany` tells Payload that there may be more than one collection saved to the field.\n\n```ts\n{\n  slug: 'example-collection',\n    fields\n:\n  [\n    {\n      name: 'owners', // required\n      type: 'relationship', // required\n      relationTo: 'users', // required\n      hasMany: true,\n    }\n  ]\n}\n```\n\nTo save the to `hasMany` relationship field we need to send an array of IDs:\n\n```json\n{\n  \"owners\": [\n    \"6031ac9e1289176380734024\",\n    \"602c3c327b811235943ee12b\"\n  ]\n}\n```\n\nWhen querying documents, the format does not change for arrays:\n\n`?where[owners][equals]=6031ac9e1289176380734024`.\n\n#### Has Many - Polymorphic\n\n```ts\n{\n  slug: 'example-collection',\n    fields\n:\n  [\n    {\n      name: 'owners', // required\n      type: 'relationship', // required\n      relationTo: ['users', 'organizations'], // required\n      hasMany: true,\n      required: true,\n    }\n  ]\n}\n```\n\nRelationship fields with `hasMany` set to more than one kind of collections save their data as an array of objects—each\ncontaining the Collection `slug` as the `relationTo` value, and the related document `id` for the `value`:\n\n```json\n{\n  \"owners\": [\n    {\n      \"relationTo\": \"users\",\n      \"value\": \"6031ac9e1289176380734024\"\n    },\n    {\n      \"relationTo\": \"organizations\",\n      \"value\": \"602c3c327b811235943ee12b\"\n    }\n  ]\n}\n```\n\nQuerying is done in the same way as the earlier Polymorphic example:\n\n`?where[owners.value][equals]=6031ac9e1289176380734024`.\n\n#### Querying and Filtering Polymorphic Relationships\n\nPolymorphic and non-polymorphic relationships must be queried differently because of how the related data is stored and\nmay be inconsistent across different collections. Because of this, filtering polymorphic relationship fields from the\nCollection List admin UI is limited to the `id` value.\n\nFor a polymorphic relationship, the response will always be an array of objects. Each object will contain\nthe `relationTo` and `value` properties.\n\nThe data can be queried by the related document ID:\n\n`?where[field.value][equals]=6031ac9e1289176380734024`.\n\nOr by the related document Collection slug:\n\n`?where[field.relationTo][equals]=your-collection-slug`.\n\nHowever, you **cannot** query on any field values within the related document.\nSince we are referencing multiple collections, the field you are querying on may not exist and break the query.\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  You <strong>cannot</strong> query on a field within a polymorphic relationship as you would with a non-polymorphic relationship.\n</Banner>\n",
            "desc": "The Relationship field provides the ability to relate documents together. Learn how to use Relationship fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin config"
              },
              {
                "id": "filtering-relationship-options",
                "level": 3,
                "text": "Filtering relationship options"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              },
              {
                "id": "how-the-data-is-saved",
                "level": 3,
                "text": "How the data is saved"
              }
            ],
            "keywords": "relationship, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Relationship",
            "order": 130,
            "title": "Relationship Field"
          },
          {
            "slug": "rich-text",
            "content": "\n<Banner>\n  The Rich Text field is a powerful way to allow editors to write dynamic content. The content is\n  saved as JSON in the database and can be converted into any format, including HTML, that you need.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/richtext.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/richtext-dark.png\"\n  alt=\"Shows a Rich Text field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Rich Text field\"\n/>\n\nPayload's rich text field is built on an \"adapter pattern\" which lets you specify which rich text editor you'd like to use. \n\nRight now, Payload is officially supporting two rich text editors:\n\n1. [SlateJS](../rich-text/slate) - stable, backwards-compatible with 1.0\n2. [Lexical](../rich-text/lexical) - beta, where things will be moving\n\n<Banner type=\"success\">\n  <strong>Consistent with Payload's goal of making you learn as little of Payload as possible, customizing and using the Rich Text Editor does not involve learning how to develop for a <em>Payload</em> rich text editor.</strong> Instead, you can invest your time and effort into learning the underlying open-source tools that will allow you to apply your learnings elsewhere as well.\n</Banner>\n\n### Config\n\n| Option             | Description                                                                                                                                             |\n| ------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                  |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                 |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)            |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.           |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                              |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control) |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.        |\n| **`defaultValue`** | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                    |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                         |\n| **`required`**     | Require this field to have a value.                                                                                                                     |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                               |\n| **`editor`**       | Override the rich text editor specified in your base configuration for this field.                                                                      |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                               |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), the Rich Text editor allows for the following admin properties:\n\n**`placeholder`**\n\nSet this property to define a placeholder string in the text input.\n\n**`hideGutter`**\n\nSet this property to `true` to hide this field's gutter within the admin panel. The field gutter is rendered as a vertical line and padding, but often if this field is nested within a Group, Block, or Array, you may want to hide the gutter.\n\n**`rtl`**\n\nOverride the default text direction of the Admin panel for this field. Set to `true` to force right-to-left text direction.\n\n### Editor-specific options\n\nFor a ton more editor-specific options, including how to build custom rich text elements directly into your editor, take a look at either the [Slate docs](../rich-text/slate) or the [Lexical docs](../rich-text/lexical) depending on which editor you're using.",
            "desc": "The Rich Text field allows dynamic content to be written through the Admin Panel. Learn how to use Rich Text fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin config"
              },
              {
                "id": "editor-specific-options",
                "level": 3,
                "text": "Editor-specific options"
              }
            ],
            "keywords": "rich text, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Rich Text",
            "order": 140,
            "title": "Rich Text Field"
          },
          {
            "slug": "row",
            "content": "\n<Banner>\n  The Row field is presentational-only and only affects the Admin panel. By using it, you can\n  arrange fields next to each other horizontally.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/row.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/row-dark.png\"\n  alt=\"Shows a row field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Row field\"\n/>\n\n### Config\n\n| Option          | Description                                                                                                                                                                |\n| --------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`fields`** \\* | Array of field types to nest within this Row.                                                                                                                              |\n| **`admin`**     | Admin-specific configuration excluding `description`, `readOnly`, and `hidden`. See the [default field admin config](../fields/overview#admin-config) for more details. |\n| **`custom`**    | Extension point for adding custom data (e.g. for plugins)                                                                                                                  |\n\n_\\* An asterisk denotes that a property is required._\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      type: 'row', // required\n      fields: [\n        // required\n        {\n          name: 'label',\n          type: 'text',\n          required: true,\n          admin: {\n            width: '50%',\n          },\n        },\n        {\n          name: 'value',\n          type: 'text',\n          required: true,\n          admin: {\n            width: '50%',\n          },\n        },\n      ],\n    },\n  ],\n}\n```\n",
            "desc": "With the Row field you can arrange fields next to each other in the Admin Panel to help you customize your Dashboard.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "row, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Row",
            "order": 150,
            "title": "Row Field"
          },
          {
            "slug": "select",
            "content": "\n<Banner>\n  The Select field provides a dropdown-style interface for choosing options from a predefined list\n  as an enumeration.\n</Banner>\n\n<LightDarkImage\nsrcLight=\"https://payloadcms.com/images/docs/fields/select.png\"\nsrcDark=\"https://payloadcms.com/images/docs/fields/select-dark.png\"\nalt=\"Shows a Select field in the Payload admin panel\"\ncaption=\"Admin panel screenshot of a Select field\"\n/>\n\n### Config\n\n| Option             | Description                                                                                                                                                                   |\n|--------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                        |\n| **`options`** \\*   | Array of options to allow the field to store. Can either be an array of strings, or an array of objects containing a `label` string and a `value` string.                     |\n| **`hasMany`**      | Boolean when, if set to `true`, allows this field to have many selections instead of only one.                                                                                |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                       |\n| **`unique`**       | Enforce that each entry in the Collection has a unique value for this field.                                                                                                  |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                  |\n| **`index`**        | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often.   |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                 |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                    |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                       |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                              |\n| **`defaultValue`** | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                          |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                               |\n| **`required`**     | Require this field to have a value.                                                                                                                                           |\n| **`admin`**        | Admin-specific configuration. See the [default field admin config](../fields/overview#admin-config) for more details.                                                      |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                     |\n| **`enumName`**     | Custom enum name for this field when using SQL database adapter ([Postgres](../database/postgres)). Auto-generated from name if not defined.                               |\n| **`dbName`**       | Custom table name (if `hasMany` set to `true`) for this field when using SQL database adapter ([Postgres](../database/postgres)). Auto-generated from name if not defined. |\n\n_\\* An asterisk denotes that a property is required._\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  Option values should be strings that do not contain hyphens or special characters due to GraphQL\n  enumeration naming constraints. Underscores are allowed. If you determine you need your option\n  values to be non-strings or contain special characters, they will be formatted accordingly before\n  being used as a GraphQL enum.\n</Banner>\n\n### Admin config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), the Select field type also allows\nfor the following admin-specific properties:\n\n**`isClearable`**\n\nSet to `true` if you'd like this field to be clearable within the Admin UI.\n\n**`isSortable`**\n\nSet to `true` if you'd like this field to be sortable within the Admin UI using drag and drop. (Only works\nwhen `hasMany` is set to `true`)\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'selectedFeatures', // required\n      type: 'select', // required\n      hasMany: true,\n      admin: {\n        isClearable: true,\n        isSortable: true, // use mouse to drag and drop different values, and sort them according to your choice\n      },\n      options: [\n        {\n          label: 'Metallic Paint',\n          value: 'metallic_paint',\n        },\n        {\n          label: 'Alloy Wheels',\n          value: 'alloy_wheels',\n        },\n        {\n          label: 'Carbon Fiber Dashboard',\n          value: 'carbon_fiber_dashboard',\n        },\n      ],\n    },\n  ],\n}\n```\n\n### Customization\n\nThe Select field UI component can be customized by providing a custom React component to the `components` object in the\nBase config.\n\n```ts\nexport const CustomSelectField: Field = {\n  name: 'customSelectField',\n  type: 'select', // or 'text' if you have dynamic options\n  admin: {\n    components: {\n      Field: CustomSelectComponent({\n        options: [\n          {\n            label: 'Option 1',\n            value: '1',\n          },\n          {\n            label: 'Option 2',\n            value: '2',\n          },\n        ],\n      }),\n    },\n  }\n}\n```\n\nYou can import the existing Select component directly from Payload, then extend and customize it as needed.\n\n```ts\nimport * as React from 'react';\nimport { SelectInput, useField } from 'payload/components/forms';\nimport { useAuth } from 'payload/components/utilities';\n\ntype CustomSelectProps = {\n  path: string;\n  options: {\n    label: string;\n    value: string;\n  }[];\n}\n\nexport const CustomSelectComponent: React.FC<CustomSelectProps> = ({ path, options }) => {\n  const { value, setValue } = useField<string>({ path })\n  const { user } = useAuth()\n\n  const adjustedOptions = options.filter((option) => {\n    /*\n      A common use case for a custom select\n      is to show different options based on\n      the current user's role.\n    */\n    return option;\n  });\n\n  return (\n    <div>\n      <label className = \"field-label\" >\n      Custom\n  Select\n  < /label>\n  < SelectInput\n  path = { path }\n  name = { path }\n  options = { adjustedOptions }\n  value = { value }\n  onChange = {(e)\n=>\n  setValue(e.value)\n}\n  />\n  < /div>\n)\n}\n```\n\nIf you are looking to create a dynamic select field, the following tutorial will walk you through the process of\ncreating a custom select field that fetches its options from an external API.\n\n<VideoDrawer\nid='Efn9OxSjA6Y'\nlabel='How to Create a Custom Select Field'\ndrawerTitle='How to Create a Custom Select Field: A Step-by-Step Guide'\n/>\n\nIf you want to learn more about custom components check out\nthe [Admin > Custom Component](../admin/components#field-component) docs.\n",
            "desc": "The Select field provides a dropdown-style interface for choosing options from a predefined list. Learn how to use Select fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              },
              {
                "id": "customization",
                "level": 3,
                "text": "Customization"
              }
            ],
            "keywords": "select, multi-select, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Select",
            "order": 160,
            "title": "Select Field"
          },
          {
            "slug": "tabs",
            "content": "\n<Banner>\n  The Tabs field is presentational-only and only affects the Admin panel (unless a tab is named). By\n  using it, you can place fields within a nice layout component that separates certain sub-fields by\n  a tabbed interface.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/tabs.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/tabs-dark.png\"\n  alt=\"Shows a tabs field used to separate Hero and Page layout in the Payload admin panel\"\n  caption=\"Tabs field type used to separate Hero fields from Page Layout\"\n/>\n\n### Config\n\n| Option        | Description                                                                                                              |\n| ------------- | ------------------------------------------------------------------------------------------------------------------------ |\n| **`tabs`** \\* | Array of tabs to render within this Tabs field.                                                                          |\n| **`admin`**   | Admin-specific configuration. See the [default field admin config](../fields/overview#admin-config) for more details. |\n| **`custom`**  | Extension point for adding custom data (e.g. for plugins)                                                                |\n\n#### Tab-specific Config\n\nEach tab must have either a `name` or `label` and the required `fields` array. You can also optionally pass a `description` to render within each individual tab.\n\n| Option              | Description                                                                                                                                                                                                  |\n| ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| **`name`**          | Groups field data into an object when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                                      |\n| **`label`**         | The label to render on the tab itself. Required when name is undefined, defaults to name converted to words.                                                                                                 |\n| **`fields`** \\*     | The fields to render within this tab.                                                                                                                                                                        |\n| **`description`**   | Optionally render a description within this tab to describe the contents of the tab itself.                                                                                                                  |\n| **`interfaceName`** | Create a top level, reusable [Typescript interface](../typescript/generating-types#custom-field-interfaces) & [GraphQL type](../graphql/graphql-schema#custom-field-schemas). (`name` must be present) |\n\n_\\* An asterisk denotes that a property is required._\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      type: 'tabs', // required\n      tabs: [\n        // required\n        {\n          label: 'Tab One Label', // required\n          description: 'This will appear within the tab above the fields.',\n          fields: [\n            // required\n            {\n              name: 'someTextField',\n              type: 'text',\n              required: true,\n            },\n          ],\n        },\n        {\n          name: 'tabTwo',\n          label: 'Tab Two Label', // required\n          interfaceName: 'TabTwo', // optional (`name` must be present)\n          fields: [\n            // required\n            {\n              name: 'numberField', // accessible via tabTwo.numberField\n              type: 'number',\n              required: true,\n            },\n          ],\n        },\n      ],\n    },\n  ],\n}\n```\n",
            "desc": "The Tabs field is a great way to organize complex editing experiences into specific tab-based areas.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "tabs, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Tabs",
            "order": 170,
            "title": "Tabs Field"
          },
          {
            "slug": "text",
            "content": "\n<Banner>\n  The Text field type is one of the most commonly used fields. It saves a string to the database and\n  provides the Admin panel with a simple text input.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/text.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/text-dark.png\"\n  alt=\"Shows a text field and read-only text field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Text field and read-only Text field\"\n/>\n\n### Config\n\n| Option             | Description                                                                                                                                                                                         |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                              |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                                             |\n| **`unique`**       | Enforce that each entry in the Collection has a unique value for this field.                                                                                                                        |\n| **`minLength`**    | Used by the default validation function to ensure values are of a minimum character length.                                                                                                         |\n| **`maxLength`**    | Used by the default validation function to ensure values are of a maximum character length.                                                                                                         |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                        |\n| **`index`**        | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                       |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                          |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                             |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                    |\n| **`defaultValue`** | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                                                     |\n| **`required`**     | Require this field to have a value.                                                                                                                                                                 |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                           |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                           |\n| **`hasMany`**      | Makes this field an ordered array of text instead of just a single text.                                                                                                                       |\n| **`minRows`**      | Minimum number of texts in the array, if `hasMany` is set to true.                                                                                                                        |\n| **`maxRows`**      | Maximum number of texts in the array, if `hasMany` is set to true.                                                                                                                        |\n_\\* An asterisk denotes that a property is required._\n\n### Admin config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), the Text field type allows for the following `admin` properties:\n\n**`placeholder`**\n\nSet this property to define a placeholder string in the text input.\n\n**`autoComplete`**\n\nSet this property to a string that will be used for browser autocomplete.\n\n**`rtl`**\n\nOverride the default text direction of the Admin panel for this field. Set to `true` to force right-to-left text direction.\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'pageTitle', // required\n      type: 'text', // required\n      required: true,\n    },\n  ],\n}\n```\n",
            "desc": "Text field types simply save a string to the database and provide the Admin panel with a text input. Learn how to use Text fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "text, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Text",
            "order": 180,
            "title": "Text Field"
          },
          {
            "slug": "textarea",
            "content": "\n<Banner>\n  The Textarea field is almost identical to the Text field but it features a slightly larger input\n  that is better suited to edit longer text.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/fields/textarea.png\"\n  srcDark=\"https://payloadcms.com/images/docs/fields/textarea-dark.png\"\n  alt=\"Shows a textarea field and read-only textarea field in the Payload admin panel\"\n  caption=\"Admin panel screenshot of a Textarea field and read-only Textarea field\"\n/>\n\n### Config\n\n| Option             | Description                                                                                                                                                                                         |\n| ------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*      | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                                              |\n| **`label`**        | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                                             |\n| **`unique`**       | Enforce that each entry in the Collection has a unique value for this field.                                                                                                                        |\n| **`minLength`**    | Used by the default validation function to ensure values are of a minimum character length.                                                                                                         |\n| **`maxLength`**    | Used by the default validation function to ensure values are of a maximum character length.                                                                                                         |\n| **`validate`**     | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                                        |\n| **`index`**        | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`saveToJWT`**    | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                                                       |\n| **`hooks`**        | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                                          |\n| **`access`**       | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                                             |\n| **`hidden`**       | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                                                    |\n| **`defaultValue`** | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                                                |\n| **`localized`**    | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                                                     |\n| **`required`**     | Require this field to have a value.                                                                                                                                                                 |\n| **`admin`**        | Admin-specific configuration. See below for [more detail](#admin-config).                                                                                                                           |\n| **`custom`**       | Extension point for adding custom data (e.g. for plugins)                                                                                                                                           |\n\n_\\* An asterisk denotes that a property is required._\n\n### Admin config\n\nIn addition to the default [field admin config](../fields/overview#admin-config), the Textarea field type allows for the following `admin` properties:\n\n**`placeholder`**\n\nSet this property to define a placeholder string in the textarea.\n\n**`autoComplete`**\n\nSet this property to a string that will be used for browser autocomplete.\n\n**`rtl`**\n\nOverride the default text direction of the Admin panel for this field. Set to `true` to force right-to-left text direction.\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'metaDescription', // required\n      type: 'textarea', // required\n      required: true,\n    },\n  ],\n}\n```\n",
            "desc": "Textarea field types save a string to the database, similar to the Text field type but equipped for longer text. Learn how to use Textarea fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "admin-config",
                "level": 3,
                "text": "Admin config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "textarea, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Textarea",
            "order": 190,
            "title": "Textarea Field"
          },
          {
            "slug": "ui",
            "content": "\n<Banner>\n  The UI (user interface) field gives you a ton of power to add your own React components directly\n  into the Admin panel, nested directly within your other fields. It has absolutely no effect on the\n  data of your documents. It is presentational-only.\n</Banner>\n\nThis field is helpful if you need to build in custom functionality via React components within the Admin panel. Think of it as a way for you to \"plug in\" your own React components directly within your other fields, so you can provide your editors with new controls exactly where you want them to go.\n\nWith this field, you can also inject custom `Cell` components that appear as additional columns within collections' List views.\n\n**Example uses:**\n\n- Add a custom message or block of text within the body of an Edit view to describe the purpose of surrounding fields\n- Add a \"Refund\" button to an Order's Edit view sidebar, which might make a fetch call to a custom `refund` endpoint\n- Add a \"view page\" button into a Pages List view to give editors a shortcut to view a page on the frontend of the site\n- Build a \"clear cache\" button or similar mechanism to manually clear caches of specific documents\n\n### Config\n\n| Option                          | Description                                                                                                            |\n| ------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| **`name`** \\*                   | A unique identifier for this field.                                                                                    |\n| **`label`**                     | Human-readable label for this UI field.                                                                                |\n| **`admin.components.Field`** \\* | React component to be rendered for this field within the Edit view. [More](../admin/components/#field-component)    |\n| **`admin.components.Cell`**     | React component to be rendered as a Cell within collection List views. [More](../admin/components/#field-component) |\n| **`admin.disableListColumn`**   | Set `disableListColumn` to `true` to prevent the UI field from appearing in the list view column selector.             |\n| **`custom`**                    | Extension point for adding custom data (e.g. for plugins)                                                              |\n\n_\\* An asterisk denotes that a property is required._\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'myCustomUIField', // required\n      type: 'ui', // required\n      admin: {\n        components: {\n          Field: MyCustomUIField,\n          Cell: MyCustomUICell,\n        },\n      },\n    },\n  ],\n}\n```\n",
            "desc": "UI fields are purely presentational and allow developers to customize the admin panel to a very fine degree, including adding actions and other functions.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              }
            ],
            "keywords": "custom field, react component, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "UI",
            "order": 200,
            "title": "UI Field"
          },
          {
            "slug": "upload",
            "content": "\n<Banner>\n  The Upload field allows for the selection of a Document from a collection supporting Uploads, and\n  formats the selection as a thumbnail in the Admin panel.\n</Banner>\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  To use this field, you need to have a Collection configured to allow Uploads. For more\n  information, [click here](../upload/overview) to read about how to enable Uploads on a\n  collection by collection basis.\n</Banner>\n\n<LightDarkImage\nsrcLight=\"https://payloadcms.com/images/docs/fields/upload.png\"\nsrcDark=\"https://payloadcms.com/images/docs/fields/upload-dark.png\"\nalt=\"Shows an upload field in the Payload admin panel\"\ncaption=\"Admin panel screenshot of an Upload field\"\n/>\n\n**Example uses:**\n\n- To provide a `Page` with a featured image\n- To allow for a `Product` to deliver a downloadable asset like PDF or MP3\n- To give a layout building block the ability to feature a background image\n\n### Config\n\n| Option               | Description                                                                                                                                                                 |\n|----------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`name`** \\*        | To be used as the property name when stored and retrieved from the database. [More](../fields/overview#field-names)                                                      |\n| **`*relationTo`** \\* | Provide a single collection `slug` to allow this field to accept a relation to. <strong>Note: the related collection must be configured to support Uploads.</strong>        |\n| **`filterOptions`**  | A query to filter which options appear in the UI and validate against. [More](#filtering-upload-options).                                                                   |\n| **`maxDepth`**       | Sets a number limit on iterations of related documents to populate when queried. [Depth](../getting-started/concepts#depth)                                              |\n| **`label`**          | Text used as a field label in the Admin panel or an object with keys for each language.                                                                                     |\n| **`unique`**         | Enforce that each entry in the Collection has a unique value for this field.                                                                                                |\n| **`validate`**       | Provide a custom validation function that will be executed on both the Admin panel and the backend. [More](../fields/overview#validation)                                |\n| **`index`**          | Build an [index](../database/overview) for this field to produce faster queries. Set this field to `true` if your users will perform queries on this field's data often. |\n| **`saveToJWT`**      | If this field is top-level and nested in a config supporting [Authentication](../authentication/config), include its data in the user JWT.                               |\n| **`hooks`**          | Provide field-based hooks to control logic for this field. [More](../fields/overview#field-level-hooks)                                                                  |\n| **`access`**         | Provide field-based access control to denote what users can see and do with this field's data. [More](../fields/overview#field-level-access-control)                     |\n| **`hidden`**         | Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.                            |\n| **`defaultValue`**   | Provide data to be used for this field's default value. [More](../fields/overview#default-values)                                                                        |\n| **`displayPreview`** | Enable displaying preview of the uploaded file. Overrides related Collection's `displayPreview` option. [More](../upload/overview#collection-upload-options).            |\n| **`localized`**      | Enable localization for this field. Requires [localization to be enabled](../configuration/localization) in the Base config.                                             |\n| **`required`**       | Require this field to have a value.                                                                                                                                         |\n| **`admin`**          | Admin-specific configuration. See the [default field admin config](../fields/overview#admin-config) for more details.                                                    |\n| **`custom`**         | Extension point for adding custom data (e.g. for plugins)                                                                                                                   |\n\n_\\* An asterisk denotes that a property is required._\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'backgroundImage', // required\n      type: 'upload', // required\n      relationTo: 'media', // required\n      required: true,\n    },\n  ],\n}\n```\n\n### Filtering upload options\n\nOptions can be dynamically limited by supplying a [query constraint](../queries/overview), which will be used both\nfor validating input and filtering available uploads in the UI.\n\nThe `filterOptions` property can either be a `Where` query, or a function returning `true` to not filter, `false` to\nprevent all, or a `Where` query. When using a function, it will be\ncalled with an argument object with the following properties:\n\n| Property      | Description                                                                          |\n|---------------|--------------------------------------------------------------------------------------|\n| `relationTo`  | The `relationTo` to filter against (as defined on the field)                         |\n| `data`        | An object of the full collection or global document currently being edited           |\n| `siblingData` | An object of the document data limited to fields within the same parent to the field |\n| `id`          | The value of the collection `id`, will be `undefined` on create request              |\n| `user`        | The currently authenticated user object                                              |\n\n**Example:**\n\n```ts\nconst uploadField = {\n  name: 'image',\n  type: 'upload',\n  relationTo: 'media',\n  filterOptions: {\n    mimeType: { contains: 'image' },\n  },\n}\n```\n\nYou can learn more about writing queries [here](../queries/overview).\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  When an upload field has both <strong>filterOptions</strong> and a custom{' '}\n  <strong>validate</strong> function, the api will not validate <strong>filterOptions</strong>{' '}\n  unless you call the default upload field validation function imported from{' '}\n  <strong>payload/fields/validations</strong> in your validate function.\n</Banner>\n",
            "desc": "Upload fields will allow a file to be uploaded, only from a collection supporting Uploads. Learn how to use Upload fields, see examples and options.",
            "headings": [
              {
                "id": "config",
                "level": 3,
                "text": "Config"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              },
              {
                "id": "filtering-upload-options",
                "level": 3,
                "text": "Filtering upload options"
              }
            ],
            "keywords": "upload, images media, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Upload",
            "order": 210,
            "title": "Upload Field"
          }
        ]
      },
      {
        "slug": "Access-Control",
        "docs": [
          {
            "slug": "overview",
            "content": "\nAccess control within Payload is extremely powerful while remaining easy and intuitive to manage. Declaring who should have access to what documents is no more complex than writing a simple JavaScript function that either returns a `boolean` or a [`query`](../queries/overview) constraint to restrict which documents users can interact with.\n\n<YouTube id=\"DoPLyXG26Dg\" title=\"Overview of Payload Access Control\" />\n\n**Example use cases:**\n\n- Allowing anyone `read` access to all `Post`s\n- Only allowing public access to `Post`s where a `status` field is equal to `published`\n- Giving only `User`s with a `role` field equal to `admin` the ability to delete `Page`(s)\n- Allowing anyone to create `ContactSubmission`s, but only logged in users to `read`, `update` or `delete` them\n- Restricting a `User` to only be able to see their own `Order`(s), but no others\n- Allowing `User`s that belong to a certain `Organization` to access only that `Organization`'s `Resource`s\n\n### Default Settings\n\n**By default, all Collections and Globals require that a user is logged in to be able to interact in any way.** The default Access Control function evaluates the `user` from the Express `req` and returns `true` if a user is logged in, and `false` if not.\n\n**Default Access function:**\n\n```ts\nconst defaultPayloadAccess = ({ req: { user } }) => {\n  // Return `true` if a user is found\n  // and `false` if it is undefined or null\n  return Boolean(user)\n}\n```\n\n<Banner type=\"success\">\n  <strong>Note:</strong>\n  <br />\n  In the Local API, all Access Control functions are skipped by default, allowing your server to do\n  whatever it needs. But, you can opt back in by setting the option\n  {' '}\n  <strong>\n    overrideAccess\n  </strong>\n  {' '}\n  to <strong>false</strong>.\n</Banner>\n\n### Access Control Types\n\nYou can manage access within Payload on three different levels:\n\n- [Collections](../access-control/collections)\n- [Fields](../access-control/fields)\n- [Globals](../access-control/globals)\n\n### When Access Control is Executed\n\n<Banner type=\"success\">\n  <strong>Note:</strong>\n  <br />\n  Access control functions are utilized in two places. It's important to understand how and when\n  your access control is executed.\n</Banner>\n\n#### As you execute operations\n\nWhen you perform Payload operations like `create`, `read`, `update`, and `delete`, your access control functions will be executed before any changes or operations are completed.\n\n#### Within the Admin UI\n\nThe Payload Admin UI responds dynamically to the access control that you define. For example, if you restrict editing a `ExampleCollection` to only users that feature a `role` of `admin`, the Payload Admin UI will **hide** the `ExampleCollection` from the Admin UI entirely. This is super powerful and allows you to control who can do what with your Admin UI.\n\nTo accomplish this, Payload ships with an `Access` operation, which is executed when a user logs into the Admin UI. Payload will execute each one of your access control functions, across all collections, globals, and fields, at the top level and return a response that contains a reflection of what the currently authenticated user can do with your application.\n\n### Argument Availability\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  When your access control functions are executed via the <strong>access</strong> operation, the{' '}\n  <strong>id</strong> and <strong>data</strong> arguments will be <strong>undefined</strong>,\n  because Payload is executing your functions without referencing a specific document.\n</Banner>\n\nIf you use `id` or `data` within your access control functions, make sure to check that they are defined first. If they are not, then you can assume that your access control is being executed via the `access` operation, to determine solely what the user can do within the Admin UI.\n",
            "desc": "Payload makes it simple to define and manage access control. By declaring roles, you can set permissions and restrict what your users can interact with.",
            "headings": [
              {
                "id": "default-settings",
                "level": 3,
                "text": "Default Settings"
              },
              {
                "id": "access-control-types",
                "level": 3,
                "text": "Access Control Types"
              },
              {
                "id": "when-access-control-is-executed",
                "level": 3,
                "text": "When Access Control is Executed"
              },
              {
                "id": "argument-availability",
                "level": 3,
                "text": "Argument Availability"
              }
            ],
            "keywords": "overview, access control, permissions, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Access Control"
          },
          {
            "slug": "collections",
            "content": "\nYou can define Collection-level Access Control within each Collection's `access` property. All Access Control functions accept one `args` argument.\n\n## Available Controls\n\n| Function                | Allows/Denies Access                         |\n| ----------------------- | -------------------------------------------- |\n| **[`create`](#create)** | Used in the `create` operation               |\n| **[`read`](#read)**     | Used in the `find` and `findByID` operations |\n| **[`update`](#update)** | Used in the `update` operation               |\n| **[`delete`](#delete)** | Used in the `delete` operation               |\n\n#### Auth-enabled Controls\n\nIf a Collection supports [`Authentication`](../authentication/overview), the following Access Controls become available:\n\n| Function                | Allows/Denies Access                                           |\n| ----------------------- | -------------------------------------------------------------- |\n| **[`admin`](#admin)**   | Used to restrict access to the Payload Admin panel             |\n| **[`unlock`](#unlock)** | Used to restrict which users can access the `unlock` operation |\n\n**Example Collection config:**\n\n```ts\nimport { CollectionConfig } from 'payload/types';\n\nexport const Posts: CollectionConfig = {\n  slug: \"posts\",\n  // highlight-start\n  access: {\n    create: ({ req: { user } }) => { ... },\n    read: ({ req: { user } }) => { ... },\n    update: ({ req: { user } }) => { ... },\n    delete: ({ req: { user } }) => { ... },\n    admin: ({ req: { user } }) => { ... },\n  },\n  // highlight-end\n};\n```\n\n### Create\n\nReturns a boolean which allows/denies access to the `create` request.\n\n**Available argument properties:**\n\n| Option     | Description                                                                |\n| ---------- | -------------------------------------------------------------------------- |\n| **`req`**  | The Express `request` object containing the currently authenticated `user` |\n| **`data`** | The data passed to create the document with.                               |\n\n**Example:**\n\n```ts\nconst PublicUsers = {\n  slug: 'public-users',\n  access: {\n    // highlight-start\n    // allow guest users to self-registration\n    create: () => true,\n    // highlight-end\n    ...\n  },\n  fields: [ ... ],\n}\n```\n\n### Read\n\nRead access functions can return a boolean result or optionally return a [query constraint](../queries/overview) which limits the documents that are returned to only those that match the constraint you provide. This can be helpful to restrict users' access to only certain documents however you specify.\n\n**Available argument properties:**\n\n| Option    | Description                                                                |\n| --------- | -------------------------------------------------------------------------- |\n| **`req`** | The Express `request` object containing the currently authenticated `user` |\n| **`id`**  | `id` of document requested, if within `findByID`                           |\n\n**Example:**\n\n```ts\nimport { Access } from 'payload/config'\n\nconst canReadPage: Access = ({ req: { user } }) => {\n  // allow authenticated users\n  if (user) {\n    return true\n  }\n  // using a query constraint, guest users can access when a field named 'isPublic' is set to true\n  return {\n    // assumes we have a checkbox field named 'isPublic'\n    isPublic: {\n      equals: true,\n    },\n  }\n}\n```\n\n### Update\n\nUpdate access functions can return a boolean result or optionally return a [query constraint](../queries/overview) to limit the document(s) that can be updated by the currently authenticated user. For example, returning a `query` from the `update` Access Control is helpful in cases where you would like to restrict a user to only being able to update the documents containing a `createdBy` relationship field equal to the user's ID.\n\n**Available argument properties:**\n\n| Option     | Description                                                                |\n| ---------- | -------------------------------------------------------------------------- |\n| **`req`**  | The Express `request` object containing the currently authenticated `user` |\n| **`id`**   | `id` of document requested to update                                       |\n| **`data`** | The data passed to update the document with                                |\n\n**Example:**\n\n```ts\nimport { Access } from 'payload/config'\n\nconst canUpdateUser: Access = ({ req: { user }, id }) => {\n  // allow users with a role of 'admin'\n  if (user.roles && user.roles.some((role) => role === 'admin')) {\n    return true\n  }\n  // allow any other users to update only oneself\n  return user.id === id\n}\n```\n\n### Delete\n\nSimilarly to the Update function, returns a boolean or a [query constraint](../queries/overview) to limit which documents can be deleted by which users.\n\n**Available argument properties:**\n\n| Option    | Description                                                                                         |\n| --------- | --------------------------------------------------------------------------------------------------- |\n| **`req`** | The Express `request` object with additional `user` property, which is the currently logged in user |\n| **`id`**  | `id` of document requested to delete                                                                |\n\n**Example:**\n\n```ts\nimport { Access } from 'payload/config'\n\nconst canDeleteCustomer: Access = async ({ req, id }) => {\n  if (!id) {\n    // allow the admin UI to show controls to delete since it is indeterminate without the id\n    return true\n  }\n  // query another collection using the id\n  const result = await req.payload.find({\n    collection: 'contracts',\n    limit: 0,\n    depth: 0,\n    where: {\n      customer: { equals: id },\n    },\n  })\n\n  return result.totalDocs === 0\n}\n```\n\n### Admin\n\nIf the Collection is [used to access the Payload Admin panel](../admin/overview#the-admin-user-collection), the `Admin` Access Control function determines whether or not the currently logged in user can access the admin UI.\n\n**Available argument properties:**\n\n| Option    | Description                                                                |\n| --------- | -------------------------------------------------------------------------- |\n| **`req`** | The Express `request` object containing the currently authenticated `user` |\n\n### Unlock\n\nDetermines which users can [unlock](../authentication/operations#unlock) other users who may be blocked from authenticating successfully due to [failing too many login attempts](../authentication/config#options).\n\n**Available argument properties:**\n\n| Option    | Description                                                                |\n| --------- | -------------------------------------------------------------------------- |\n| **`req`** | The Express `request` object containing the currently authenticated `user` |\n",
            "desc": "With Collection-level Access Control you can define which users can create, read, update or delete Collections.",
            "headings": [
              {
                "id": "available-controls",
                "level": 2,
                "text": "Available Controls"
              },
              {
                "id": "create",
                "level": 3,
                "text": "Create"
              },
              {
                "id": "read",
                "level": 3,
                "text": "Read"
              },
              {
                "id": "update",
                "level": 3,
                "text": "Update"
              },
              {
                "id": "delete",
                "level": 3,
                "text": "Delete"
              },
              {
                "id": "admin",
                "level": 3,
                "text": "Admin"
              },
              {
                "id": "unlock",
                "level": 3,
                "text": "Unlock"
              }
            ],
            "keywords": "collections, access control, permissions, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Collections",
            "order": 20,
            "title": "Collection Access Control"
          },
          {
            "slug": "fields",
            "content": "\nField Access Control is specified with functions inside a field's config. All field-level Controls return a boolean value to allow or deny access for the specified operation. No field-level Access Controls support returning query constraints. All Access Control functions accept one `args` argument.\n\n## Available Controls\n\n| Function                | Purpose                                                                          |\n| ----------------------- | -------------------------------------------------------------------------------- |\n| **[`create`](#create)** | Allows or denies the ability to set a field's value when creating a new document |\n| **[`read`](#read)**     | Allows or denies the ability to read a field's value                             |\n| **[`update`](#update)** | Allows or denies the ability to update a field's value                           |\n\n**Example Collection config:**\n\n```ts\nimport { CollectionConfig } from 'payload/types';\n\nexport const Posts: CollectionConfig = {\n  slug: 'posts',\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n      // highlight-start\n      access: {\n        create: ({ req: { user } }) => { ... },\n        read: ({ req: { user } }) => { ... },\n        update: ({ req: { user } }) => { ... },\n      },\n      // highlight-end\n    };\n  ],\n};\n```\n\n### Create\n\nReturns a boolean which allows or denies the ability to set a field's value when creating a new document. If `false` is returned, any passed values will be discarded.\n\n**Available argument properties:**\n\n| Option            | Description                                                                |\n| ----------------- | -------------------------------------------------------------------------- |\n| **`req`**         | The Express `request` object containing the currently authenticated `user` |\n| **`data`**        | The full data passed to create the document.                               |\n| **`siblingData`** | Immediately adjacent field data passed to create the document.             |\n\n### Read\n\nReturns a boolean which allows or denies the ability to read a field's value. If `false`, the entire property is omitted from the resulting document.\n\n**Available argument properties:**\n\n| Option            | Description                                                                |\n| ----------------- | -------------------------------------------------------------------------- |\n| **`req`**         | The Express `request` object containing the currently authenticated `user` |\n| **`id`**          | `id` of the document being read                                            |\n| **`doc`**         | The full document data.                                                    |\n| **`siblingData`** | Immediately adjacent field data of the document being read.                |\n\n### Update\n\nReturns a boolean which allows or denies the ability to update a field's value. If `false` is returned, any passed values will be discarded.\n\nIf `false` is returned and you attempt to update the field's value, the operation will **not** throw an error however the field will be omitted from the update operation and the value will remain unchanged.\n\n**Available argument properties:**\n\n| Option            | Description                                                                |\n| ----------------- | -------------------------------------------------------------------------- |\n| **`req`**         | The Express `request` object containing the currently authenticated `user` |\n| **`id`**          | `id` of the document being updated                                         |\n| **`data`**        | The full data passed to update the document.                               |\n| **`siblingData`** | Immediately adjacent field data passed to update the document with.        |\n| **`doc`**         | The full document data, before the update is applied.                      |\n",
            "desc": "Field-level Access Control is specified within a field's config, and allows you to define which users can create, read or update Fields.",
            "headings": [
              {
                "id": "available-controls",
                "level": 2,
                "text": "Available Controls"
              },
              {
                "id": "create",
                "level": 3,
                "text": "Create"
              },
              {
                "id": "read",
                "level": 3,
                "text": "Read"
              },
              {
                "id": "update",
                "level": 3,
                "text": "Update"
              }
            ],
            "keywords": "fields, access control, permissions, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Fields",
            "order": 30,
            "title": "Field-level Access Control"
          },
          {
            "slug": "globals",
            "content": "\nYou can define Global-level Access Control within each Global's `access` property. All Access Control functions accept one `args` argument.\n\n\\*\\*Available argument properties:\n\n## Available Controls\n\n| Function                | Allows/Denies Access                   |\n| ----------------------- | -------------------------------------- |\n| **[`read`](#read)**     | Used in the `findOne` Global operation |\n| **[`update`](#update)** | Used in the `update` Global operation  |\n\n**Example Global config:**\n\n```ts\nimport { GlobalConfig } from 'payload/types'\n\nconst Header: GlobalConfig = {\n  slug: 'header',\n  // highlight-start\n  access: {\n    read: ({ req: { user } }) => {\n      /* */\n    },\n    update: ({ req: { user } }) => {\n      /* */\n    },\n  },\n  // highlight-end\n}\n\nexport default Header\n```\n\n### Read\n\nReturns a boolean result or optionally a [query constraint](../queries/overview) which limits who can read this global based on its current properties.\n\n**Available argument properties:**\n\n| Option    | Description                                                                |\n| --------- | -------------------------------------------------------------------------- |\n| **`req`** | The Express `request` object containing the currently authenticated `user` |\n\n### Update\n\nReturns a boolean result or optionally a [query constraint](../queries/overview) which limits who can update this global based on its current properties.\n\n**Available argument properties:**\n\n| Option     | Description                                                                |\n| ---------- | -------------------------------------------------------------------------- |\n| **`req`**  | The Express `request` object containing the currently authenticated `user` |\n| **`data`** | The data passed to update the global with.                                 |\n",
            "desc": "Global-level Access Control is specified within each Global's `access` property and allows you to define which users can read or update Globals.",
            "headings": [
              {
                "id": "available-controls",
                "level": 2,
                "text": "Available Controls"
              },
              {
                "id": "read",
                "level": 3,
                "text": "Read"
              },
              {
                "id": "update",
                "level": 3,
                "text": "Update"
              }
            ],
            "keywords": "globals, access control, permissions, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Globals",
            "order": 40,
            "title": "Globals Access Control"
          }
        ]
      },
      {
        "slug": "Authentication",
        "docs": [
          {
            "slug": "overview",
            "content": "\n<YouTube\n  id=\"CT4KafeJjTI\"\n  title=\"Simplified Authentication for Headless CMS: Unlocking Reusability in One Line\"\n/>\n\n<Banner>\n  Payload provides for highly secure and customizable user Authentication out of the box, which\n  allows for users to identify themselves to Payload.\n</Banner>\n\nAuthentication is used within the Payload Admin panel itself as well as throughout your app(s) themselves however you determine necessary.\n\n![Authentication admin panel functionality](https://payloadcms.com/images/docs/auth-admin.jpg)\n_Admin panel screenshot depicting an Admins Collection with Auth enabled_\n\n**Here are some common use cases of Authentication outside of Payload's dashboard itself:**\n\n- Customer accounts for an ecommerce app\n- Customer accounts for a SaaS product\n- P2P app or social site where users need to log in and manage their profiles\n- Online game where players need to track their progress over time\n\nBy default, Payload provides you with a `User` collection that supports Authentication, which is used to access the Admin panel. But, you can add support to one or many Collections of your own. For more information on how to customize, override, or remove the default `User` collection, [click here](../admin/overview#the-admin-user-collection).\n\n### Enabling Auth on a collection\n\nEvery Payload Collection can opt-in to supporting Authentication by specifying the `auth` property on the Collection's config to either `true` or to an object containing `auth` options.\n\n**For a full list of all `auth` options, [click here](../authentication/config).**\n\nSimple example collection:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Admins: CollectionConfig = {\n  slug: 'admins',\n  // highlight-start\n  auth: {\n    tokenExpiration: 7200, // How many seconds to keep the user logged in\n    verify: true, // Require email verification before being allowed to authenticate\n    maxLoginAttempts: 5, // Automatically lock a user out after X amount of failed logins\n    lockTime: 600 * 1000, // Time period to allow the max login attempts\n    // More options are available\n  },\n  // highlight-end\n  fields: [\n    {\n      name: 'role',\n      type: 'select',\n      required: true,\n      options: [\n        'user',\n        'admin',\n        'editor',\n        'developer',\n      ],\n    },\n  ],\n}\n```\n\n**By enabling Authentication on a config, the following modifications will automatically be made to your Collection:**\n\n1. `email` as well as password `salt` & `hash` fields will be added to your Collection's schema\n1. The Admin panel will feature a new set of corresponding UI to allow for changing password and editing email\n1. [A new set of `operations`](../authentication/operations) will be exposed via Payload's REST, Local, and GraphQL APIs\n\nOnce enabled, each document that is created within the Collection can be thought of as a `user` - who can make use of commonly required authentication functions such as logging in / out, resetting their password, and more.\n\n### Logging in / out, resetting password, etc.\n\n[Click here](../authentication/operations) for a list of all automatically-enabled Auth operations, including `login`, `logout`, `refresh`, and others.\n\n### Token-based auth\n\nSuccessfully logging in returns a `JWT` (JSON web token) which is how a user will identify themselves to Payload. By providing this JWT via either an HTTP-only cookie or an `Authorization: JWT` or `Authorization: Bearer` header, Payload will automatically identify the user and add its user JWT data to the Express `req`, which is available throughout Payload including within access control, hooks, and more.\n\nYou can specify what data gets encoded to the JWT token by setting `saveToJWT` to true in your auth collection fields. If you wish to use a different key other than the field `name`, you can provide it to `saveToJWT` as a string. It is also possible to use `saveToJWT` on fields that are nested in inside groups and tabs. If a group has a `saveToJWT` set it will include the object with all sub-fields in the token. You can set `saveToJWT: false` for any fields you wish to omit. If a field inside a group has `saveToJWT` set, but the group does not, the field will be included at the top level of the token.\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  You can access the logged-in user from access control functions and hooks via the Express{' '}\n  <strong>req</strong>. The logged-in user is automatically added as the <strong>user</strong>{' '}\n  property.\n</Banner>\n\n### HTTP-only cookies\n\nPayload `login`, `logout`, and `refresh` operations make use of HTTP-only cookies for authentication purposes. HTTP-only cookies are a highly secure method of storing identifiable data on a user's device so that Payload can automatically recognize a returning user until their cookie expires. They are totally protected from common XSS attacks and cannot be read at all via JavaScript in the browser.\n\n##### Automatic browser inclusion\n\nModern browsers automatically include `http-only` cookies when making requests directly to URLs—meaning that if you are running your API on http://example.com, and you have logged in and visit http://example.com/test-page, your browser will automatically include the Payload authentication cookie for you.\n\n##### Using Fetch or other HTTP APIs\n\nHowever, if you use `fetch` or similar APIs to retrieve Payload resources from its REST or GraphQL API, you need to specify to include credentials (cookies).\n\nFetch example, including credentials:\n\n```ts\nconst response = await fetch('http://localhost:3000/api/pages', {\n  credentials: 'include',\n})\n\nconst pages = await response.json()\n```\n\nFor more about how to automatically include cookies in requests from your app to your Payload API, [click here](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Sending_a_request_with_credentials_included).\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  To make sure you have a Payload cookie set properly in your browser after logging in, you can use\n  Chrome's Developer Tools - Application - Cookies - [your-domain-here]. The Chrome Developer tools\n  will still show HTTP-only cookies, even when JavaScript running on the page can't.\n</Banner>\n\n### CSRF Protection\n\nCSRF (cross-site request forgery) attacks are common and dangerous. By using an HTTP-only cookie, Payload removes many XSS vulnerabilities, however, CSRF attacks can still be possible.\n\nFor example, let's say you have a very popular app running at coolsite.com. This app allows users to manage finances and send / receive money. As Payload is using HTTP-only cookies, that means that browsers automatically will include cookies when sending requests to your domain - no matter what page created the request.\n\nSo, if a user of coolsite.com is logged in and just browsing around on the internet, they might stumble onto a page with bad intentions. That bad page might automatically make requests to all sorts of sites to see if they can find one that they can log into - and coolsite.com might be on their list. If your user was logged in while they visited that evil site, the attacker could do whatever they wanted as if they were your coolsite.com user by just sending requests to the coolsite API (which would automatically include the auth cookie). They could send themselves a bunch of money from your user's account, change the user's password, etc. This is what a CSRF attack is.\n\n<Banner type=\"warning\">\n  <strong>\n    To protect against CSRF attacks, Payload only accepts cookie-based authentication from domains\n    that you explicitly whitelist.\n  </strong>\n</Banner>\n\nTo define domains that should allow users to identify themselves via the Payload HTTP-only cookie, use the `csrf` option on the base Payload config to whitelist domains that you trust.\n\n`payload.config.ts`:\n\n```ts\nimport { buildConfig } from 'payload/config'\n\nconst config = buildConfig({\n  collections: [\n    // collections here\n  ],\n  // highlight-start\n  csrf: [\n    // whitelist of domains to allow cookie auth from\n    'https://your-frontend-app.com',\n    'https://your-other-frontend-app.com',\n  ],\n  // highlight-end\n})\n\nexport default config\n```\n\n### Identifying users via the Authorization Header\n\nIn addition to authenticating via an HTTP-only cookie, you can also identify users via the `Authorization` header on an HTTP request.\n\nExample:\n\n```ts\nconst request = await fetch('http://localhost:3000', {\n  headers: {\n    Authorization: `JWT ${token}`,\n  },\n})\n```\n\nYou can retrieve a user's token via the response to `login`, `refresh`, and `me` auth operations.\n",
            "desc": "Payload provides highly secure user Authentication out of the box, and you can fully customize, override, or remove the default Authentication support.",
            "headings": [
              {
                "id": "enabling-auth-on-a-collection",
                "level": 3,
                "text": "Enabling Auth on a collection"
              },
              {
                "id": "logging-in-out-resetting-password-etc",
                "level": 3,
                "text": "Logging in / out, resetting password, etc."
              },
              {
                "id": "token-based-auth",
                "level": 3,
                "text": "Token-based auth"
              },
              {
                "id": "http-only-cookies",
                "level": 3,
                "text": "HTTP-only cookies"
              },
              {
                "id": "csrf-protection",
                "level": 3,
                "text": "CSRF Protection"
              },
              {
                "id": "identifying-users-via-the-authorization-header",
                "level": 3,
                "text": "Identifying users via the Authorization Header"
              }
            ],
            "keywords": "authentication, config, configuration, overview, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Authentication Overview"
          },
          {
            "slug": "config",
            "content": "\nPayload's Authentication is extremely powerful and gives you everything you need when you go to build a new app or site in a secure and responsible manner.\n\nTo enable Authentication on a collection, define an `auth` property and set it to either `true` or to an object containing the options below.\n\n## Options\n\n| Option                     | Description                                                                                                                                                                                                                         |\n| -------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`useAPIKey`**            | Payload Authentication provides for API keys to be set on each user within an Authentication-enabled Collection. [More](../authentication/config#api-keys)                                                                       |\n| **`tokenExpiration`**      | How long (in seconds) to keep the user logged in. JWTs and HTTP-only cookies will both expire at the same time.                                                                                                                     |\n| **`maxLoginAttempts`**     | Only allow a user to attempt logging in X amount of times. Automatically locks out a user from authenticating if this limit is passed. Set to `0` to disable.                                                                       |\n| **`lockTime`**             | Set the time (in milliseconds) that a user should be locked out if they fail authentication more times than `maxLoginAttempts` allows for.                                                                                          |\n| **`depth`**                | How many levels deep a `user` document should be populated when creating the JWT and binding the `user` to the express `req`. Defaults to `0` and should only be modified if absolutely necessary, as this will affect performance. |\n| **`cookies`**              | Set cookie options, including `secure`, `sameSite`, and `domain`. For advanced users.                                                                                                                                               |\n| **`forgotPassword`**       | Customize the way that the `forgotPassword` operation functions. [More](../authentication/config#forgot-password)                                                                                                                |\n| **`verify`**               | Set to `true` or pass an object with verification options to require users to verify by email before they are allowed to log into your app. [More](../authentication/config#email-verification)                                  |\n| **`disableLocalStrategy`** | Advanced - disable Payload's built-in local auth strategy. Only use this property if you have replaced Payload's auth mechanisms with your own.                                                                                     |\n| **`strategies`**           | Advanced - an array of PassportJS authentication strategies to extend this collection's authentication with. [More](../authentication/config#strategies)                                                                         |\n\n### API keys\n\nTo integrate with third-party APIs or services, you might need the ability to generate API keys that can be used to identify as a certain user within Payload.\n\nIn Payload, users are essentially documents within a collection. Just like you can authenticate as a user with an email and password, which is considered as our default local auth strategy, you can also authenticate as a user with an API key. API keys are generated on a user-by-user basis, similar to email and passwords, and are meant to represent a single user.\n\nFor example, if you have a third-party service or external app that needs to be able to perform protected actions at its discretion, you have two options:\n\n1. Create a user for the third-party app, and log in each time to receive a token before you attempt to access any protected actions\n1. Enable API key support for the Collection, where you can generate a non-expiring API key per user in the collection. This is particularly useful as you can create a \"user\" that reflects an integration with a specific external service and assign a \"role\" or specific access only needed by that service/integration. Alternatively, you could create a \"super admin\" user and assign an API key to that user so that any requests made with that API key are considered as being made by that super user.\n\nTechnically, both of these options will work for third-party integrations but the second option with API key is simpler, because it reduces the amount of work that your integrations need to do to be authenticated properly.\n\nTo enable API keys on a collection, set the `useAPIKey` auth option to `true`. From there, a new interface will appear in the Admin panel for each document within the collection that allows you to generate an API key for each user in the Collection.\n\n<Banner type=\"success\">\n  User API keys are encrypted within the database, meaning that if your database is compromised,\n  your API keys will not be.\n</Banner>\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  If you change your `PAYLOAD_SECRET`, you will need to regenerate your API keys.\n  <br />\n  The secret key is used to encrypt the API keys, so if you change the secret, existing API keys will no longer be valid.\n</Banner>\n\n#### Authenticating via API Key\n\nTo authenticate REST or GraphQL API requests using an API key, set the `Authorization` header. The header is case-sensitive and needs the slug of the `auth.useAPIKey` enabled collection, then \" API-Key \", followed by the `apiKey` that has been assigned. Payload's built-in middleware will then assign the user document to `req.user` and handle requests with the proper access control. By doing this, Payload recognizes the request being made as a request by the user associated with that API key.\n\n**For example, using Fetch:**\n\n```ts\nimport User from '../collections/User'\n\nconst response = await fetch('http://localhost:3000/api/pages', {\n  headers: {\n    Authorization: `${User.slug} API-Key ${YOUR_API_KEY}`,\n  },\n})\n```\n\nPayload ensures that the same, uniform access control is used across all authentication strategies. This enables you to utilize your existing access control configurations with both API keys and the standard email/password authentication. This consistency can aid in maintaining granular control over your API keys.\n\n#### API Key _Only_ Authentication\n\nIf you want to use API keys as the only authentication method for a collection, you can disable the default local strategy by setting `disableLocalStrategy` to `true` on the collection's `auth` property. This will disable the ability to authenticate with email and password, and will only allow for authentication via API key.\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Customers: CollectionConfig = {\n  slug: 'customers',\n  auth: {\n    useAPIKey: true,\n    disableLocalStrategy: true,\n  },\n}\n```\n\n### Forgot Password\n\nYou can customize how the Forgot Password workflow operates with the following options on the `auth.forgotPassword` property:\n\n**`generateEmailHTML`**\n\nFunction that accepts one argument, containing `{ req, token, user }`, that allows for overriding the HTML within emails that are sent to users attempting to reset their password. The function should return a string that supports HTML, which can be a full HTML email.\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  HTML templating can be used to create custom email templates, inline CSS automatically, and more.\n  You can make a reusable function that standardizes all email sent from Payload, which makes\n  sending custom emails more DRY. Payload doesn't ship with an HTML templating engine, so you are\n  free to choose your own.\n</Banner>\n\nExample:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Customers: CollectionConfig = {\n  slug: 'customers',\n  auth: {\n    forgotPassword: {\n      // highlight-start\n      generateEmailHTML: ({ req, token, user }) => {\n        // Use the token provided to allow your user to reset their password\n        const resetPasswordURL = `https://yourfrontend.com/reset-password?token=${token}`\n\n        return `\n          <!doctype html>\n          <html>\n            <body>\n              <h1>Here is my custom email template!</h1>\n              <p>Hello, ${user.email}!</p>\n              <p>Click below to reset your password.</p>\n              <p>\n                <a href=\"${resetPasswordURL}\">${resetPasswordURL}</a>\n              </p>\n            </body>\n          </html>\n        `\n      },\n      // highlight-end\n    },\n  },\n}\n```\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  If you specify a different URL to send your users to for resetting their password, such as a page\n  on the frontend of your app or similar, you need to handle making the call to the Payload REST or\n  GraphQL reset-password operation yourself on your frontend, using the token that was provided for\n  you. Above, it was passed via query parameter.\n</Banner>\n\n**`generateEmailSubject`**\n\nSimilarly to the above `generateEmailHTML`, you can also customize the subject of the email. The function argument are the same but you can only return a string - not HTML.\n\nExample:\n\n```ts\n{\n  slug: 'customers',\n  auth: {\n    forgotPassword: {\n      // highlight-start\n      generateEmailSubject: ({ req, user }) => {\n        return `Hey ${user.email}, reset your password!`;\n      }\n      // highlight-end\n    }\n  }\n}\n```\n\n### Email Verification\n\nIf you'd like to require email verification before a user can successfully log in, you can enable it by passing `true` or an `options` object to `auth.verify`. The following options are available:\n\n**`generateEmailHTML`**\n\nFunction that accepts one argument, containing `{ req, token, user }`, that allows for overriding the HTML within emails that are sent to users indicating how to validate their account. The function should return a string that supports HTML, which can optionally be a full HTML email.\n\nExample:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Customers: CollectionConfig = {\n  slug: 'customers',\n  auth: {\n    verify: {\n      // highlight-start\n      generateEmailHTML: ({ req, token, user }) => {\n        // Use the token provided to allow your user to verify their account\n        const url = `https://yourfrontend.com/verify?token=${token}`\n\n        return `Hey ${user.email}, verify your email by clicking here: ${url}`\n      },\n      // highlight-end\n    },\n  },\n}\n```\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  If you specify a different URL to send your users to for email verification, such as a page on the\n  frontend of your app or similar, you need to handle making the call to the Payload REST or GraphQL\n  verification operation yourself on your frontend, using the token that was provided for you.\n  Above, it was passed via query parameter.\n</Banner>\n\n**`generateEmailSubject`**\n\nSimilarly to the above `generateEmailHTML`, you can also customize the subject of the email. The function argument are the same but you can only return a string - not HTML.\n\nExample:\n\n```ts\n{\n  slug: 'customers',\n  auth: {\n    verify: {\n      // highlight-start\n      generateEmailSubject: ({ req, user }) => {\n        return `Hey ${user.email}, reset your password!`;\n      }\n      // highlight-end\n    }\n  }\n}\n```\n\n### Strategies\n\nAs of Payload `1.0.0`, you can add additional authentication strategies to Payload easily by passing them to your collection's `auth.strategies` array.\n\nBehind the scenes, Payload uses PassportJS to power its local authentication strategy, so most strategies listed on the PassportJS website will work seamlessly. Combined with adding custom components to the admin panel's `Login` view, you can create advanced authentication strategies directly within Payload.\n\n<Banner type=\"warning\">\n  This is an advanced feature, so only attempt this if you are an experienced developer. Otherwise,\n  just let Payload's built-in authentication handle user auth for you.\n</Banner>\n\nThe `strategies` property is an array that takes objects with the following properties:\n\n**`strategy`**\n\nThis property can accept a Passport strategy directly, or you can pass a function that takes a `payload` argument, and returns a Passport strategy.\n\n**`name`**\n\nIf you pass a strategy to the `strategy` property directly, the `name` property is optional and allows you to override the strategy's built-in name.\n\nHowever, if you pass a function to `strategy`, `name` is a required property.\n\nIn either case, Payload will prefix the strategy name with the collection `slug` that the strategy is passed to.\n\n### Admin autologin\n\nFor testing and demo purposes you may want to skip forcing the admin user to login in order to access the panel.\nThe `admin.autologin` property is used to configure the how visitors are handled when accessing the admin panel.\nThe default is that all users will have to login and this should not be enabled for environments where data needs to protected.\n\n#### autoLogin Options\n\n| Option            | Description                                                                                                     |\n| ----------------- | --------------------------------------------------------------------------------------------------------------- |\n| **`email`**       | The email address of the user to login as                                                                       |\n| **`password`**    | The password of the user to login as                                                                            |\n| **`prefillOnly`** | If set to true, the login credentials will be prefilled but the user will still need to click the login button. |\n\nThe recommended way to use this feature is behind an environment variable to ensure it is disabled when in production.\n\n**Example:**\n\n```ts\nexport default buildConfig({\n  admin: {\n    user: 'users',\n    // highlight-start\n    autoLogin:\n      process.env.PAYLOAD_PUBLIC_ENABLE_AUTOLOGIN === 'true'\n        ? {\n            email: 'test@example.com',\n            password: 'test',\n            prefillOnly: true,\n          }\n        : false,\n    // highlight-end\n  },\n  collections: [\n    /** */\n  ],\n})\n```\n",
            "desc": "Enable and customize options in the Authentication config for features including Forgot Password, Login Attempts, API key usage and more.",
            "headings": [
              {
                "id": "options",
                "level": 2,
                "text": "Options"
              },
              {
                "id": "api-keys",
                "level": 3,
                "text": "API keys"
              },
              {
                "id": "forgot-password",
                "level": 3,
                "text": "Forgot Password"
              },
              {
                "id": "email-verification",
                "level": 3,
                "text": "Email Verification"
              },
              {
                "id": "strategies",
                "level": 3,
                "text": "Strategies"
              },
              {
                "id": "admin-autologin",
                "level": 3,
                "text": "Admin autologin"
              }
            ],
            "keywords": "authentication, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Config",
            "order": 20,
            "title": "Authentication Config"
          },
          {
            "slug": "operations",
            "content": "\nEnabling Authentication on a Collection automatically exposes additional auth-based operations in the Local, REST, and GraphQL APIs.\n\n### Access\n\nThe Access operation returns what a logged in user can and can't do with the collections and globals that are registered via your config. This data can be immensely helpful if your app needs to show and hide certain features based on access control, as the Payload Admin panel does.\n\n**REST API endpoint**:\n\n`GET http://localhost:3000/api/access`\n\nExample response:\n\n```ts\n{\n  canAccessAdmin: true,\n  collections: {\n    pages: {\n      create: {\n        permission: true,\n      },\n      read: {\n        permission: true,\n      },\n      update: {\n        permission: true,\n      },\n      delete: {\n        permission: true,\n      },\n      fields: {\n        title: {\n          create: {\n            permission: true,\n          },\n          read: {\n            permission: true,\n          },\n          update: {\n            permission: true,\n          },\n        }\n      }\n    }\n  }\n}\n```\n\n**Example GraphQL Query**:\n\n```graphql\nquery {\n  Access {\n    pages {\n      read {\n        permission\n      }\n    }\n  }\n}\n```\n\nDocument access can also be queried on a collection/global basis. Access on a global can queried like `http://localhost:3000/api/global-slug/access`, Collection document access can be queried like `http://localhost:3000/api/collection-slug/access/:id`.\n\n### Me\n\nReturns either a logged in user with token or null when there is no logged in user.\n\n**REST API endpoint**:\n\n`GET http://localhost:3000/api/[collection-slug]/me`\n\nExample response:\n\n```ts\n{\n  user: { // The JWT \"payload\" ;) from the logged in user\n    email: 'dev@payloadcms.com',\n    createdAt: \"2020-12-27T21:16:45.645Z\",\n    updatedAt: \"2021-01-02T18:37:41.588Z\",\n    id: \"5ae8f9bde69e394e717c8832\"\n  },\n  token: '34o4345324...', // The token that can be used to authenticate the user\n  exp: 1609619861, // Unix timestamp representing when the user's token will expire\n}\n```\n\n**Example GraphQL Query**:\n\n```graphql\nquery {\n  me[collection-singular-label] {\n    user {\n      email\n    }\n    exp\n  }\n}\n```\n\n### Login\n\nAccepts an `email` and `password`. On success, it will return the logged in user as well as a token that can be used to authenticate. In the GraphQL and REST APIs, this operation also automatically sets an HTTP-only cookie including the user's token. If you pass an Express `res` to the Local API operation, Payload will set a cookie there as well.\n\n**Example REST API login**:\n\n```ts\nconst res = await fetch('http://localhost:3000/api/[collection-slug]/login', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    email: 'dev@payloadcms.com',\n    password: 'this-is-not-our-password...or-is-it?',\n  }),\n})\n\nconst json = await res.json()\n\n// JSON will be equal to the following:\n/*\n{\n  user: {\n    email: 'dev@payloadcms.com',\n    createdAt: \"2020-12-27T21:16:45.645Z\",\n    updatedAt: \"2021-01-02T18:37:41.588Z\",\n    id: \"5ae8f9bde69e394e717c8832\"\n  },\n  token: '34o4345324...',\n  exp: 1609619861\n}\n*/\n```\n\n**Example GraphQL Mutation**:\n\n```graphql\nmutation {\n  login[collection-singular-label](email: \"dev@payloadcms.com\", password: \"yikes\") {\n    user {\n      email\n    }\n    exp\n    token\n  }\n}\n```\n\n**Example Local API login**:\n\n```ts\nconst result = await payload.login({\n  collection: '[collection-slug]',\n  data: {\n    email: 'dev@payloadcms.com',\n    password: 'get-out',\n  },\n})\n```\n\n### Logout\n\nAs Payload sets HTTP-only cookies, logging out cannot be done by just removing a cookie in JavaScript, as HTTP-only cookies are inaccessible by JS within the browser. So, Payload exposes a `logout` operation to delete the token in a safe way.\n\n**Example REST API logout**:\n\n```ts\nconst res = await fetch('http://localhost:3000/api/[collection-slug]/logout', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n```\n\n**Example GraphQL Mutation**:\n\n```\nmutation {\n  logout[collection-singular-label]\n}\n```\n\n### Refresh\n\nAllows for \"refreshing\" JWTs. If your user has a token that is about to expire, but the user is still active and using the app, you might want to use the `refresh` operation to receive a new token by executing this operation via the authenticated user.\n\nThis operation requires a non-expired token to send back a new one. If the user's token has already expired, you will need to allow them to log in again to retrieve a new token.\n\nIf successful, this operation will automatically renew the user's HTTP-only cookie and will send back the updated token in JSON.\n\n**Example REST API token refresh**:\n\n```ts\nconst res = await fetch('http://localhost:3000/api/[collection-slug]/refresh-token', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\nconst json = await res.json()\n\n// JSON will be equal to the following:\n/*\n{\n  user: {\n    email: 'dev@payloadcms.com',\n    createdAt: \"2020-12-27T21:16:45.645Z\",\n    updatedAt: \"2021-01-02T18:37:41.588Z\",\n    id: \"5ae8f9bde69e394e717c8832\"\n  },\n  refreshedToken: '34o4345324...',\n  exp: 1609619861\n}\n*/\n```\n\n**Example GraphQL Mutation**:\n\n```\nmutation {\n  refreshToken[collection-singular-label] {\n    user {\n      email\n    }\n    refreshedToken\n  }\n}\n```\n\n### Verify by Email\n\nIf your collection supports email verification, the Verify operation will be exposed which accepts a verification token and sets the user's `_verified` property to `true`, thereby allowing the user to authenticate with the Payload API.\n\n**Example REST API user verification**:\n\n```ts\nconst res = await fetch(`http://localhost:3000/api/[collection-slug]/verify/${TOKEN_HERE}`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n```\n\n**Example GraphQL Mutation**:\n\n```graphql\nmutation {\n  verifyEmail[collection-singular-label](token: \"TOKEN_HERE\")\n}\n```\n\n**Example Local API verification**:\n\n```ts\nconst result = await payload.verifyEmail({\n  collection: '[collection-slug]',\n  token: 'TOKEN_HERE',\n})\n```\n\n### Unlock\n\nIf a user locks themselves out and you wish to deliberately unlock them, you can utilize the Unlock operation. The Admin panel features an Unlock control automatically for all collections that feature max login attempts, but you can programmatically unlock users as well by using the Unlock operation.\n\nTo restrict who is allowed to unlock users, you can utilize the [`unlock`](../access-control/overview#unlock) access control function.\n\n**Example REST API unlock**:\n\n```ts\nconst res = await fetch(`http://localhost:3000/api/[collection-slug]/unlock`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    email: 'dev@payloadcms.com',\n  }),\n})\n```\n\n**Example GraphQL Mutation**:\n\n```\nmutation {\n  unlock[collection-singular-label](email: \"dev@payloadcms.com\")\n}\n```\n\n**Example Local API unlock**:\n\n```ts\nconst result = await payload.unlock({\n  collection: '[collection-slug]',\n  data: {\n    email: 'dev@payloadcms.com',\n  },\n})\n```\n\n### Forgot Password\n\nPayload comes with built-in forgot password functionality. Submitting an email address to the Forgot Password operation will generate an email and send it to the respective email address with a link to reset their password.\n\nThe link to reset the user's password contains a token which is what allows the user to securely reset their password.\n\nBy default, the Forgot Password operations send users to the Payload Admin panel to reset their password, but you can customize the generated email to send users to the frontend of your app instead by [overriding the email HTML](../authentication/config#forgot-password).\n\n**Example REST API Forgot Password**:\n\n```ts\nconst res = await fetch(`http://localhost:3000/api/[collection-slug]/forgot-password`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    email: 'dev@payloadcms.com',\n  }),\n})\n```\n\n**Example GraphQL Mutation**:\n\n```\nmutation {\n  forgotPassword[collection-singular-label](email: \"dev@payloadcms.com\")\n}\n```\n\n**Example Local API forgot password**:\n\n```ts\nconst token = await payload.forgotPassword({\n  collection: '[collection-slug]',\n  data: {\n    email: 'dev@payloadcms.com',\n  },\n  disableEmail: false, // you can disable the auto-generation of email via local API\n})\n```\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  You can stop the reset-password email from being sent via using the local API. This is helpful if\n  you need to create user accounts programmatically, but not set their password for them. This\n  effectively generates a reset password token which you can then use to send to a page you create,\n  allowing a user to \"complete\" their account by setting their password. In the background, you'd\n  use the token to \"reset\" their password.\n</Banner>\n\n### Reset Password\n\nAfter a user has \"forgotten\" their password and a token is generated, that token can be used to send to the reset password operation along with a new password which will allow the user to reset their password securely.\n\n**Example REST API Reset Password**:\n\n```ts\nconst res = await fetch(`http://localhost:3000/api/[collection-slug]/reset-password`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    token: 'TOKEN_GOES_HERE'\n    password: 'not-today',\n  }),\n});\n\nconst json = await res.json();\n\n// JSON will be equal to the following:\n/*\n{\n  user: {\n    email: 'dev@payloadcms.com',\n    createdAt: \"2020-12-27T21:16:45.645Z\",\n    updatedAt: \"2021-01-02T18:37:41.588Z\",\n    id: \"5ae8f9bde69e394e717c8832\"\n  },\n  token: '34o4345324...',\n  exp: 1609619861\n}\n*/\n```\n\n**Example GraphQL Mutation**:\n\n```graphql\nmutation {\n  resetPassword[collection-singular-label](token: \"TOKEN_GOES_HERE\", password: \"not-today\")\n}\n```\n",
            "desc": "Enabling Authentication automatically makes key operations available such as Login, Logout, Verify, Unlock, Reset Password and more.",
            "headings": [
              {
                "id": "access",
                "level": 3,
                "text": "Access"
              },
              {
                "id": "me",
                "level": 3,
                "text": "Me"
              },
              {
                "id": "login",
                "level": 3,
                "text": "Login"
              },
              {
                "id": "logout",
                "level": 3,
                "text": "Logout"
              },
              {
                "id": "refresh",
                "level": 3,
                "text": "Refresh"
              },
              {
                "id": "verify-by-email",
                "level": 3,
                "text": "Verify by Email"
              },
              {
                "id": "unlock",
                "level": 3,
                "text": "Unlock"
              },
              {
                "id": "forgot-password",
                "level": 3,
                "text": "Forgot Password"
              },
              {
                "id": "reset-password",
                "level": 3,
                "text": "Reset Password"
              }
            ],
            "keywords": "authentication, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Operations",
            "order": 30,
            "title": "Authentication Operations"
          },
          {
            "slug": "using-middleware",
            "content": "\nBecause Payload uses your existing Express server, you are free to add whatever logic you need to your app through endpoints of your own. However, Payload does not add its middleware to your Express app itself—instead, it scopes all of its middleware to Payload-specific routers.\n\nThis approach has a ton of benefits - it's great for isolation of concerns and limiting scope, but it also means that your additional routes won't have access to Payload's user authentication.\n\n<Banner type=\"success\">\n  You can make full use of Payload's built-in authentication within your own custom Express\n  endpoints by adding Payload's authentication middleware.\n</Banner>\n\n<Banner type=\"warning\">\n  Payload must be initialized before the `payload.authenticate` middleware can be used. This is done\n  by calling `payload.init()` prior to adding the middleware.\n</Banner>\n\nExample in `server.js`:\n\n```ts\nimport express from 'express'\nimport payload from 'payload'\n\nconst app = express()\n\nconst start = async () => {\n  await payload.init({\n    secret: 'PAYLOAD_SECRET_KEY',\n    express: app,\n  })\n\n  const router = express.Router()\n\n  // Note: Payload must be initialized before the `payload.authenticate` middleware can be used\n  router.use(payload.authenticate) // highlight-line\n\n  router.get('/', (req, res) => {\n    if (req.user) {\n      return res.send(`Authenticated successfully as ${req.user.email}.`)\n    }\n\n    return res.send('Not authenticated')\n  })\n\n  app.use('/some-route-here', router)\n\n  app.listen(3000)\n}\n\nstart()\n```\n",
            "desc": "Make full use of Payload's built-in authentication with your own custom Express endpoints by adding Payload's authentication middleware.",
            "headings": [],
            "keywords": "authentication, middleware, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Using the Middleware",
            "order": 40,
            "title": "Using the Payload Auth Middleware"
          }
        ]
      },
      {
        "slug": "Hooks",
        "docs": [
          {
            "slug": "overview",
            "content": "\n<Banner type=\"info\">\n  Hooks are powerful ways to tie into existing Payload actions in order to add your own logic like\n  integrating with third-party APIs, adding auto-generated data, or modifying Payload's base\n  functionality.\n</Banner>\n\n**With Hooks, you can transform Payload from a traditional CMS into a fully-fledged application framework.**\n\nExample uses:\n\n- Integrate user profiles with a third-party CRM such as Salesforce or Hubspot\n- Send a copy of uploaded files to Amazon S3 or similar\n- Automatically add `lastModifiedBy` data to a document to track who changed what over time\n- Encrypt a field's data when it's saved and decrypt it when it's read\n- Send emails when `ContactSubmission`s are created from a public website\n- Integrate with a payment provider like Stripe to automatically process payments when an `Order` is created\n- Securely recalculate order prices on the backend to ensure that the total price for `Order`s that users submit is accurate and valid\n- Generate and store a `lastLoggedIn` date on a user by adding an `afterLogin` hook\n- Add extra data to documents before they are read such as \"average scores\" or similar data that needs to be calculated on the fly\n\nThere are many more use cases for Hooks and the sky is the limit.\n\n#### Async vs. synchronous\n\nAll hooks can be written as either synchronous or asynchronous functions. If the Hook should modify data before a document is updated or created, and it relies on asynchronous actions such as fetching data from a third party, it might make sense to define your Hook as an asynchronous function, so you can be sure that your Hook completes before the operation's lifecycle continues. Async hooks are run in series - so if you have two async hooks defined, the second hook will wait for the first to complete before it starts.\n\nIf your Hook simply performs a side-effect, such as updating a CRM, it might be okay to define it synchronously, so the Payload operation does not have to wait for your hook to complete.\n\n#### Server-only execution\n\nPayload Hooks are only triggered on the server. You can safely [remove your hooks](../admin/excluding-server-code#aliasing-server-only-modules) from your Admin panel's client-side code by customizing the Webpack config, which not only keeps your Admin bundles' filesize small but also ensures that any server-side only code does not cause problems within browser environments.\n\n## Hook Types\n\nYou can specify hooks in the following contexts:\n\n- [Collection Hooks](../hooks/collections)\n- [Field Hooks](../hooks/fields)\n- [Global Hooks](../hooks/globals)\n",
            "desc": "Hooks allow you to add your own logic to Payload, including integrating with third-party APIs, adding auto-generated data, or modifying Payload's base functionality.",
            "headings": [
              {
                "id": "hook-types",
                "level": 2,
                "text": "Hook Types"
              }
            ],
            "keywords": "hooks, overview, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Hooks Overview"
          },
          {
            "slug": "collections",
            "content": "\nCollections feature the ability to define the following hooks:\n\n- [beforeOperation](#beforeoperation)\n- [beforeValidate](#beforevalidate)\n- [beforeChange](#beforechange)\n- [afterChange](#afterchange)\n- [beforeRead](#beforeread)\n- [afterRead](#afterread)\n- [beforeDelete](#beforedelete)\n- [afterDelete](#afterdelete)\n- [afterOperation](#afteroperation)\n\nAdditionally, `auth`-enabled collections feature the following hooks:\n\n- [beforeLogin](#beforelogin)\n- [afterLogin](#afterlogin)\n- [afterLogout](#afterlogout)\n- [afterRefresh](#afterrefresh)\n- [afterMe](#afterme)\n- [afterForgotPassword](#afterforgotpassword)\n- [refresh](#refresh)\n- [me](#me)\n\n## Config\n\nAll collection Hook properties accept arrays of synchronous or asynchronous functions. Each Hook type receives specific arguments and has the ability to modify specific outputs.\n\n`collections/exampleHooks.js`\n\n```ts\nimport { CollectionConfig } from 'payload/types';\n\nexport const ExampleHooks: CollectionConfig = {\n  slug: 'example-hooks',\n  fields: [\n    { name: 'name', type: 'text'},\n  ],\n  hooks: {\n    beforeOperation: [(args) => {...}],\n    beforeValidate: [(args) => {...}],\n    beforeDelete: [(args) => {...}],\n    beforeChange: [(args) => {...}],\n    beforeRead: [(args) => {...}],\n    afterChange: [(args) => {...}],\n    afterRead: [(args) => {...}],\n    afterDelete: [(args) => {...}],\n    afterOperation: [(args) => {...}],\n\n    // Auth-enabled hooks\n    beforeLogin: [(args) => {...}],\n    afterLogin: [(args) => {...}],\n    afterLogout: [(args) => {...}],\n    afterRefresh: [(args) => {...}],\n    afterMe: [(args) => {...}],\n    afterForgotPassword: [(args) => {...}],\n    refresh: [(args) => {...}],\n    me: [(args) => {...}],\n  },\n}\n```\n\n### beforeOperation\n\nThe `beforeOperation` hook can be used to modify the arguments that operations accept or execute side-effects that run before an operation begins.\n\nAvailable Collection operations include `create`, `read`, `update`, `delete`, `login`, `refresh`, and `forgotPassword`.\n\n```ts\nimport { CollectionBeforeOperationHook } from 'payload/types'\n\nconst beforeOperationHook: CollectionBeforeOperationHook = async ({\n  args, // original arguments passed into the operation\n  operation, // name of the operation\n  req, // full express request\n}) => {\n  return args // return modified operation arguments as necessary\n}\n```\n\n### beforeValidate\n\nRuns before the `create` and `update` operations. This hook allows you to add or format data before the incoming data is validated server-side.\n\nPlease do note that this does not run before the client-side validation. If you added a `validate` function, this would be the lifecycle:\n\n1. `validate` runs on the client\n2. if successful, `beforeValidate` runs on the server\n3. `validate` runs on the server\n\n```ts\nimport { CollectionBeforeValidateHook } from 'payload/types'\n\nconst beforeValidateHook: CollectionBeforeValidateHook = async ({\n  data, // incoming data to update or create with\n  req, // full express request\n  operation, // name of the operation ie. 'create', 'update'\n  originalDoc, // original document\n}) => {\n  return data // Return data to either create or update a document with\n}\n```\n\n### beforeChange\n\nImmediately following validation, `beforeChange` hooks will run within `create` and `update` operations. At this stage, you can be confident that the data that will be saved to the document is valid in accordance to your field validations. You can optionally modify the shape of data to be saved.\n\n```ts\nimport { CollectionBeforeChangeHook } from 'payload/types'\n\nconst beforeChangeHook: CollectionBeforeChangeHook = async ({\n  data, // incoming data to update or create with\n  req, // full express request\n  operation, // name of the operation ie. 'create', 'update'\n  originalDoc, // original document\n}) => {\n  return data // Return data to either create or update a document with\n}\n```\n\n### afterChange\n\nAfter a document is created or updated, the `afterChange` hook runs. This hook is helpful to recalculate statistics such as total sales within a global, syncing user profile changes to a CRM, and more.\n\n```ts\nimport { CollectionAfterChangeHook } from 'payload/types'\n\nconst afterChangeHook: CollectionAfterChangeHook = async ({\n  doc, // full document data\n  req, // full express request\n  previousDoc, // document data before updating the collection\n  operation, // name of the operation ie. 'create', 'update'\n}) => {\n  return doc\n}\n```\n\n### beforeRead\n\nRuns before `find` and `findByID` operations are transformed for output by `afterRead`. This hook fires before hidden fields are removed and before localized fields are flattened into the requested locale. Using this Hook will provide you with all locales and all hidden fields via the `doc` argument.\n\n```ts\nimport { CollectionBeforeReadHook } from 'payload/types'\n\nconst beforeReadHook: CollectionBeforeReadHook = async ({\n  doc, // full document data\n  req, // full express request\n  query, // JSON formatted query\n}) => {\n  return doc\n}\n```\n\n### afterRead\n\nRuns as the last step before documents are returned. Flattens locales, hides protected fields, and removes fields that users do not have access to.\n\n```ts\nimport { CollectionAfterReadHook } from 'payload/types'\n\nconst afterReadHook: CollectionAfterReadHook = async ({\n  doc, // full document data\n  req, // full express request\n  query, // JSON formatted query\n  findMany, // boolean to denote if this hook is running against finding one, or finding many\n}) => {\n  return doc\n}\n```\n\n### beforeDelete\n\nRuns before the `delete` operation. Returned values are discarded.\n\n```ts\nimport { CollectionBeforeDeleteHook } from 'payload/types';\n\nconst beforeDeleteHook: CollectionBeforeDeleteHook = async ({\n  req, // full express request\n  id, // id of document to delete\n}) => {...}\n```\n\n### afterDelete\n\nRuns immediately after the `delete` operation removes records from the database. Returned values are discarded.\n\n```ts\nimport { CollectionAfterDeleteHook } from 'payload/types';\n\nconst afterDeleteHook: CollectionAfterDeleteHook = async ({\n  req, // full express request\n  id, // id of document to delete\n  doc, // deleted document\n}) => {...}\n```\n\n### afterOperation\n\nThe `afterOperation` hook can be used to modify the result of operations or execute side-effects that run after an operation has completed.\n\nAvailable Collection operations include `create`, `find`, `findByID`, `update`, `updateByID`, `delete`, `deleteByID`, `login`, `refresh`, and `forgotPassword`.\n\n```ts\nimport { CollectionAfterOperationHook } from 'payload/types'\n\nconst afterOperationHook: CollectionAfterOperationHook = async ({\n  args, // arguments passed into the operation\n  operation, // name of the operation\n  req, // full express request\n  result, // the result of the operation, before modifications\n}) => {\n  return result // return modified result as necessary\n}\n```\n\n### beforeLogin\n\nFor auth-enabled Collections, this hook runs during `login` operations where a user with the provided credentials exist, but before a token is generated and added to the response. You can optionally modify the user that is returned, or throw an error in order to deny the login operation.\n\n```ts\nimport { CollectionBeforeLoginHook } from 'payload/types'\n\nconst beforeLoginHook: CollectionBeforeLoginHook = async ({\n  req, // full express request\n  user, // user being logged in\n}) => {\n  return user\n}\n```\n\n### afterLogin\n\nFor auth-enabled Collections, this hook runs after successful `login` operations. You can optionally modify the user that is returned.\n\n```ts\nimport { CollectionAfterLoginHook } from 'payload/types';\n\nconst afterLoginHook: CollectionAfterLoginHook = async ({\n  req, // full express request\n  user, // user that was logged in\n  token, // user token\n}) => {...}\n```\n\n### afterLogout\n\nFor auth-enabled Collections, this hook runs after `logout` operations.\n\n```ts\nimport { CollectionAfterLogoutHook } from 'payload/types';\n\nconst afterLogoutHook: CollectionAfterLogoutHook = async ({\n  req, // full express request\n}) => {...}\n```\n\n### afterRefresh\n\nFor auth-enabled Collections, this hook runs after `refresh` operations.\n\n```ts\nimport { CollectionAfterRefreshHook } from 'payload/types';\n\nconst afterRefreshHook: CollectionAfterRefreshHook = async ({\n  req, // full express request\n  res, // full express response\n  token, // newly refreshed user token\n}) => {...}\n```\n\n### afterMe\n\nFor auth-enabled Collections, this hook runs after `me` operations.\n\n```ts\nimport { CollectionAfterMeHook } from 'payload/types';\n\nconst afterMeHook: CollectionAfterMeHook = async ({\n  req, // full express request\n  response, // response to return\n}) => {...}\n```\n\n### afterForgotPassword\n\nFor auth-enabled Collections, this hook runs after successful `forgotPassword` operations. Returned values are discarded.\n\n```ts\nimport { CollectionAfterForgotPasswordHook } from 'payload/types'\n\nconst afterForgotPasswordHook: CollectionAfterForgotPasswordHook = async ({\n  args, // arguments passed into the operation\n  context, \n  collection, // The collection which this hook is being run on\n}) => {...}\n```\n\n### refresh\n\nFor auth-enabled Collections, this hook allows you to optionally replace the default behavior of the `refresh` operation with your own. If you optionally return a value from your hook, the operation will not perform its own logic and continue.\n\n```ts\nimport type { CollectionRefreshHook } from 'payload/types'\n\nconst myRefreshHook: CollectionRefreshHook = async ({\n  args, // arguments passed into the `refresh` operation\n  user, // the user as queried from the database \n}) => {...}\n```\n\n### me\n\nFor auth-enabled Collections, this hook allows you to optionally replace the default behavior of the `me` operation with your own. If you optionally return a value from your hook, the operation will not perform its own logic and continue.\n\n```ts\nimport type { CollectionMeHook } from 'payload/types'\n\nconst meHook: CollectionMeHook = async ({\n  args, // arguments passed into the `me` operation\n  user, // the user as queried from the database \n}) => {...}\n```\n\n## TypeScript\n\nPayload exports a type for each Collection hook which can be accessed as follows:\n\n```ts\nimport type {\n  CollectionBeforeOperationHook,\n  CollectionBeforeValidateHook,\n  CollectionBeforeChangeHook,\n  CollectionAfterChangeHook,\n  CollectionAfterReadHook,\n  CollectionBeforeReadHook,\n  CollectionBeforeDeleteHook,\n  CollectionAfterDeleteHook,\n  CollectionBeforeLoginHook,\n  CollectionAfterLoginHook,\n  CollectionAfterLogoutHook,\n  CollectionAfterRefreshHook,\n  CollectionAfterMeHook,\n  CollectionAfterForgotPasswordHook,\n  CollectionRefreshHook,\n  CollectionMeHook,\n} from 'payload/types'\n```\n",
            "desc": "You can add hooks to any Collection, several hook types are available including beforeChange, afterRead, afterDelete and more.",
            "headings": [
              {
                "id": "config",
                "level": 2,
                "text": "Config"
              },
              {
                "id": "beforeoperation",
                "level": 3,
                "text": "beforeOperation"
              },
              {
                "id": "beforevalidate",
                "level": 3,
                "text": "beforeValidate"
              },
              {
                "id": "beforechange",
                "level": 3,
                "text": "beforeChange"
              },
              {
                "id": "afterchange",
                "level": 3,
                "text": "afterChange"
              },
              {
                "id": "beforeread",
                "level": 3,
                "text": "beforeRead"
              },
              {
                "id": "afterread",
                "level": 3,
                "text": "afterRead"
              },
              {
                "id": "beforedelete",
                "level": 3,
                "text": "beforeDelete"
              },
              {
                "id": "afterdelete",
                "level": 3,
                "text": "afterDelete"
              },
              {
                "id": "afteroperation",
                "level": 3,
                "text": "afterOperation"
              },
              {
                "id": "beforelogin",
                "level": 3,
                "text": "beforeLogin"
              },
              {
                "id": "afterlogin",
                "level": 3,
                "text": "afterLogin"
              },
              {
                "id": "afterlogout",
                "level": 3,
                "text": "afterLogout"
              },
              {
                "id": "afterrefresh",
                "level": 3,
                "text": "afterRefresh"
              },
              {
                "id": "afterme",
                "level": 3,
                "text": "afterMe"
              },
              {
                "id": "afterforgotpassword",
                "level": 3,
                "text": "afterForgotPassword"
              },
              {
                "id": "refresh",
                "level": 3,
                "text": "refresh"
              },
              {
                "id": "me",
                "level": 3,
                "text": "me"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              }
            ],
            "keywords": "hooks, collections, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Collections",
            "order": 20,
            "title": "Collection Hooks"
          },
          {
            "slug": "fields",
            "content": "\nField-level hooks offer incredible potential for encapsulating your logic. They help to isolate concerns and package up\nfunctionalities to be easily reusable across your projects.\n\n**Example use cases include:**\n\n- Automatically add an `owner` relationship to a Document based on the `req.user.id`\n- Encrypt / decrypt a sensitive field using `beforeValidate` and `afterRead` hooks\n- Auto-generate field data using a `beforeValidate` hook\n- Format incoming data such as kebab-casing a document `slug` with `beforeValidate`\n- Restrict updating a document to only once every X hours using the `beforeChange` hook\n\n**All field types provide the following hooks:**\n\n- [beforeValidate](#beforevalidate)\n- [beforeChange](#beforechange)\n- [afterChange](#afterchange)\n- [afterRead](#afterread)\n\n## Config\n\nExample field configuration:\n\n```ts\nimport { Field } from 'payload/types';\n\nconst ExampleField: Field = {\n  name: 'name',\n  type: 'text',\n  // highlight-start\n  hooks: {\n    beforeValidate: [(args) => {...}],\n    beforeChange: [(args) => {...}],\n    afterChange: [(args) => {...}],\n    afterRead: [(args) => {...}],\n  }\n  // highlight-end\n}\n```\n\n## Arguments and return values\n\nAll field-level hooks are formatted to accept the same arguments, although some arguments may be `undefined` based on\nwhich field hook you are utilizing.\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  It's a good idea to conditionally scope your logic based on which operation is executing. For\n  example, if you are writing a <strong>beforeChange</strong> hook, you may want to perform\n  different logic based on if the current <strong>operation</strong> is <strong>create</strong> or{' '}\n  <strong>update</strong>.\n</Banner>\n\n#### Arguments\n\nField Hooks receive one `args` argument that contains the following properties:\n\n| Option                   | Description                                                                                                                                                                                                           |\n|--------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`data`**               | The data passed to update the document within `create` and `update` operations, and the full document itself in the `afterRead` hook.                                                                                 |\n| **`siblingData`**        | The sibling data passed to a field that the hook is running against.                                                                                                                                                  |\n| **`findMany`**           | Boolean to denote if this hook is running against finding one, or finding many within the `afterRead` hook.                                                                                                           |\n| **`operation`**          | A string relating to which operation the field type is currently executing within. Useful within `beforeValidate`, `beforeChange`, and `afterChange` hooks to differentiate between `create` and `update` operations. |\n| **`originalDoc`**        | The full original document in `update` operations. In the `afterChange` hook, this is the resulting document of the operation.                                                                                        |\n| **`previousDoc`**        | The document before changes were applied, only in `afterChange` hooks.                                                                                                                                                |\n| **`previousSiblingDoc`** | The sibling data of the document before changes being applied, only in `beforeChange` and `afterChange` hook.                                                                                                         |\n| **`req`**                | The Express `request` object. It is mocked for Local API operations.                                                                                                                                                  |\n| **`value`**              | The value of the field.                                                                                                                                                                                               |\n| **`previousValue`**      | The previous value of the field, before changes, only in `beforeChange` and `afterChange` hooks.                                                                                                                      |\n| **`context`**            | Context passed to this hook. More info can be found under [Context](../hooks/context)                                                                                                                              |\n| **`field`**              | The field which the hook is running against.                                                                                                                                                                          |\n| **`collection`**         | The collection which the field belongs to. If the field belongs to a global, this will be null.                                                                                                                       |\n| **`global`**             | The global which the field belongs to. If the field belongs to a collection, this will be null.                                                                                                                       |\n\n#### Return value\n\nAll field hooks can optionally modify the return value of the field before the operation continues. Field Hooks may\noptionally return the value that should be used within the field.\n\n<Banner type=\"warning\">\n  <strong>Important</strong>\n  <br />\n  Due to GraphQL's typed nature, you should never change the type of data that you return from a\n  field, otherwise GraphQL will produce errors. If you need to change the shape or type of data,\n  reconsider Field Hooks and instead evaluate if Collection / Global hooks might suit you better.\n</Banner>\n\n## Examples of Field Hooks\n\nTo better illustrate how field-level hooks can be applied, here are some specific examples. These demonstrate the\nflexibility and potential of field hooks in different contexts. Remember, these examples are just a starting point - the\ntrue potential of field-level hooks lies in their adaptability to a wide array of use cases.\n\n### beforeValidate\n\nRuns before the `update` operation. This hook allows you to pre-process or format field data before it undergoes\nvalidation.\n\n```ts\nimport { Field } from 'payload/types'\n\nconst usernameField: Field = {\n  name: 'username',\n  type: 'text',\n  hooks: {\n    beforeValidate: [({ value }) => {\n      // Trim whitespace and convert to lowercase\n      return value.trim().toLowerCase()\n    }],\n  }\n}\n```\n\nIn this example, the `beforeValidate` hook is used to process the `username` field. The hook takes the incoming value of\nthe field and transforms it by trimming whitespace and converting it to lowercase. This ensures that the username is\nstored in a consistent format in the database.\n\n### beforeChange\n\nImmediately following validation, `beforeChange` hooks will run within `create` and `update` operations. At this stage,\nyou can be confident that the field data that will be saved to the document is valid in accordance to your field\nvalidations.\n\n```ts\nimport { Field } from 'payload/types'\n\nconst emailField: Field = {\n  name: 'email',\n  type: 'email',\n  hooks: {\n    beforeChange: [({ value, operation }) => {\n      if (operation === 'create') {\n        // Perform additional validation or transformation for 'create' operation\n      }\n      return value\n    }],\n  }\n}\n```\n\nIn the `emailField`, the `beforeChange` hook checks the `operation` type. If the operation is `create`, it performs\nadditional validation or transformation on the email field value. This allows for operation-specific logic to be applied\nto the field.\n\n### afterChange\n\nThe `afterChange` hook is executed after a field's value has been changed and saved in the database. This hook is useful\nfor post-processing or triggering side effects based on the new value of the field.\n\n```ts\nimport { Field } from 'payload/types'\n\nconst membershipStatusField: Field = {\n  name: 'membershipStatus',\n  type: 'select',\n  options: [\n    { label: 'Standard', value: 'standard' },\n    { label: 'Premium', value: 'premium' },\n    { label: 'VIP', value: 'vip' }\n  ],\n  hooks: {\n    afterChange: [({ value, previousValue, req }) => {\n      if (value !== previousValue) {\n        // Log or perform an action when the membership status changes\n        console.log(`User ID ${req.user.id} changed their membership status from ${previousValue} to ${value}.`)\n        // Here, you can implement actions that could track conversions from one tier to another\n      }\n    }],\n  }\n}\n```\n\nIn this example, the `afterChange` hook is used with a `membershipStatusField`, which allows users to select their\nmembership level (Standard, Premium, VIP). The hook monitors changes in the membership status. When a change occurs, it\nlogs the update and can be used to trigger further actions, such as tracking conversion from one tier to another or\nnotifying them about changes in their membership benefits.\n\n### afterRead\n\nThe `afterRead` hook is invoked after a field value is read from the database. This is ideal for formatting or\ntransforming the field data for output.\n\n```ts\nimport { Field } from 'payload/types'\n\nconst dateField: Field = {\n  name: 'createdAt',\n  type: 'date',\n  hooks: {\n    afterRead: [({ value }) => {\n      // Format date for display\n      return new Date(value).toLocaleDateString()\n    }],\n  }\n}\n```\n\nHere, the `afterRead` hook for the `dateField` is used to format the date into a more readable format\nusing `toLocaleDateString()`. This hook modifies the way the date is presented to the user, making it more\nuser-friendly.\n\n## TypeScript\n\nPayload exports a type for field hooks which can be accessed and used as follows:\n\n```ts\nimport type { FieldHook } from 'payload/types'\n\n// Field hook type is a generic that takes three arguments:\n// 1: The document type\n// 2: The value type\n// 3: The sibling data type\n\ntype ExampleFieldHook = FieldHook<ExampleDocumentType, string, SiblingDataType>\n\nconst exampleFieldHook: ExampleFieldHook = (args) => {\n  const {\n    value, // Typed as `string` as shown above\n    data, // Typed as a Partial of your ExampleDocumentType\n    siblingData, // Typed as a Partial of SiblingDataType\n    originalDoc, // Typed as ExampleDocumentType\n    operation,\n    req,\n  } = args\n\n  // Do something here...\n\n  return value // should return a string as typed above, undefined, or null\n}\n```\n",
            "desc": "Hooks can be added to any fields, and optionally modify the return value of the field before the operation continues.",
            "headings": [
              {
                "id": "config",
                "level": 2,
                "text": "Config"
              },
              {
                "id": "arguments-and-return-values",
                "level": 2,
                "text": "Arguments and return values"
              },
              {
                "id": "examples-of-field-hooks",
                "level": 2,
                "text": "Examples of Field Hooks"
              },
              {
                "id": "beforevalidate",
                "level": 3,
                "text": "beforeValidate"
              },
              {
                "id": "beforechange",
                "level": 3,
                "text": "beforeChange"
              },
              {
                "id": "afterchange",
                "level": 3,
                "text": "afterChange"
              },
              {
                "id": "afterread",
                "level": 3,
                "text": "afterRead"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              }
            ],
            "keywords": "hooks, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Fields",
            "order": 30,
            "title": "Field Hooks"
          },
          {
            "slug": "globals",
            "content": "\nGlobals feature the ability to define the following hooks:\n\n- [beforeValidate](#beforevalidate)\n- [beforeChange](#beforechange)\n- [afterChange](#afterchange)\n- [beforeRead](#beforeread)\n- [afterRead](#afterread)\n\n## Config\n\nAll Global Hook properties accept arrays of synchronous or asynchronous functions. Each Hook type receives specific arguments and has the ability to modify specific outputs.\n\n`globals/example-hooks.js`\n\n```ts\nimport { GlobalConfig } from 'payload/types';\n\nconst ExampleHooks: GlobalConfig = {\n  slug: 'header',\n  fields: [\n    { name: 'title', type: 'text'},\n  ]\n  hooks: {\n    beforeValidate: [(args) => {...}],\n    beforeChange: [(args) => {...}],\n    beforeRead: [(args) => {...}],\n    afterChange: [(args) => {...}],\n    afterRead: [(args) => {...}],\n  }\n}\n```\n\n### beforeValidate\n\nRuns before the `update` operation. This hook allows you to add or format data before the incoming data is validated.\n\n```ts\nimport { GlobalBeforeValidateHook } from 'payload/types'\n\nconst beforeValidateHook: GlobalBeforeValidateHook = async ({\n  data, // incoming data to update or create with\n  req, // full express request\n  originalDoc, // original document\n}) => {\n  return data // Return data to update the document with\n}\n```\n\n### beforeChange\n\nImmediately following validation, `beforeChange` hooks will run within the `update` operation. At this stage, you can be confident that the data that will be saved to the document is valid in accordance to your field validations. You can optionally modify the shape of data to be saved.\n\n```ts\nimport { GlobalBeforeChangeHook } from 'payload/types'\n\nconst beforeChangeHook: GlobalBeforeChangeHook = async ({\n  data, // incoming data to update or create with\n  req, // full express request\n  originalDoc, // original document\n}) => {\n  return data // Return data to update the document with\n}\n```\n\n### afterChange\n\nAfter a global is updated, the `afterChange` hook runs. Use this hook to purge caches of your applications, sync site data to CRMs, and more.\n\n```ts\nimport { GlobalAfterChangeHook } from 'payload/types'\n\nconst afterChangeHook: GlobalAfterChangeHook = async ({\n  doc, // full document data\n  previousDoc, // document data before updating the global\n  req, // full express request\n}) => {\n  return data\n}\n```\n\n### beforeRead\n\nRuns before `findOne` global operation is transformed for output by `afterRead`. This hook fires before hidden fields are removed and before localized fields are flattened into the requested locale. Using this Hook will provide you with all locales and all hidden fields via the `doc` argument.\n\n```ts\nimport { GlobalBeforeReadHook } from 'payload/types'\n\nconst beforeReadHook: GlobalBeforeReadHook = async ({\n  doc, // full document data\n  req, // full express request\n}) => {...}\n```\n\n### afterRead\n\nRuns as the last step before a global is returned. Flattens locales, hides protected fields, and removes fields that users do not have access to.\n\n```ts\nimport { GlobalAfterReadHook } from 'payload/types'\n\nconst afterReadHook: GlobalAfterReadHook = async ({\n  doc, // full document data\n  req, // full express request\n  findMany, // boolean to denote if this hook is running against finding one, or finding many (useful in versions)\n}) => {...}\n```\n\n## TypeScript\n\nPayload exports a type for each Global hook which can be accessed as follows:\n\n```ts\nimport type {\n  GlobalBeforeValidateHook,\n  GlobalBeforeChangeHook,\n  GlobalAfterChangeHook,\n  GlobalBeforeReadHook,\n  GlobalAfterReadHook,\n} from 'payload/types'\n```\n",
            "desc": "Hooks can be added to any Global and allow you to validate data, flatten locales, hide protected fields, remove fields and more.",
            "headings": [
              {
                "id": "config",
                "level": 2,
                "text": "Config"
              },
              {
                "id": "beforevalidate",
                "level": 3,
                "text": "beforeValidate"
              },
              {
                "id": "beforechange",
                "level": 3,
                "text": "beforeChange"
              },
              {
                "id": "afterchange",
                "level": 3,
                "text": "afterChange"
              },
              {
                "id": "beforeread",
                "level": 3,
                "text": "beforeRead"
              },
              {
                "id": "afterread",
                "level": 3,
                "text": "afterRead"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              }
            ],
            "keywords": "hooks, globals, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Globals",
            "order": 40,
            "title": "Global Hooks"
          },
          {
            "slug": "context",
            "content": "\nThe `context` object in hooks is used to share data across different hooks. The persists throughout the entire lifecycle of a request and is available within every hook. This allows you to add logic to your hooks based on the request state by setting properties to `req.context` and using them elsewhere.\n\n## When to use Context\n\nContext gives you a way forward on otherwise difficult problems such as:\n\n1. **Passing data between hooks**: Needing data in multiple hooks from a 3rd party API, it could be retrieved and used in `beforeChange` and later used again in an `afterChange` hook without having to fetch it twice.\n2. **Preventing infinite loops**: Calling `payload.update()` on the same document that triggered an `afterChange` hook will create an infinite loop, control the flow by assigning a no-op condition to context\n3. **Passing data to local API**: Setting values on the `req.context` and pass it to `payload.create()` you can provide additional data to hooks without adding extraneous fields.\n4. **Passing data between hooks and middleware or custom endpoints**: Hooks could set context across multiple collections and then be used in a final `postMiddleware`.\n\n## How to Use Context\n\nLet's see examples on how context can be used in the first two scenarios mentioned above:\n\n### Passing data between hooks\n\nTo pass data between hooks, you can assign values to context in an earlier hook in the lifecycle of a request and expect it the context in a later hook.\n\nFor example:\n\n```ts\nconst Customer: CollectionConfig = {\n  slug: 'customers',\n  hooks: {\n    beforeChange: [\n      async ({ context, data }) => {\n        // assign the customerData to context for use later\n        context.customerData = await fetchCustomerData(data.customerID)\n        return {\n          ...data,\n          // some data we use here\n          name: context.customerData.name,\n        }\n      },\n    ],\n    afterChange: [\n      async ({ context, doc, req }) => {\n        // use context.customerData without needing to fetch it again\n        if (context.customerData.contacted === false) {\n          createTodo('Call Customer', context.customerData)\n        }\n      },\n    ],\n  },\n  fields: [\n    /* ... */\n  ],\n}\n```\n\n### Preventing infinite loops\n\nLet's say you have an `afterChange` hook, and you want to do a calculation inside the hook (as the document ID needed for the calculation is available in the `afterChange` hook, but not in the `beforeChange` hook). Once that's done, you want to update the document with the result of the calculation.\n\nBad example:\n\n```ts\nconst Customer: CollectionConfig = {\n  slug: 'customers',\n  hooks: {\n    afterChange: [\n      async ({ doc }) => {\n        await payload.update({\n          // DANGER: updating the same slug as the collection in an afterChange will create an infinite loop!\n          collection: 'customers',\n          id: doc.id,\n          data: {\n            ...(await fetchCustomerData(data.customerID)),\n          },\n        })\n      },\n    ],\n  },\n  fields: [\n    /* ... */\n  ],\n}\n```\n\nInstead of the above, we need to tell the `afterChange` hook to not run again if it performs the update (and thus not update itself again). We can solve that with context.\n\nFixed example:\n\n```ts\nconst MyCollection: CollectionConfig = {\n  slug: 'slug',\n  hooks: {\n    afterChange: [\n      async ({ context, doc }) => {\n        // return if flag was previously set\n        if (context.triggerAfterChange === false) {\n          return\n        }\n        await payload.update({\n          collection: contextHooksSlug,\n          id: doc.id,\n          data: {\n            ...(await fetchCustomerData(data.customerID)),\n          },\n          context: {\n            // set a flag to prevent from running again\n            triggerAfterChange: false,\n          },\n        })\n      },\n    ],\n  },\n  fields: [\n    /* ... */\n  ],\n}\n```\n\n## Typing context\n\nThe default typescript interface for `context` is `{ [key: string]: unknown }`. If you prefer a more strict typing in your project or when authoring plugins for others, you can override this using the `declare` syntax.\n\nThis is known as \"type augmentation\" - a TypeScript feature which allows us to add types to existing objects. Simply put this in any .ts or .d.ts file:\n\n```ts\nimport { RequestContext as OriginalRequestContext } from 'payload'\n\ndeclare module 'payload' {\n  // Create a new interface that merges your additional fields with the original one\n  export interface RequestContext extends OriginalRequestContext {\n    myObject?: string\n    // ...\n  }\n}\n```\n\nThis will add a the property `myObject` with a type of string to every context object. Make sure to follow this example correctly, as type augmentation can mess up your types if you do it wrong.\n",
            "desc": "Context allows you to pass in extra data that can be shared between hooks",
            "headings": [
              {
                "id": "when-to-use-context",
                "level": 2,
                "text": "When to use Context"
              },
              {
                "id": "how-to-use-context",
                "level": 2,
                "text": "How to Use Context"
              },
              {
                "id": "passing-data-between-hooks",
                "level": 3,
                "text": "Passing data between hooks"
              },
              {
                "id": "preventing-infinite-loops",
                "level": 3,
                "text": "Preventing infinite loops"
              },
              {
                "id": "typing-context",
                "level": 2,
                "text": "Typing context"
              }
            ],
            "keywords": "hooks, context, payload context, payloadcontext, data, extra data, shared data, shared, extra",
            "label": "Context",
            "order": 50,
            "title": "Context"
          }
        ]
      },
      {
        "slug": "Admin",
        "docs": [
          {
            "slug": "overview",
            "content": "\nPayload dynamically generates a beautiful, fully functional React admin panel to manage your data. It's extremely powerful and can be customized / extended upon easily by swapping in your own React components. You can add additional views, modify how built-in views look / work, swap out Payload branding for your client's, build your own field types and much more.\n\nThe Payload Admin panel can be bundled with our officially supported [Vite](../admin/vite) and [webpack](../admin/webpack) bundlers or you can integrate another bundler following our adapter pattern approach.\nWhen bundled, it is code-split, highly performant (even with 100+ fields), and written fully in TypeScript.\n\n<Banner type=\"success\">\n  The Admin panel is meant to be simple enough to give you a starting point but not bring too much\n  complexity, so that you can easily customize it to suit the needs of your application and your\n  editors.\n</Banner>\n\n<LightDarkImage\n  srcLight=\"https://payloadcms.com/images/docs/admin.jpg\"\n  srcDark=\"https://payloadcms.com/images/docs/admin-dark.jpg\"\n  alt=\"Admin panel with collapsible sidebar\"\n  caption=\"Redesigned admin panel with a collapsible sidebar that's open by default, providing greater extensibility and enhanced horizontal real estate.\"\n/>\n\n## Admin Options\n\nAll options for the Admin panel are defined in your base Payload config file.\n\n| Option            | Description                                                                                                                                                                                                                                                                 |\n| ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `bundler`         | The bundler that you would like to use to bundle the admin panel. Officially supported bundlers: [Webpack](../admin/webpack) and [Vite](../admin/vite).                                                                                                               |\n| `user`            | The `slug` of a Collection that you want be used to log in to the Admin dashboard. [More](../admin/overview#the-admin-user-collection)                                                                                                                                   |\n| `buildPath`       | Specify an absolute path for where to store the built Admin panel bundle used in production. Defaults to `path.resolve(process.cwd(), 'build')`.                                                                                                                            |\n| `meta`            | Base meta data to use for the Admin panel. Included properties are `titleSuffix`, `ogImage`, and `favicon`.                                                                                                                                                                 |\n| `disable`         | If set to `true`, the entire Admin panel will be disabled.                                                                                                                                                                                                                  |\n| `indexHTML`       | Optionally replace the entirety of the `index.html` file used by the Admin panel. Reference the [base index.html file](https://github.com/payloadcms/payload/blob/main/packages/payload/src/admin/index.html) to ensure your replacement has the appropriate HTML elements. |\n| `css`             | Absolute path to a stylesheet that you can use to override / customize the Admin panel styling. [More](../admin/customizing-css).                                                                                                                                        |\n| `scss`            | Absolute path to a Sass variables / mixins stylesheet meant to override Payload styles to make for an easy re-skinning of the Admin panel. [More](../admin/customizing-css#overriding-scss-variables).                                                                   |\n| `dateFormat`      | Global date format that will be used for all dates in the Admin panel. Any valid [date-fns](https://date-fns.org/) format pattern can be used.                                                                                                                              |\n| `avatar`          | Set account profile picture. Options: `gravatar`, `default` or a custom React component.                                                                                                                                                                                    |\n| `autoLogin`       | Used to automate admin log-in for dev and demonstration convenience. [More](../authentication/config).                                                                                                                                                                   |\n| `livePreview`     | Enable real-time editing for instant visual feedback of your front-end application. [More](../live-preview/overview).                                                                                                                                                    |\n| `components`      | Component overrides that affect the entirety of the Admin panel. [More](../admin/components)                                                                                                                                                                             |\n| `webpack`         | Customize the Webpack config that's used to generate the Admin panel. [More](../admin/webpack)                                                                                                                                                                           |\n| `vite`            | Customize the Vite config that's used to generate the Admin panel. [More](../admin/vite)                                                                                                                                                                                 |\n| `logoutRoute`     | The route for the `logout` page.                                                                                                                                                                                                                                            |\n| `inactivityRoute` | The route for the `logout` inactivity page.                                                                                                                                                                                                                                 |\n\n### The Admin User Collection\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  The Payload Admin panel can only be used by one Collection that supports\n  [Authentication](../authentication/overview).\n</Banner>\n\nTo specify which Collection to use to log in to the Admin panel, pass the `admin` options a `user` key equal to the slug of the Collection that you'd like to use.\n\n`payload.config.js`:\n\n```ts\nimport { buildConfig } from 'payload/config'\n\nconst config = buildConfig({\n  admin: {\n    user: 'admins', // highlight-line\n  },\n})\n```\n\nBy default, if you have not specified a Collection, Payload will automatically provide you with a `User` Collection which will be used to access the Admin panel. You can customize or override the fields and settings of the default `User` Collection by passing your own collection using `users` as its `slug` to Payload. When this is done, Payload will use your provided `User` Collection instead of its default version.\n\n**Note: you can use whatever Collection you'd like to access the Admin panel as long as the Collection supports Authentication. It doesn't need to be called `users`!**\n\nFor example, you may wish to have two Collections that both support `Authentication`:\n\n- `admins` - meant to have a higher level of permissions to manage your data and access the Admin panel\n- `customers` - meant for end users of your app that should not be allowed to log into the Admin panel\n\nThis is totally possible. For the above scenario, by specifying `admin: { user: 'admins' }`, your Payload Admin panel will use `admins`. Any users logged in as `customers` will not be able to log in via the Admin panel.\n\n### Light and dark modes\n\nUsers in the admin panel have access to choosing between light mode and dark mode for their editing experience. The setting is managed while logged into the admin UI within the user account page and will be stored with the browser. By default, the operating system preference is detected and used.\n\n### Restricting user access\n\nIf you would like to restrict which users from a single Collection can access the Admin panel, you can use the `admin` access control function. [Click here](../access-control/overview#admin) to learn more.\n",
            "desc": "Manage your data and customize the Admin Panel by swapping in your own React components. Create, modify or remove views, fields, styles and much more.",
            "headings": [
              {
                "id": "admin-options",
                "level": 2,
                "text": "Admin Options"
              },
              {
                "id": "the-admin-user-collection",
                "level": 3,
                "text": "The Admin User Collection"
              },
              {
                "id": "light-and-dark-modes",
                "level": 3,
                "text": "Light and dark modes"
              },
              {
                "id": "restricting-user-access",
                "level": 3,
                "text": "Restricting user access"
              }
            ],
            "keywords": "admin, components, custom, customize, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "The Admin Panel"
          },
          {
            "slug": "components",
            "content": "\nWhile designing the Payload Admin panel, we determined it should be as minimal and straightforward as possible to allow easy customization and control. There are many times where you may want to completely control how a whole view or a field works. You might even want to add in new views entirely. In order for Payload to support this level of customization without introducing versioning / future-proofing issues, Payload provides for a pattern to supply your own React components via your Payload config.\n\nTo swap in your own React component, first, consult the list of available component overrides below. Determine the scope that corresponds to what you are trying to accomplish, and then author your React component accordingly.\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  Custom components will automatically be provided with all props that the default component normally\n  accepts.\n</Banner>\n\n### Base Component Overrides\n\nYou can override a set of admin panel-wide components by providing a component to your base Payload config's `admin.components` property. The following options are available:\n\n| Path                  | Description                                                                                                                                                                                                 |\n| --------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`Nav`**             | Contains the sidebar / mobile menu in its entirety.                                                                                                                                                         |\n| **`BeforeNavLinks`**  | Array of components to inject into the built-in Nav, _before_ the links themselves.                                                                                                                         |\n| **`AfterNavLinks`**   | Array of components to inject into the built-in Nav, _after_ the links.                                                                                                                                     |\n| **`BeforeDashboard`** | Array of components to inject into the built-in Dashboard, _before_ the default dashboard contents.                                                                                                         |\n| **`AfterDashboard`**  | Array of components to inject into the built-in Dashboard, _after_ the default dashboard contents. [Demo](https://github.com/payloadcms/payload/tree/main/test/admin/components/AfterDashboard/index.tsx)   |\n| **`BeforeLogin`**     | Array of components to inject into the built-in Login, _before_ the default login form.                                                                                                                     |\n| **`AfterLogin`**      | Array of components to inject into the built-in Login, _after_ the default login form.                                                                                                                      |\n| **`logout.Button`**   | A custom React component.                                                                                                                                                                                   |\n| **`graphics.Icon`**   | Used as a graphic within the `Nav` component. Often represents a condensed version of a full logo.                                                                                                          |\n| **`graphics.Logo`**   | The full logo to be used in contexts like the `Login` view.                                                                                                                                                 |\n| **`providers`**       | Define your own provider components that will wrap the Payload Admin UI. [More](#custom-providers)                                                                                                          |\n| **`actions`**         | Array of custom components to be rendered in the Payload Admin UI header, providing additional interactivity and functionality.                                                                             |\n| **`views`**           | Override or create new views within the Payload Admin UI. [More](#views)                                                                                                                                    |\n\nHere is a full example showing how to swap some of these components for your own.\n\n`payload.config.js`\n\n```ts\nimport { buildConfig } from 'payload/config'\n\nimport {\n  MyCustomNav,\n  MyCustomLogo,\n  MyCustomIcon,\n  MyCustomAccount,\n  MyCustomDashboard,\n  MyProvider,\n  MyCustomAdminAction,\n} from './customComponents'\n\nexport default buildConfig({\n  admin: {\n    components: {\n      Nav: MyCustomNav,\n      graphics: {\n        Icon: MyCustomIcon,\n        Logo: MyCustomLogo,\n      },\n      actions: [MyCustomAdminAction],\n      views: {\n        Account: MyCustomAccount,\n        Dashboard: MyCustomDashboard,\n      },\n      providers: [MyProvider],\n    },\n  },\n})\n```\n\n#### Views\n\nYou can easily swap entire views with your own by using the `admin.components.views` property. At the root level, Payload renders the following views by default, all of which can be overridden:\n\n| Property           | Description                                                                                                                  |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------- |\n| **`Account`**      | The Account view is used to show the currently logged in user's Account page.                                                |\n| **`Dashboard`**    | The main landing page of the Admin panel.                                                                                    |\n\nTo swap out any of these views, simply pass in your custom component to the `admin.components.views` property of your Payload config. For example:\n\n```ts\n// payload.config.ts\n{\n  // ...\n  admin: {\n    components: {\n      views: {\n        Account: MyCustomAccountView,\n        Dashboard: MyCustomDashboardView,\n      },\n    },\n  },\n}\n```\n\nFor more granular control, pass a configuration object instead. Each view corresponds to its own `<Route />` component in [React Router v5](https://v5.reactrouter.com). Payload exposes all of the properties of React Router:\n\n| Property           | Description                                                                                                                  |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------- |\n| **`Component`** \\* | Pass in the component that should be rendered when a user navigates to this route.                                           |\n| **`path`** \\*      | React Router `path`. [See the React Router docs](https://v5.reactrouter.com/web/api/Route/path-string-string) for more info. |\n| **`exact`**        | React Router `exact` property. [More](https://v5.reactrouter.com/web/api/Route/exact-bool)                                   |\n| **`strict`**       | React Router `strict` property. [More](https://v5.reactrouter.com/web/api/Route/strict-bool)                                 |\n| **`sensitive`**    | React Router `sensitive` property. [More](https://v5.reactrouter.com/web/api/Route/sensitive-bool)                           |\n\n_\\* An asterisk denotes that a property is required._\n\n#### Adding new views\n\nTo add a _new_ view to the Admin Panel, simply add another key to the `views` object with at least a `path` and `Component` property. For example:\n\n```ts\n// payload.config.ts\n{\n  // ...\n  admin: {\n    components: {\n      views: {\n        MyCustomView: {\n          Component: MyCustomView,\n          path: '/my-custom-view',\n        },\n      },\n    },\n  },\n}\n```\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  Routes are cascading. This means that unless explicitly given the `exact` property, they will match on URLs that simply _start_ with the route's path. This is helpful when creating catch-all routes in your application. Alternatively, you could define your nested route _before_ your parent route.\n</Banner>\n\n_For more examples regarding how to customize components, look at the following [examples](https://github.com/payloadcms/payload/tree/main/test/admin/components)._\n\nFor help on how to build your own custom view components, see [building a custom view component](#building-a-custom-view-component).\n\n### Collections\n\nYou can override components on a collection-by-collection basis via the `admin.components` property.\n\n| Path                       | Description                                                                                                            |\n| -------------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n| **`BeforeList`**           | Array of components to inject _before_ the built-in List view                                                          |\n| **`BeforeListTable`**      | Array of components to inject _before_ the built-in List view's table                                                  |\n| **`AfterList`**            | Array of components to inject _after_ the built-in List view                                                           |\n| **`AfterListTable`**       | Array of components to inject _after_ the built-in List view's table                                                   |\n| **`edit.SaveButton`**      | Replace the default `Save` button with a custom component. Drafts must be disabled                                     |\n| **`edit.SaveDraftButton`** | Replace the default `Save Draft` button with a custom component. Drafts must be enabled and autosave must be disabled. |\n| **`edit.PublishButton`**   | Replace the default `Publish` button with a custom component. Drafts must be enabled.                                  |\n| **`edit.PreviewButton`**   | Replace the default `Preview` button with a custom component.                                                          |\n| **`views`**                | Override or create new views within the Payload Admin UI. [More](#collection-views)                                    |\n\nHere is a full example showing how to swap some of these components for your own:\n\n`Collection.ts`\n\n```tsx\nimport * as React from 'react'\n\nimport {\n  CustomSaveButtonProps,\n  CustomSaveDraftButtonProps,\n  CustomPublishButtonType,\n  CustomPreviewButtonProps,\n} from 'payload/types'\n\nexport const CustomSaveButton: CustomSaveButtonProps = ({ DefaultButton, label, save }) => {\n  return <DefaultButton label={label} save={save} />\n}\n\nexport const CustomSaveDraftButton: CustomSaveDraftButtonProps = ({\n  DefaultButton,\n  disabled,\n  label,\n  saveDraft,\n}) => {\n  return <DefaultButton label={label} disabled={disabled} saveDraft={saveDraft} />\n}\n\nexport const CustomPublishButton: CustomPublishButtonType = ({\n  DefaultButton,\n  disabled,\n  label,\n  publish,\n}) => {\n  return <DefaultButton label={label} disabled={disabled} publish={publish} />\n}\n\nexport const CustomPreviewButton: CustomPreviewButtonProps = ({\n  DefaultButton,\n  disabled,\n  label,\n  preview,\n}) => {\n  return <DefaultButton label={label} disabled={disabled} preview={preview} />\n}\n\nexport const MyCollection: SanitizedCollectionConfig = {\n  slug: 'my-collection',\n  admin: {\n    components: {\n      edit: {\n        SaveButton: CustomSaveButton,\n        SaveDraftButton: CustomSaveDraftButton,\n        PublishButton: CustomPublishButton,\n        PreviewButton: CustomPreviewButton,\n      },\n    },\n  }\n}\n```\n\n#### Collection views\n\nTo swap out entire views on collections, you can use the `admin.components.views` property on the collection's config. Payload renders the following views by default, all of which can be overridden:\n\n| Property           | Description                                                                                                                  |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------- |\n| **`Edit`**         | The Edit view is used to edit a single document for a given collection.                                                      |\n| **`List`**         | The List view is used to show a list of documents for a given collection.                                                    |\n\nTo swap out any of these views, simply pass in your custom component to the `admin.components.views` property of your Payload config. This will replace the entire view, including the page breadcrumbs, title, tabs, etc, _as well as all nested routes_.\n\n```ts\n// Collection.ts\n{\n  // ...\n  admin: {\n    components: {\n      views: {\n        Edit: MyCustomEditView,\n        List: MyCustomListView,\n      },\n    },\n  },\n}\n```\n\n_For help on how to build your own custom view components, see [building a custom view component](#building-a-custom-view-component)._\n\n**Customizing Nested Views within 'Edit' in Collections**\n\nThe `Edit` view in collections consists of several nested views, each serving a unique purpose. You can customize these nested views using the `admin.components.views.Edit` property in the collection's configuration. This approach allows you to replace specific nested views while keeping the overall structure of the `Edit` view intact, including the page breadcrumbs, title, tabs, etc.\n\nHere's an example of how you can customize nested views within the `Edit` view in collections, including the use of the `actions` property:\n\n```ts\n// Collection.ts\n{\n  // ...\n  admin: {\n    components: {\n      views: {\n        Edit: {\n          Default: {\n            Component: MyCustomDefaultTab,\n            actions: [CollectionEditButton], // Custom actions for the default edit view\n          },\n          API: {\n            Component: MyCustomAPIView,\n            actions: [CollectionAPIButton], // Custom actions for API view\n          },\n          LivePreview: {\n            Component: MyCustomLivePreviewView,\n            actions: [CollectionLivePreviewButton], // Custom actions for Live Preview\n          },\n          Version: {\n            Component: MyCustomVersionView,\n            actions: [CollectionVersionButton], // Custom actions for Version view\n          },\n          Versions: {\n            Component: MyCustomVersionsView,\n            actions: [CollectionVersionsButton], // Custom actions for Versions view\n          },\n        },\n        List: {\n          actions: [CollectionListButton],\n        },\n      },\n    },\n  },\n}\n```\n\n**Adding New Tabs to 'Edit' View**\n\nYou can also add _new_ tabs to the `Edit` view by adding another key to the `components.views.Edit[key]` object with a `path` and `Component` property. See [Custom Tabs](#custom-tabs) for more information.\n\n### Globals\n\nAs with Collections, you can override components on a global-by-global basis via the `admin.components` property.\n\n| Path                           | Description                                                                                                            |\n| ------------------------------ | ---------------------------------------------------------------------------------------------------------------------- |\n| **`elements.SaveButton`**      | Replace the default `Save` button with a custom component. Drafts must be disabled                                     |\n| **`elements.SaveDraftButton`** | Replace the default `Save Draft` button with a custom component. Drafts must be enabled and autosave must be disabled. |\n| **`elements.PublishButton`**   | Replace the default `Publish` button with a custom component. Drafts must be enabled.                                  |\n| **`elements.PreviewButton`**   | Replace the default `Preview` button with a custom component.                                                          |\n| **`views`**                    | Override or create new views within the Payload Admin UI. [More](#global-views)                                        |\n\n#### Global views\n\nTo swap out views for globals, you can use the `admin.components.views` property on the global's config. Payload renders the following views by default, all of which can be overridden:\n\n| Property           | Description                                                                                                                  |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------- |\n| **`Edit`**         | The Edit view is used to edit a single document for a given Global.                                                          |\n\nTo swap out any of these views, simply pass in your custom component to the `admin.components.views` property of your Payload config. This will replace the entire view, including the page breadcrumbs, title, and tabs, _as well as all nested views_.\n\n```ts\n// Global.ts\n{\n  // ...\n  admin: {\n    components: {\n      views: {\n        Edit: MyCustomEditView,\n      },\n    },\n  },\n}\n```\n\n_For help on how to build your own custom view components, see [building a custom view component](#building-a-custom-view-component)._\n\n**Customizing Nested Views within 'Edit' in Globals**\n\nSimilar to collections, Globals allow for detailed customization within the `Edit` view. This includes the ability to swap specific nested views while maintaining the overall structure of the `Edit` view. You can use the `admin.components.views.Edit` property in the Globals configuration to achieve this, and this will only replace the nested view, leaving the page breadcrumbs, title, and tabs intact.\n\nHere's how you can customize nested views within the `Edit` view in Globals, including the use of the `actions` property:\n\n```ts\n// Global.ts\n{\n  // ...\n  admin: {\n    components: {\n      views: {\n        Edit: {\n          Default: {\n            Component: MyCustomGlobalDefaultTab,\n            actions: [GlobalEditButton], // Custom actions for the default edit view\n          },\n          API: {\n            Component: MyCustomGlobalAPIView,\n            actions: [GlobalAPIButton], // Custom actions for API view\n          },\n          LivePreview: {\n            Component: MyCustomGlobalLivePreviewView,\n            actions: [GlobalLivePreviewButton], // Custom actions for Live Preview\n          },\n          Version: {\n            Component: MyCustomGlobalVersionView,\n            actions: [GlobalVersionButton], // Custom actions for Version view\n          },\n          Versions: {\n            Component: MyCustomGlobalVersionsView,\n            actions: [GlobalVersionsButton], // Custom actions for Versions view\n          },\n        },\n      },\n    },\n  },\n}\n```\n\nYou can also add _new_ tabs to the `Edit` view by adding another key to the `components.views.Edit[key]` object with a `path` and `Component` property. See [Custom Tabs](#custom-tabs) for more information.\n\n### Custom Tabs\n\nYou can easily swap individual collection or global edit views. To do this, pass an _object_ to the `admin.components.views.Edit` property of the config. Payload renders the following views by default, all of which can be overridden:\n\n| Property           | Description                                                                                                                  |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------------- |\n| **`Default`**      | The Default view is the primary view in which your document is edited.                                                       |\n| **`Versions`**     | The Versions view is used to view the version history of a single document. [More details](../versions)                      |\n| **`Version`**      | The Version view is used to view a single version of a single document for a given collection. [More details](../versions).  |\n| **`API`**          | The API view is used to display the REST API JSON response for a given document.                                             |\n| **`LivePreview`**  | The LivePreview view is used to display the Live Preview interface. [More details](../live-preview)                          |\n\nHere is an example:\n\n```ts\n// Collection.ts or Global.ts\nexport const MyCollection: SanitizedCollectionConfig = {\n  slug: 'my-collection',\n  admin: {\n    components: {\n      views: {\n        Edit: { // You can also define `components.views.Edit` as a component, this will override _all_ nested views\n          Default: MyCustomDefaultTab,\n          Versions: MyCustomVersionsTab,\n          Version: MyCustomVersionTab,\n          API: MyCustomAPITab,\n          LivePreview: MyCustomLivePreviewTab,\n        },\n      },\n    },\n  },\n}\n```\n\nTo add a _new_ tab to the `Edit` view, simply add another key to `components.views.Edit[key]` with at least a `path` and `Component` property. For example:\n\n```ts\n// `Collection.ts` or `Global.ts`\nexport const MyCollection: SanitizedCollectionConfig = {\n  slug: 'my-collection',\n  admin: {\n    components: {\n      views: {\n        Edit: {\n          MyCustomTab: {\n            Component: MyCustomTab,\n            path: '/my-custom-tab',\n            // You an swap the entire tab component out for your own\n            Tab: MyCustomTab\n          },\n          AnotherCustomView: {\n            Component: AnotherCustomView,\n            path: '/another-custom-view',\n            // Or you can use the default tab component and just pass in your own label and href\n            Tab: {\n              label: 'Another Custom View',\n              href: '/another-custom-view',\n            }\n          },\n        },\n      },\n    },\n  },\n}\n```\n\n### Building a custom view component\n\nYour custom view components will be given all the props that a React Router `<Route />` typically would receive, as well as two props from Payload:\n\n| Prop                    | Description                                                                  |\n| ----------------------- | ---------------------------------------------------------------------------- |\n| **`user`**              | The currently logged in user. Will be `null` if no user is logged in.        |\n| **`canAccessAdmin`** \\* | If the currently logged in user is allowed to access the admin panel or not. |\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  It's up to you to secure your custom views. If your view requires a user to be logged in or to\n  have certain access rights, you should handle that within your view component yourself.\n</Banner>\n\n#### Example\n\nYou can find examples of custom views in the [Payload source code `/test/admin/components/views` folder](https://github.com/payloadcms/payload/tree/main/test/admin/components/views). There, you'll find two custom views:\n\n1. A custom view that uses the `DefaultTemplate`, which is the built-in Payload template that displays the sidebar and \"eyebrow nav\"\n1. A custom view that uses the `MinimalTemplate` - which is just a centered template used for things like logging in or out\n\nTo see how to pass in your custom views to create custom views of your own, take a look at the `admin.components.views` property of the [Payload test admin config](https://github.com/payloadcms/payload/blob/main/test/admin/config.ts).\n\n### Fields\n\nAll Payload fields support the ability to swap in your own React components. So, for example, instead of rendering a default Text input, you might need to render a color picker that provides the editor with a custom color picker interface to restrict the data entered to colors only.\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  Don't see a built-in field type that you need? Build it! Using a combination of custom validation\n  and custom components, you can override the entirety of how a component functions within the admin\n  panel and effectively create your own field type.\n</Banner>\n\n**Fields support the following custom components:**\n\n| Component    | Description                                                                                                                 |\n| ------------ | --------------------------------------------------------------------------------------------------------------------------- |\n| **`Filter`** | Override the text input that is presented in the `List` view when a user is filtering documents by the customized field.    |\n| **`Cell`**   | Used in the `List` view's table to represent a table-based preview of the data stored in the field. [More](#cell-component) |\n| **`Field`**  | Swap out the field itself within all `Edit` views. [More](#field-component)                                                 |\n\nAs an alternative to replacing the entire Field component, you may want to keep the majority of the default Field component and only swap components within. This allows you to replace the **`Label`** or **`Error`** within a field component or add additional components inside the field with **`beforeInput`** or **`afterInput`**. **`beforeInput`** and **`afterInput`** are allowed in any fields that don't contain other fields, except [UI](../fields/ui) and [Rich Text](../fields/rich-text).\n\n| Component         | Description                                                                                                     |\n| ----------------- | --------------------------------------------------------------------------------------------------------------- |\n| **`Label`**       | Override the default Label in the Field Component. [More](#label-component)                                     |\n| **`Error`**       | Override the default Error in the Field Component. [More](#error-component)                                     |\n| **`beforeInput`** | An array of elements that will be added before `input`/`textarea` elements. [More](#afterinput-and-beforeinput) |\n| **`afterInput`**  | An array of elements that will be added after `input`/`textarea` elements. [More](#afterinput-and-beforeinput)  |\n\n## Cell Component\n\nThese are the props that will be passed to your custom Cell to use in your own components.\n\n| Property         | Description                                                       |\n| ---------------- | ----------------------------------------------------------------- |\n| **`field`**      | An object that includes the field configuration.                  |\n| **`colIndex`**   | A unique number for the column in the list.                       |\n| **`collection`** | An object with the config of the collection that the field is in. |\n| **`cellData`**   | The data for the field that the cell represents.                  |\n| **`rowData`**    | An object with all the field values for the row.                  |\n\n#### Example\n\n```tsx\nimport React from 'react'\nimport type { Props } from 'payload/components/views/Cell'\nimport './index.scss'\n\nconst baseClass = 'custom-cell'\n\nconst CustomCell: React.FC<Props> = (props) => {\n  const { field, colIndex, collection, cellData, rowData } = props\n\n  return <span className={baseClass}>{cellData}</span>\n}\n```\n\n## Field Component\n\nWhen writing your own custom components you can make use of a number of hooks to set data, get reactive changes to other fields, get the id of the document or interact with a context from a custom provider.\n\n### Sending and receiving values from the form\n\nWhen swapping out the `Field` component, you'll be responsible for sending and receiving the field's `value` from the form itself. To do so, import the `useField` hook as follows:\n\n```tsx\nimport { useField } from 'payload/components/forms'\n\nconst CustomTextField: React.FC<{ path: string }> = ({ path }) => {\n  // highlight-start\n  const { value, setValue } = useField<string>({ path })\n  // highlight-end\n\n\n  return <input onChange={(e) => setValue(e.target.value)} value={value} />\n}\n```\n\n<Banner type=\"success\">\n  For more information regarding the hooks that are available to you while you build custom\n  components, including the <strong>useField</strong> hook, [click here](../admin/hooks).\n</Banner>\n\n## Label Component\n\nThese are the props that will be passed to your custom Label.\n\n| Property         | Description                                                      |\n| ---------------- | ---------------------------------------------------------------- |\n| **`htmlFor`**    | Property used to set `for` attribute for label.                  |\n| **`label`**      | Label value provided in field, it can be used with i18n.         |\n| **`required`**   | A boolean value that represents if the field is required or not. |\n\n#### Example\n\n```tsx\nimport React from 'react'\nimport { useTranslation } from 'react-i18next'\n\nimport { getTranslation } from 'payload/utilities/getTranslation'\n\ntype Props = {\n  htmlFor?: string\n  label?: Record<string, string> | false | string\n  required?: boolean\n}\n\nconst CustomLabel: React.FC<Props> = (props) => {\n  const { htmlFor, label, required = false } = props\n\n  const { i18n } = useTranslation()\n\n  if (label) {\n    return (<span>\n      {getTranslation(label, i18n)}\n      {required && <span className=\"required\">*</span>}\n    </span>);\n  }\n\n  return null\n}\n```\n\n## Error Component\n\nThese are the props that will be passed to your custom Error.\n\n| Property         | Description                                                   |\n| ---------------- | ------------------------------------------------------------- |\n| **`message`**    | The error message.                                            |\n| **`showError`**  | A boolean value that represents if the error should be shown. |\n\n#### Example\n\n```tsx\nimport React from 'react'\n\ntype Props = {\n  message: string\n  showError?: boolean\n}\n\nconst CustomError: React.FC<Props> = (props) => {\n  const { message, showError } = props\n\n  if (showError) {\n    return <p style={{color: 'red'}}>{message}</p>\n  } else return null;\n}\n```\n\n## afterInput and beforeInput\n\nWith these properties you can add multiple components before and after the input element. For example, you can add an absolutely positioned button to clear the current field value.\n\n#### Example\n\n```tsx\nimport React from 'react'\nimport { Field } from 'payload/types'\n\nimport './style.scss'\n\nconst ClearButton: React.FC = () => {\n  return <button onClick={() => {/* ... */}}>X</button>\n}\n\nconst titleField: Field = {\n  name: 'title',\n  type: 'text',\n  admin: {\n    components: {\n      afterInput: [ClearButton]\n    }\n  }\n}\n\nexport default titleField;\n```\n\n## Custom providers\n\nAs your admin customizations gets more complex you may want to share state between fields or other components. You can add custom providers to add your own context to any Payload app for use in other custom components within the admin panel. Within your config add `admin.components.providers`, these can be used to share context or provide other custom functionality. Read the [React context](https://reactjs.org/docs/context.html) docs to learn more.\n\n<Banner type=\"warning\">\n  <strong>Reminder:</strong> Don't forget to pass the **children** prop through the provider\n  component for the admin UI to show\n</Banner>\n\n### Styling Custom Components\n\nPayload exports its SCSS variables and mixins for reuse in your own custom components. This is helpful in cases where you might want to style a custom input similarly to Payload's built-in styling, so it blends more thoroughly into the existing admin UI.\n\nTo make use of Payload SCSS variables / mixins to use directly in your own components, you can import them as follows:\n\n```\n@import '~payload/scss';\n```\n\n### Getting the current language\n\nWhen developing custom components you can support multiple languages to be consistent with Payload's i18n support. The best way to do this is to add your translation resources to the [i18n configuration](../configuration/i18n) and import `useTranslation` from `react-i18next` in your components.\n\nFor example:\n\n```tsx\nimport { useTranslation } from 'react-i18next'\n\nconst CustomComponent: React.FC = () => {\n  // highlight-start\n  const { t, i18n } = useTranslation('namespace1')\n  // highlight-end\n\n  return (\n    <ul>\n      <li>{t('key', { variable: 'value' })}</li>\n      <li>{t('namespace2:key', { variable: 'value' })}</li>\n      <li>{i18n.language}</li>\n    </ul>\n  )\n}\n```\n\n### Getting the current locale\n\nIn any custom component you can get the selected locale with `useLocale` hook. `useLocale` returns the full locale object, consisting of a `label`, `rtl`(right-to-left) property, and then `code`. Here is a simple example:\n\n```tsx\nimport { useLocale } from 'payload/components/utilities'\n\nconst Greeting: React.FC = () => {\n  // highlight-start\n  const locale = useLocale()\n  // highlight-end\n\n  const trans = {\n    en: 'Hello',\n    es: 'Hola',\n  }\n\n  return <span> {trans[locale.code]} </span>\n}\n```\n",
            "desc": "Fully customize your Admin Panel by swapping in your own React components. Add fields, remove views, update routes and change functions to sculpt your perfect Dashboard.",
            "headings": [
              {
                "id": "base-component-overrides",
                "level": 3,
                "text": "Base Component Overrides"
              },
              {
                "id": "collections",
                "level": 3,
                "text": "Collections"
              },
              {
                "id": "globals",
                "level": 3,
                "text": "Globals"
              },
              {
                "id": "custom-tabs",
                "level": 3,
                "text": "Custom Tabs"
              },
              {
                "id": "building-a-custom-view-component",
                "level": 3,
                "text": "Building a custom view component"
              },
              {
                "id": "fields",
                "level": 3,
                "text": "Fields"
              },
              {
                "id": "cell-component",
                "level": 2,
                "text": "Cell Component"
              },
              {
                "id": "field-component",
                "level": 2,
                "text": "Field Component"
              },
              {
                "id": "sending-and-receiving-values-from-the-form",
                "level": 3,
                "text": "Sending and receiving values from the form"
              },
              {
                "id": "label-component",
                "level": 2,
                "text": "Label Component"
              },
              {
                "id": "error-component",
                "level": 2,
                "text": "Error Component"
              },
              {
                "id": "afterinput-and-beforeinput",
                "level": 2,
                "text": "afterInput and beforeInput"
              },
              {
                "id": "custom-providers",
                "level": 2,
                "text": "Custom providers"
              },
              {
                "id": "styling-custom-components",
                "level": 3,
                "text": "Styling Custom Components"
              },
              {
                "id": "getting-the-current-language",
                "level": 3,
                "text": "Getting the current language"
              },
              {
                "id": "getting-the-current-locale",
                "level": 3,
                "text": "Getting the current locale"
              }
            ],
            "keywords": "admin, components, custom, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Custom Components",
            "order": 20,
            "title": "Swap in your own React components"
          },
          {
            "slug": "hooks",
            "content": "\nPayload provides a variety of powerful hooks that can be used within your own React components. With them, you can interface with Payload itself and build just about any type of complex customization you can think of—directly in familiar React code.\n\n### useField\n\nThe `useField` hook is used internally within every applicable Payload field component, and it manages sending and receiving a field's state from its parent form.\n\nOutside of internal use, its most common use-case is in custom `Field` components. When you build a custom React `Field` component, you'll be responsible for sending and receiving the field's `value` from the form itself. To do so, import the `useField` hook as follows:\n\n```tsx\nimport { useField } from 'payload/components/forms'\n\ntype Props = { path: string }\n\nconst CustomTextField: React.FC<Props> = ({ path }) => {\n  // highlight-start\n  const { value, setValue } = useField<string>({ path })\n  // highlight-end\n\n  return <input onChange={(e) => setValue(e.target.value)} value={value.path} />\n}\n```\n\nThe `useField` hook accepts an `args` object and sends back information and helpers for you to make use of:\n\n```ts\nconst field = useField<string>({\n  path: 'fieldPathHere', // required\n  validate: myValidateFunc, // optional\n  disableFormData?: false, // if true, the field's data will be ignored\n  condition?: myConditionHere, // optional, used to skip validation if condition fails\n})\n\n// Here is what `useField` sends back\nconst {\n  showError, // whether or not the field should show as errored\n  errorMessage, // the error message to show, if showError\n  value, // the current value of the field from the form\n  formSubmitted, // if the form has been submitted\n  formProcessing, // if the form is currently processing\n  setValue, // method to set the field's value in form state\n  initialValue, // the initial value that the field mounted with\n} = field;\n\n// The rest of your component goes here\n```\n\n### useFormFields\n\nThere are times when a custom field component needs to have access to data from other fields, and you have a few options to do so. The `useFormFields` hook is a powerful and highly performant way to retrieve a form's field state, as well as to retrieve the `dispatchFields` method, which can be helpful for setting other fields' form states from anywhere within a form.\n\n<Banner type=\"success\">\n  <strong>This hook is great for retrieving only certain fields from form state</strong> because it\n  ensures that it will only cause a rerender when the items that you ask for change.\n</Banner>\n\nThanks to the awesome package [`use-context-selector`](https://github.com/dai-shi/use-context-selector), you can retrieve a specific field's state easily. This is ideal because you can ensure you have an up-to-date field state, and your component will only re-render when _that field's state_ changes.\n\nYou can pass a Redux-like selector into the hook, which will ensure that you retrieve only the field that you want. The selector takes an argument with type of `[fields: Fields, dispatch: React.Dispatch<Action>]]`.\n\n```tsx\nimport { useFormFields } from 'payload/components/forms'\n\nconst MyComponent: React.FC = () => {\n  // Get only the `amount` field state, and only cause a rerender when that field changes\n  const amount = useFormFields(([fields, dispatch]) => fields.amount)\n\n  // Do the same thing as above, but to the `feePercentage` field\n  const feePercentage = useFormFields(([fields, dispatch]) => fields.feePercentage)\n\n  if (typeof amount?.value !== 'undefined' && typeof feePercentage?.value !== 'undefined') {\n    return <span>The fee is ${(amount.value * feePercentage.value) / 100}</span>\n  }\n}\n```\n\n### useAllFormFields\n\n**To retrieve more than one field**, you can use the `useAllFormFields` hook. Your component will re-render when _any_ field changes, so use this hook only if you absolutely need to. Unlike the `useFormFields` hook, this hook does not accept a \"selector\", and it always returns an array with type of `[fields: Fields, dispatch: React.Dispatch<Action>]]`.\n\nYou can do lots of powerful stuff by retrieving the full form state, like using built-in helper functions to reduce field state to values only, or to retrieve sibling data by path.\n\n```tsx\nimport { useAllFormFields, reduceFieldsToValues, getSiblingData } from 'payload/components/forms';\n\nconst ExampleComponent: React.FC = () => {\n  // the `fields` const will be equal to all fields' state,\n  // and the `dispatchFields` method is usable to send field state up to the form\n  const [fields, dispatchFields] = useAllFormFields();\n\n  // Pass in fields, and indicate if you'd like to \"unflatten\" field data.\n  // The result below will reflect the data stored in the form at the given time\n  const formData = reduceFieldsToValues(fields, true);\n\n  // Pass in field state and a path,\n  // and you will be sent all sibling data of the path that you've specified\n  const siblingData = getSiblingData(fields, 'someFieldName');\n\n  return (\n    // return some JSX here if necessary\n  )\n};\n```\n\n##### Updating other fields' values\n\nIf you are building a custom component, then you should use `setValue` which is returned from the `useField` hook to programmatically set your field's value. But if you're looking to update _another_ field's value, you can use `dispatchFields` returned from `useFormFields`.\n\nYou can send the following actions to the `dispatchFields` function.\n\n| Action                 | Description                                                                |\n| ---------------------- | -------------------------------------------------------------------------- |\n| **`ADD_ROW`**          | Adds a row of data (useful in array / block field data)                    |\n| **`DUPLICATE_ROW`**    | Duplicates a row of data (useful in array / block field data)              |\n| **`MODIFY_CONDITION`** | Updates a field's conditional logic result (true / false)                  |\n| **`MOVE_ROW`**         | Moves a row of data (useful in array / block field data)                   |\n| **`REMOVE`**           | Removes a field from form state                                            |\n| **`REMOVE_ROW`**       | Removes a row of data from form state (useful in array / block field data) |\n| **`REPLACE_STATE`**    | Completely replaces form state                                             |\n| **`UPDATE`**           | Update any property of a specific field's state                            |\n\nTo see types for each action supported within the `dispatchFields` hook, check out the Form types [here](https://github.com/payloadcms/payload/blob/main/packages/payload/src/admin/components/forms/Form/types.ts).\n\n### useForm\n\nThe `useForm` hook can be used to interact with the form itself, and sends back many methods that can be used to reactively fetch form state without causing rerenders within your components each time a field is changed. This is useful if you have action-based callbacks that your components fire, and need to interact with form state _based on a user action_.\n\n<Banner type=\"warning\">\n  <strong>Warning:</strong>\n  <br />\n  This hook is optimized to avoid causing rerenders when fields change, and as such, its `fields`\n  property will be out of date. You should only leverage this hook if you need to perform actions\n  against the form in response to your users' actions. Do not rely on its returned \"fields\" as being\n  up-to-date. They will be removed from this hook's response in an upcoming version.\n</Banner>\n\nThe `useForm` hook returns an object with the following properties: |\n\n<TableWithDrawers\n  columns={[\n    'Action',\n    'Description',\n    'Example',\n  ]}\n  rows={[\n    [\n      {\n        value: <strong><code>fields</code></strong>,\n      },\n      {\n        value: \"Deprecated. This property cannot be relied on as up-to-date.\",\n      },\n      {\n        value: ''\n      }\n    ],\n    [\n      {\n        value: <strong><code>submit</code></strong>,\n      },\n      {\n        value: \"Method to trigger the form to submit\",\n      },\n      {\n        value: ''\n      }\n    ],\n    [\n      {\n        value: <strong><code>dispatchFields</code></strong>,\n      },\n      {\n        value: \"Dispatch actions to the form field state\",\n      },\n      {\n        value: ''\n      }\n    ],\n    [\n      {\n        value: <strong><code>validateForm</code></strong>,\n      },\n      {\n        value: \"Trigger a validation of the form state\",\n      },\n      {\n        value: ''\n      }\n    ],\n    [\n      {\n        value: <strong><code>createFormData</code></strong>,\n      },\n      {\n        value: <>Create a <code>multipart/form-data</code> object from the current form's state</>,\n      },\n      {\n        value: ''\n      }\n    ],\n    [\n      {\n        value: <strong><code>disabled</code></strong>,\n      },\n      {\n        value: \"Boolean denoting whether or not the form is disabled\",\n      },\n      {\n        value: ''\n      }\n    ],\n    [\n      {\n        value: <strong><code>getFields</code></strong>,\n      },\n      {\n        value: 'Gets all fields from state',\n      },\n      {\n        value: '',\n      }\n    ],\n    [\n      {\n        value: <strong><code>getField</code></strong>,\n      },\n      {\n        value: 'Gets a single field from state by path',\n      },\n      {\n        value: '',\n      },\n    ],\n    [\n      {\n        value: <strong><code>getData</code></strong>,\n      },\n      {\n        value: 'Returns the data stored in the form',\n      },\n      {\n        value: '',\n      },\n    ],\n    [\n      {\n        value: <strong><code>getSiblingData</code></strong>,\n      },\n      {\n        value: 'Returns form sibling data for the given field path',\n      },\n      {\n        value: '',\n      },\n    ],\n    [\n      {\n        value: <strong><code>setModified</code></strong>,\n      },\n      {\n        value: <>Set the form\\'s <code>modified</code> state</>,\n      },\n      {\n        value: '',\n      },\n    ],\n    [\n      {\n        value: <strong><code>setProcessing</code></strong>,\n      },\n      {\n        value: <>Set the form\\'s <code>processing</code> state</>,\n      },\n      {\n        value: '',\n      },\n    ],\n    [\n      {\n        value: <strong><code>setSubmitted</code></strong>,\n      },\n      {\n        value: <>Set the form\\'s <code>submitted</code> state</>,\n      },\n      {\n        value: '',\n      },\n    ],\n    [\n      {\n        value: <strong><code>formRef</code></strong>,\n      },\n      {\n        value: 'The ref from the form HTML element',\n      },\n      {\n        value: '',\n      },\n    ],\n    [\n      {\n        value: <strong><code>reset</code></strong>,\n      },\n      {\n        value: 'Method to reset the form to its initial state',\n      },\n      {\n        value: '',\n      },\n    ],\n    [\n      {\n        value: <strong><code>addFieldRow</code></strong>,\n      },\n      {\n        value: \"Method to add a row on an array or block field\",\n      },\n      {\n        drawerTitle: 'addFieldRow',\n        drawerDescription: 'A useful method to programmatically add a row to an array or block field.',\n        drawerSlug: 'addFieldRow',\n        drawerContent: (\n<>\n  <TableWithDrawers\n    columns={[\n      'Prop',\n      'Description',\n    ]}\n    rows={[\n      [\n        {\n          value: <strong><code>path</code></strong>,\n        },\n        {\n          value: \"The path to the array or block field\",\n        },\n      ],\n      [\n        {\n          value: <strong><code>rowIndex</code></strong>,\n        },\n        {\n          value: \"The index of the row to add. If omitted, the row will be added to the end of the array.\",\n        },\n      ],\n      [\n        {\n          value: <strong><code>data</code></strong>,\n        },\n        {\n          value: \"The data to add to the row\",\n        },\n      ],\n    ]}\n  />\n\n{' '}\n\n<br />\n\n{' '}\n\n<pre>\n  {`import { useForm } from \"payload/components/forms\";\n\nexport const CustomArrayManager = () => {\n  const { addFieldRow } = useForm()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        addFieldRow({\n          path: \"arrayField\",\n          rowIndex: 0,\n          data: {\n            textField: \"text\",\n            // blockType: \"yourBlockSlug\",\n            // ^ if managing a block array, you need to specify the block type\n          },\n        })\n      }}\n    >\n      Add Row\n    </button>\n  )\n}`}\n</pre>\n\n  <p>An example config to go along with the custom component</p>\n  <pre>\n{`const ExampleCollection = {\n  slug: \"example-collection\",\n  fields: [\n    {\n      name: \"arrayField\",\n      type: \"array\",\n      fields: [\n        {\n          name: \"textField\",\n          type: \"text\",\n        },\n      ],\n    },\n    {\n      type: \"ui\",\n      name: \"customArrayManager\",\n      admin: {\n        components: {\n          Field: CustomArrayManager,\n        },\n      },\n    },\n  ],\n}`}\n  </pre>\n</>\n        )\n      }\n    ],\n    [\n      {\n        value: <strong><code>removeFieldRow</code></strong>,\n      },\n      {\n        value: \"Method to remove a row from an array or block field\",\n      },\n      {\n        drawerTitle: 'removeFieldRow',\n        drawerDescription: 'A useful method to programmatically remove a row from an array or block field.',\n        drawerSlug: 'removeFieldRow',\n        drawerContent: (\n<>\n  <TableWithDrawers\n    columns={[\n      'Prop',\n      'Description',\n    ]}\n    rows={[\n      [\n        {\n          value: <strong><code>path</code></strong>,\n        },\n        {\n          value: \"The path to the array or block field\",\n        },\n      ],\n      [\n        {\n          value: <strong><code>rowIndex</code></strong>,\n        },\n        {\n          value: \"The index of the row to remove\",\n        },\n      ],\n    ]}\n  />\n\n{' '}\n\n<br />\n\n{' '}\n\n<pre>\n  {`import { useForm } from \"payload/components/forms\";\n\nexport const CustomArrayManager = () => {\n  const { removeFieldRow } = useForm()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        removeFieldRow({\n          path: \"arrayField\",\n          rowIndex: 0,\n        })\n      }}\n    >\n      Remove Row\n    </button>\n  )\n}`}\n</pre>\n\n  <p>An example config to go along with the custom component</p>\n  <pre>\n{`const ExampleCollection = {\n  slug: \"example-collection\",\n  fields: [\n    {\n      name: \"arrayField\",\n      type: \"array\",\n      fields: [\n        {\n          name: \"textField\",\n          type: \"text\",\n        },\n      ],\n    },\n    {\n      type: \"ui\",\n      name: \"customArrayManager\",\n      admin: {\n        components: {\n          Field: CustomArrayManager,\n        },\n      },\n    },\n  ],\n}`}\n  </pre>\n</>\n        )\n      }\n    ],\n    [\n      {\n        value: <strong><code>replaceFieldRow</code></strong>,\n      },\n      {\n        value: \"Method to replace a row from an array or block field\",\n      },\n      {\n        drawerTitle: 'replaceFieldRow',\n        drawerDescription: 'A useful method to programmatically replace a row from an array or block field.',\n        drawerSlug: 'replaceFieldRow',\n        drawerContent: (\n<>\n  <TableWithDrawers\n    columns={[\n      'Prop',\n      'Description',\n    ]}\n    rows={[\n      [\n        {\n          value: <strong><code>path</code></strong>,\n        },\n        {\n          value: \"The path to the array or block field\",\n        },\n      ],\n      [\n        {\n          value: <strong><code>rowIndex</code></strong>,\n        },\n        {\n          value: \"The index of the row to replace\",\n        },\n      ],\n      [\n        {\n          value: <strong><code>data</code></strong>,\n        },\n        {\n          value: \"The data to replace within the row\",\n        },\n      ],\n    ]}\n  />\n\n{' '}\n\n<br />\n\n{' '}\n\n<pre>\n  {`import { useForm } from \"payload/components/forms\";\n\nexport const CustomArrayManager = () => {\n  const { replaceFieldRow } = useForm()\n\n  return (\n    <button\n      type=\"button\"\n      onClick={() => {\n        replaceFieldRow({\n          path: \"arrayField\",\n          rowIndex: 0,\n          data: {\n            textField: \"updated text\",\n            // blockType: \"yourBlockSlug\",\n            // ^ if managing a block array, you need to specify the block type\n          },\n        })\n      }}\n    >\n      Replace Row\n    </button>\n  )\n}`}\n</pre>\n\n  <p>An example config to go along with the custom component</p>\n  <pre>\n{`const ExampleCollection = {\n  slug: \"example-collection\",\n  fields: [\n    {\n      name: \"arrayField\",\n      type: \"array\",\n      fields: [\n        {\n          name: \"textField\",\n          type: \"text\",\n        },\n      ],\n    },\n    {\n      type: \"ui\",\n      name: \"customArrayManager\",\n      admin: {\n        components: {\n          Field: CustomArrayManager,\n        },\n      },\n    },\n  ],\n}`}\n  </pre>\n</>\n        )\n      }\n    ],\n  ]}\n/>\n\n### useCollapsible\n\nThe `useCollapsible` hook allows you to control parent collapsibles:\n\n| Property                  | Description                                                                                                        |\n|---------------------------|--------------------------------------------------------------------------------------------------------------------|\n| **`collapsed`**          | State of the collapsible. `true` if open, `false` if collapsed                                                 |\n| **`isVisible`**              | If nested, determine if the nearest collapsible is visible. `true` if no parent is closed, `false` otherwise                                                        |\n| **`toggle`**                  | Toggles the state of the nearest collapsible                                                                |\n| **`withinCollapsible`**      | Determine when you are within another collaspible                                 |                                               |\n\n**Example:**\n\n```tsx\nimport React from 'react'\n\nimport { useCollapsible } from 'payload/components/utilities'\n\nconst CustomComponent: React.FC = () => {\n  const { collapsed, toggle } = useCollapsible()\n  return (\n    <div>\n      <p className=\"field-type\">I am {collapsed ? 'closed' : 'open'}</p>\n      <button onClick={toggle} type=\"button\">\n        Toggle\n      </button>\n    </div>\n  )\n}\n```\n\n### useDocumentInfo\n\nThe `useDocumentInfo` hook provides lots of information about the document currently being edited, including the following:\n\n| Property                  | Description                                                                                                        |\n|---------------------------|--------------------------------------------------------------------------------------------------------------------|\n| **`collection`**          | If the doc is a collection, its collection config will be returned                                                 |\n| **`global`**              | If the doc is a global, its global config will be returned                                                         |\n| **`id`**                  | If the doc is a collection, its ID will be returned                                                                |\n| **`preferencesKey`**      | The `preferences` key to use when interacting with document-level user preferences                                 |\n| **`versions`**            | Versions of the current doc                                                                                        |\n| **`unpublishedVersions`** | Unpublished versions of the current doc                                                                            |\n| **`publishedDoc`**        | The currently published version of the doc being edited                                                            |\n| **`getVersions`**         | Method to trigger the retrieval of document versions                                                               |\n| **`docPermissions`**      | The current documents permissions. Collection document permissions fallback when no id is present (i.e. on create) |\n| **`getDocPermissions`**   | Method to trigger the retrieval of document level permissions                                                      |\n\n**Example:**\n\n```tsx\nimport { useDocumentInfo } from 'payload/components/utilities'\n\nconst LinkFromCategoryToPosts: React.FC = () => {\n  // highlight-start\n  const { id } = useDocumentInfo()\n  // highlight-end\n\n  // id will be undefined on the create form\n  if (!id) {\n    return null\n  }\n\n  return (\n    <a href={`/admin/collections/posts?where[or][0][and][0][category][in][0]=[${id}]`}>\n      View posts\n    </a>\n  )\n}\n```\n\n### useLocale\n\nIn any custom component you can get the selected locale object with the `useLocale` hook. `useLocale`gives you the full locale object, consisting of a `label`, `rtl`(right-to-left) property, and then `code`. Here is a simple example:\n\n```tsx\nimport { useLocale } from 'payload/components/utilities'\n\nconst Greeting: React.FC = () => {\n  // highlight-start\n  const locale = useLocale()\n  // highlight-end\n\n  const trans = {\n    en: 'Hello',\n    es: 'Hola',\n  }\n\n  return <span> {trans[locale.code]} </span>\n}\n```\n\n### useAuth\n\nUseful to retrieve info about the currently logged in user as well as methods for interacting with it. It sends back an object with the following properties:\n\n| Property                 | Description                                                                             |\n| ------------------------ | --------------------------------------------------------------------------------------- |\n| **`user`**               | The currently logged in user                                                            |\n| **`logOut`**             | A method to log out the currently logged in user                                        |\n| **`refreshCookie`**      | A method to trigger the silent refreshing of a user's auth token                        |\n| **`setToken`**           | Set the token of the user, to be decoded and used to reset the user and token in memory |\n| **`token`**              | The logged in user's token (useful for creating preview links, etc.)                    |\n| **`refreshPermissions`** | Load new permissions (useful when content that effects permissions has been changed)    |\n| **`permissions`**        | The permissions of the current user                                                     |\n\n```tsx\nimport { useAuth } from 'payload/components/utilities'\nimport { User } from '../payload-types.ts'\n\nconst Greeting: React.FC = () => {\n  // highlight-start\n  const { user } = useAuth<User>()\n  // highlight-end\n\n  return <span>Hi, {user.email}!</span>\n}\n```\n\n### useConfig\n\nUsed to easily fetch the full Payload config.\n\n```tsx\nimport { useConfig } from 'payload/components/utilities'\n\nconst MyComponent: React.FC = () => {\n  // highlight-start\n  const config = useConfig()\n  // highlight-end\n\n  return <span>{config.serverURL}</span>\n}\n```\n\n### useEditDepth\n\nSends back how many editing levels \"deep\" the current component is. Edit depth is relevant while adding new documents / editing documents in modal windows and other cases.\n\n```tsx\nimport { useEditDepth } from 'payload/components/utilities'\n\nconst MyComponent: React.FC = () => {\n  // highlight-start\n  const editDepth = useEditDepth()\n  // highlight-end\n\n  return <span>My component is {editDepth} levels deep</span>\n}\n```\n\n### usePreferences\n\nReturns methods to set and get user preferences. More info can be found [here](../admin/preferences).\n\n### useTheme\n\nReturns the currently selected theme (`light`, `dark` or `auto`), a set function to update it and a boolean `autoMode`, used to determine if the theme value should be set automatically based on the user's device preferences.\n\n```tsx\nimport { useTheme } from 'payload/components/utilities'\n\nconst MyComponent: React.FC = () => {\n  // highlight-start\n  const { autoMode, setTheme, theme } = useTheme()\n  // highlight-end\n\n  return (\n    <>\n      <span>The current theme is {theme} and autoMode is {autoMode}</span>\n      <button\n        type=\"button\"\n        onClick={() => setTheme(prev => prev === \"light\" ? \"dark\" : \"light\")}\n      >\n        Toggle theme\n      </button>\n    </>\n    )\n}\n```\n\n### useTableColumns\n\nReturns methods to manipulate table columns\n\n```tsx\nimport { useTableColumns } from 'payload/components/hooks'\n\nconst MyComponent: React.FC = () => {\n  // highlight-start\n  const { setActiveColumns } = useTableColumns()\n\n  const resetColumns = () => {\n    setActiveColumns(['id', 'createdAt', 'updatedAt'])\n  }\n  // highlight-end\n\n  return (\n    <button\n      type=\"button\"\n      onClick={resetColumns}\n    >\n      Reset columns\n    </button>\n  )\n}\n```\n\n### useDocumentEvents\n\nThe `useDocumentEvents` hook provides a way of subscribing to cross-document events, such as updates made to nested documents within a drawer. This hook will report document events that are outside the scope of the document currently being edited. This hook provides the following:\n\n| Property                  | Description                                                                                                                               |\n|---------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|\n| **`mostRecentUpdate`**    | An object containing the most recently updated document. It contains the `entitySlug`, `id` (if collection), and `updatedAt` properties   |\n| **`reportUpdate`**        | A method used to report updates to documents. It accepts the same arguments as the `mostRecentUpdate` property.                           |\n\n**Example:**\n\n```tsx\nimport { useDocumentEvents } from 'payload/components/hooks'\n\nconst ListenForUpdates: React.FC = () => {\n  const { mostRecentUpdate } = useDocumentEvents()\n\n  return (\n    <span>\n      {JSON.stringify(mostRecentUpdate)}\n    </span>\n  )\n}\n```\n\n<Banner type=\"info\">\n  Right now the `useDocumentEvents` hook only tracks recently updated documents, but in the future it will track more document-related events as needed, such as document creation, deletion, etc.\n</Banner>\n",
            "desc": "Make use of all of the powerful React hooks that Payload provides.",
            "headings": [
              {
                "id": "usefield",
                "level": 3,
                "text": "useField"
              },
              {
                "id": "useformfields",
                "level": 3,
                "text": "useFormFields"
              },
              {
                "id": "useallformfields",
                "level": 3,
                "text": "useAllFormFields"
              },
              {
                "id": "useform",
                "level": 3,
                "text": "useForm"
              },
              {
                "id": "usecollapsible",
                "level": 3,
                "text": "useCollapsible"
              },
              {
                "id": "usedocumentinfo",
                "level": 3,
                "text": "useDocumentInfo"
              },
              {
                "id": "uselocale",
                "level": 3,
                "text": "useLocale"
              },
              {
                "id": "useauth",
                "level": 3,
                "text": "useAuth"
              },
              {
                "id": "useconfig",
                "level": 3,
                "text": "useConfig"
              },
              {
                "id": "useeditdepth",
                "level": 3,
                "text": "useEditDepth"
              },
              {
                "id": "usepreferences",
                "level": 3,
                "text": "usePreferences"
              },
              {
                "id": "usetheme",
                "level": 3,
                "text": "useTheme"
              },
              {
                "id": "usetablecolumns",
                "level": 3,
                "text": "useTableColumns"
              },
              {
                "id": "usedocumentevents",
                "level": 3,
                "text": "useDocumentEvents"
              }
            ],
            "keywords": "admin, components, custom, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "React Hooks",
            "order": 30,
            "title": "React Hooks"
          },
          {
            "slug": "customizing-css",
            "content": "\n### Adding your own CSS / SCSS\n\nYou can add your own CSS by providing your base Payload config with a path to your own CSS or SCSS. Customize the styling of any part of the Payload dashboard as necessary.\n\nTo do so, provide your base Payload config with a path to your own stylesheet. It can be either a CSS or SCSS file.\n\n**Example in payload.config.js:**\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport path from 'path'\n\nconst config = buildConfig({\n  admin: {\n    css: path.resolve(__dirname, 'relative/path/to/stylesheet.scss'),\n  },\n})\n```\n\n### Overriding built-in styles\n\nTo make it as easy as possible for you to override our styles, Payload uses [BEM naming conventions](http://getbem.com/) for all CSS within the Admin UI. If you provide your own CSS, you can override any built-in styles easily.\n\nIn addition to adding your own style definitions, you can also override Payload's built-in CSS variables. We use as much as possible behind the scenes, and you can override any of them that you'd like to.\n\nYou can find the built-in Payload CSS variables within [`./src/admin/scss/app.scss`](https://github.com/payloadcms/payload/blob/main/packages/payload/src/admin/scss/app.scss) and [`./src/admin/scss/colors.scss`](https://github.com/payloadcms/payload/blob/main/packages/payload/src/admin/scss/colors.scss). The following variables are defined and can be overridden:\n\n- Breakpoints\n- Base color shades (white to black by default)\n- Success / warning / error color shades\n- Theme-specific colors (background, input background, text color, etc.)\n- Elevation colors (used to determine how \"bright\" something should be when compared to the background)\n- Fonts\n- Horizontal gutter\n\n#### Dark mode\n\n<Banner type=\"warning\">\n  If you're overriding colors or theme elevations, make sure to consider how your changes will\n  affect dark mode.\n</Banner>\n\nBy default, Payload automatically overrides all `--theme-elevation`s and inverts all success / warning / error shades to suit dark mode. We also update some base theme variables like `--theme-bg`, `--theme-text`, etc.\n",
            "desc": "Customize your Payload admin panel further by adding your own CSS or SCSS style sheet to the configuration, powerful theme and design options are waiting for you.",
            "headings": [
              {
                "id": "adding-your-own-css-scss",
                "level": 3,
                "text": "Adding your own CSS / SCSS"
              },
              {
                "id": "overriding-built-in-styles",
                "level": 3,
                "text": "Overriding built-in styles"
              }
            ],
            "keywords": "admin, css, scss, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Customizing CSS",
            "order": 40,
            "title": "Customizing CSS & SCSS"
          },
          {
            "slug": "preferences",
            "content": "\nAs your users interact with your Admin panel, you might want to store their preferences in a persistent manner, so that when they revisit the Admin panel, they can pick right back up where they left off.\n\nOut of the box, Payload handles the persistence of your users' preferences in a handful of ways, including:\n\n1. Collection `List` view active columns, and their order, that users define\n1. Their last active locale\n1. The \"collapsed\" state of blocks, on a document level, as users edit or interact with documents\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  All preferences are stored on an individual user basis. Payload automatically recognizes the user\n  that is reading or setting a preference via all provided authentication methods.\n</Banner>\n\n### Use cases\n\nThis API is used significantly for internal operations of the Admin panel, as mentioned above. But, if you're building your own React components for use in the Admin panel, you can allow users to set their own preferences in correspondence to their usage of your components. For example:\n\n- If you have built a \"color picker\", you could \"remember\" the last used colors that the user has set for easy access next time\n- If you've built a custom `Nav` component, and you've built in an \"accordion-style\" UI, you might want to store the `collapsed` state of each Nav collapsible item. This way, if an editor returns to the panel, their `Nav` state is persisted automatically\n- You might want to store `recentlyAccessed` documents to give admin editors an easy shortcut back to their recently accessed documents on the `Dashboard` or similar\n- Many other use cases exist. Invent your own! Give your editors an intelligent and persistent editing experience.\n\n### Database\n\nPayload automatically creates an internally used `payload-preferences` collection that stores user preferences. Each document in the `payload-preferences` collection contains the following shape:\n\n| Key               | Value                                                             |\n| ----------------- | ----------------------------------------------------------------- |\n| `id`              | A unique ID for each preference stored.                           |\n| `key`             | A unique `key` that corresponds to the preference.                |\n| `user.value`      | The ID of the `user` that is storing its preference.              |\n| `user.relationTo` | The `slug` of the collection that the `user` is logged in as.     |\n| `value`           | The value of the preference. Can be any data shape that you need. |\n| `createdAt`       | A timestamp of when the preference was created.                   |\n| `updatedAt`       | A timestamp set to the last time the preference was updated.      |\n\n### APIs\n\nPreferences are available to both [GraphQL](../graphql/overview#preferences) and [REST](../rest-api/overview#) APIs.\n\n### Adding or reading Preferences in your own components\n\nThe Payload admin panel offers a `usePreferences` hook. The hook is only meant for use within the admin panel itself. It provides you with two methods:\n\n##### `getPreference`\n\nThis async method provides an easy way to retrieve a user's preferences by `key`. It will return a promise containing the resulting preference value.\n\n**Arguments**\n\n- `key`: the `key` of your preference to retrieve.\n\n##### `setPreference`\n\nAlso async, this method provides you with an easy way to set a user preference. It returns `void`.\n\n**Arguments:**\n\n- `key`: the `key` of your preference to set.\n- `value`: the `value` of your preference that you're looking to set.\n\n## Example\n\nHere is an example for how you can utilize `usePreferences` within your custom Admin panel components. Note - this example is not fully useful and is more just a reference for how to utilize the Preferences API. In this case, we are demonstrating how to set and retrieve a user's last used colors history within a `ColorPicker` or similar type component.\n\n```\nimport React, { Fragment, useState, useEffect, useCallback } from 'react';\nimport { usePreferences } from 'payload/components/preferences';\n\nconst lastUsedColorsPreferenceKey = 'last-used-colors';\n\nconst CustomComponent = (props) => {\n  const { getPreference, setPreference } = usePreferences();\n\n  // Store the last used colors in local state\n  const [lastUsedColors, setLastUsedColors] = useState([]);\n\n  // Callback to add a color to the last used colors\n  const updateLastUsedColors = useCallback((color) => {\n    // First, check if color already exists in last used colors.\n    // If it already exists, there is no need to update preferences\n    const colorAlreadyExists = lastUsedColors.indexOf(color) > -1;\n\n    if (!colorAlreadyExists) {\n      const newLastUsedColors = [\n        ...lastUsedColors,\n        color,\n      ];\n\n      setLastUsedColors(newLastUsedColors);\n      setPreference(lastUsedColorsPreferenceKey, newLastUsedColors);\n    }\n  }, [lastUsedColors, setPreference]);\n\n  // Retrieve preferences on component mount\n  // This will only be run one time, because the `getPreference` method never changes\n  useEffect(() => {\n    const asyncGetPreference = async () => {\n      const lastUsedColorsFromPreferences = await getPreference(lastUsedColorsPreferenceKey);\n      setLastUsedColors(lastUsedColorsFromPreferences);\n    };\n\n    asyncGetPreference();\n  }, [getPreference]);\n\n  return (\n    <div>\n      <button\n        type=\"button\"\n        onClick={() => updateLastUsedColors('red')}\n      >\n        Use red\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => updateLastUsedColors('blue')}\n      >\n        Use blue\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => updateLastUsedColors('purple')}\n      >\n        Use purple\n      </button>\n      <button\n        type=\"button\"\n        onClick={() => updateLastUsedColors('yellow')}\n      >\n        Use yellow\n      </button>\n      {lastUsedColors && (\n        <Fragment>\n          <h5>Last used colors:</h5>\n          <ul>\n            {lastUsedColors?.map((color) => (\n              <li key={color}>\n                {color}\n              </li>\n            ))}\n          </ul>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nexport default CustomComponent;\n```\n",
            "desc": "Store the preferences of your users as they interact with the Admin panel.",
            "headings": [
              {
                "id": "use-cases",
                "level": 3,
                "text": "Use cases"
              },
              {
                "id": "database",
                "level": 3,
                "text": "Database"
              },
              {
                "id": "apis",
                "level": 3,
                "text": "APIs"
              },
              {
                "id": "adding-or-reading-preferences-in-your-own-components",
                "level": 3,
                "text": "Adding or reading Preferences in your own components"
              },
              {
                "id": "example",
                "level": 2,
                "text": "Example"
              }
            ],
            "keywords": "admin, preferences, custom, customize, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Preferences",
            "order": 50,
            "title": "Managing User Preferences"
          },
          {
            "slug": "bundlers",
            "content": "\nPayload has two official bundlers, the [Webpack Bundler](../admin/webpack) and the [Vite Bundler](../admin/vite). You must install a bundler to use the admin panel.\n\n##### Install a bundler\n\nWebpack (recommended):\n\n```text\nyarn add @payloadcms/bundler-webpack\n```\n\nVite (beta):\n\n```text\nyarn add @payloadcms/bundler-vite\n```\n\n##### Configure the bundler\n\n```ts\n// payload.config.ts\n\nimport { buildConfig } from 'payload/config'\nimport { webpackBundler } from '@payloadcms/bundler-webpack'\n// import { viteBundler } from '@payloadcms/bundler-vite'\n\nexport default buildConfig({\n  // highlight-start\n  admin: {\n    bundler: webpackBundler() // or viteBundler()\n  },\n  // highlight-end\n})\n```\n\n### What are bundlers?\n\nAt their core, a bundler's main goal is to take a bunch of files and turn them into a few optimized files that you ship to the browser. The admin UI has a root `index.html` entry point, and from there the bundler traverses the dependency tree, bundling all of the files that are required from that point on.\n\nSince the bundled file is sent to the browser, it can't include any server-only code. You will need to remove any server-only code from your admin UI before bundling it. You can learn more about [excluding server code](../admin/excluding-server-code) section.\n\n<Banner type=\"warning\">\n  <strong>Using environment variables in the admin UI</strong>\n  <br />\n  Bundles should not contain sensitive information. By default, Payload\n  excludes env variables from the bundle. If you need to use env variables in your payload config,\n  you need to prefix them with `PAYLOAD_PUBLIC_` to make them available to the client-side code.\n</Banner>\n",
            "desc": "Bundlers are used to bundle the code that serves Payload's Admin Panel.",
            "headings": [
              {
                "id": "what-are-bundlers",
                "level": 3,
                "text": "What are bundlers?"
              }
            ],
            "keywords": "",
            "label": "Bundlers",
            "order": 60,
            "title": "Bundlers"
          },
          {
            "slug": "excluding-server-code",
            "content": "\nBecause the Admin Panel browser bundle includes your Payload Config file, files using server-only modules need to be excluded.\nIt's common for your config to rely on server only modules to perform logic in access control functions, hooks, and other contexts.\n\nAny file that imports a server-only module such as `fs`, `stripe`, `authorizenet`, `nodemailer`, etc. **cannot** be included in the browser bundle.\n\n#### Example Scenario\n\nSay we have a collection called `Subscriptions` that has a `beforeChange` hook that creates a Stripe subscription whenever a Subscription document is created in Payload.\n\n**Collection config**:\n\n```ts\n// collections/Subscriptions/index.ts\n\nimport { CollectionConfig } from 'payload/types'\nimport createStripeSubscription from './hooks/createStripeSubscription'\n\nexport const Subscription: CollectionConfig = {\n  slug: 'subscriptions',\n  hooks: {\n    beforeChange: [createStripeSubscription],\n  },\n  fields: [\n    {\n      name: 'stripeSubscriptionID',\n      type: 'text',\n      required: true,\n    },\n  ],\n}\n```\n\n**Collection hook**:\n\n```ts\n// collections/Subscriptions/hooks/createStripeSubscription.ts\n\n// highlight-start\nimport Stripe from 'stripe' // <-- server-only module\n// highlight-end\n\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY)\n\nexport const createStripeSubscription = async ({ data, operation }) => {\n  if (operation === 'create') {\n    const dataWithStripeID = { ...data }\n\n    // use Stripe to create a Stripe subscription\n    const subscription = await stripe.subscriptions.create({\n      // Configure the subscription accordingly\n    })\n\n    // Automatically add the Stripe subscription ID\n    // to the data that will be saved to this Subscription doc\n    dataWithStripeID.stripeSubscriptionID = subscription.id\n\n    return dataWithStripeID\n  }\n\n  return data\n}\n```\n\n<Banner type=\"error\">\n  <strong>Warning:</strong>\n  <br />\n  The above code is NOT production-ready and should not be referenced to create Stripe\n  subscriptions. Although creating a beforeChange hook is a completely valid spot to do things like\n  create subscriptions, the code above is incomplete and insecure, meant for explanation purposes\n  only.\n</Banner>\n\n**As-is, this collection will prevent your Admin panel from bundling or loading correctly, because Stripe relies on some Node-only packages.**\n\n#### How to fix this\n\nYou need to make sure that you use `alias`es to tell your bundler to import \"safe\" files vs. attempting to import any server-side code that you need to get rid of. Depending on your bundler (Webpack, Vite, etc.) the steps involved may be slightly different.\n\nThe basic idea is to create a file that exports an empty object, and then alias import paths of any files that import server-only modules to that empty object file.\n\nThis way when your bundler goes to import a file that contains server-only modules, it will instead import the empty object file, which will not break the browser bundle.\n\n### Aliasing server-only modules\n\nTo remove files that contain server-only modules from your bundle, you can use an `alias`.\n\nIn the Subscriptions config file above, we are importing the hook like so:\n\n```ts\n// collections/Subscriptions/index.ts\n\nimport createStripeSubscription from './hooks/createStripeSubscription'\n```\n\nBy default the browser bundle will now include all the code from that file and any files down the tree. We know that the file imports `stripe`.\n\nTo fix this, we need to alias the `createStripeSubscription` file to a different file that can safely be included in the browser bundle.\n\nFirst, we will create a mock file to replace the server-only file when bundling:\n```js\n// mocks/modules.js\n\nexport default {}\n\n/**\n * NOTE: if you are destructuring an import\n * the mock file will need to export matching\n * variables as the destructured object.\n *\n * export const namedExport = {}\n */\n```\n\nAliasing with [Webpack](../admin/webpack) can be done by:\n\n```ts\n// payload.config.ts\n\nimport { buildConfig } from 'payload/config'\nimport { webpackBundler } from '@payloadcms/bundler-webpack'\n\nimport { Subscriptions } from './collections/Subscriptions'\n\nconst mockModulePath = path.resolve(__dirname, 'mocks/emptyObject.js')\nconst fullFilePath = path.resolve(\n  __dirname,\n  'collections/Subscriptions/hooks/createStripeSubscription'\n)\n\nexport default buildConfig({\n  collections: [Subscriptions],\n  admin: {\n    bundler: webpackBundler(),\n    webpack: (config) => {\n      return {\n        ...config,\n        resolve: {\n          ...config.resolve,\n          // highlight-start\n          alias: {\n            ...config.resolve.alias,\n            [fullFilePath]: mockModulePath,\n          },\n          // highlight-end\n        },\n      }\n    },\n  },\n})\n```\n\nAliasing with [Vite](../admin/vite) can be done by:\n\n```ts\n// payload.config.ts\n\nimport { buildConfig } from 'payload/config'\nimport { viteBundler } from '@payloadcms/bundler-vite'\n\nimport { Subscriptions } from './collections/Subscriptions'\n\nconst mockModulePath = path.resolve(__dirname, 'mocks/emptyObject.js')\n\nexport default buildConfig({\n  collections: [Subscriptions],\n  admin: {\n    bundler: viteBundler(),\n    vite: (incomingViteConfig) => {\n      const existingAliases = incomingViteConfig?.resolve?.alias || {};\n      let aliasArray: { find: string | RegExp; replacement: string; }[] = [];\n\n      // Pass the existing Vite aliases\n      if (Array.isArray(existingAliases)) {\n        aliasArray = existingAliases;\n      } else {\n        aliasArray = Object.values(existingAliases);\n      }\n\n\n      // highlight-start\n      // Add your own aliases using the find and replacement keys\n      // remember, vite aliases are exact-match only\n      aliasArray.push({\n        find: '../server-only-module',\n        replacement: path.resolve(__dirname, './path/to/browser-safe-module.js')\n      });\n      // highlight-end\n\n      return {\n        ...incomingViteConfig,\n        resolve: {\n          ...(incomingViteConfig?.resolve || {}),\n          alias: aliasArray,\n        }\n      };\n    },\n  },\n})\n```\n",
            "desc": "Learn how to exclude server-only code from the Payload Admin UI bundle",
            "headings": [
              {
                "id": "aliasing-server-only-modules",
                "level": 3,
                "text": "Aliasing server-only modules"
              }
            ],
            "keywords": "",
            "label": "Excluding server code",
            "order": 70,
            "title": "Excluding server-only code from admin UI"
          },
          {
            "slug": "webpack",
            "content": "\nPayload has a Webpack (v5) bundler that you can build the Admin panel with. For now, we recommended using it because it is stable. If you are feeling a bit more adventurous you can give the [Vite](../admin/vite) bundler a shot.\n\nOut of the box, the Webpack bundler supports common functionalities such as SCSS and Typescript, but there are many cases where you may need to add support for additional functionalities.\n\n#### Installation\n\n```bash\nyarn add @payloadcms/bundler-webpack\n```\n\n#### Import the bundler\n\n```ts\n// payload.config.ts\n\nimport { buildConfig } from 'payload/config'\nimport { webpackBundler } from '@payloadcms/bundler-webpack'\n\nexport default buildConfig({\n  // highlight-start\n  admin: {\n    bundler: webpackBundler()\n  },\n  // highlight-end\n})\n```\n\n### Extending Webpack\n\nIf you need to extend the Webpack config, you can do so by passing a function to the `admin.webpack` property on your Payload config.\nThe function will receive the Webpack config as an argument and should return the modified config.\n\n```ts\n// payload.config.ts\n\nimport { buildConfig } from 'payload/config'\nimport { webpackBundler } from '@payloadcms/bundler-webpack'\n\nexport default buildConfig({\n  admin: {\n    bundler: webpackBundler()\n    // highlight-start\n    webpack: (config) => {\n      // full control of the Webpack config\n\n      return config\n    },\n    // highlight-end\n  },\n})\n```\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  If changes to your Webpack aliases are not surfacing, they might be\n  [cached](https://webpack.js.org/configuration/cache/) in `node_modules/.cache/webpack`. Try\n  deleting that folder and restarting your server.\n</Banner>\n",
            "desc": "The Payload admin panel uses Webpack 5 and supports many common functionalities such as SCSS and Typescript out of the box to give you more freedom.",
            "headings": [
              {
                "id": "extending-webpack",
                "level": 3,
                "text": "Extending Webpack"
              }
            ],
            "keywords": "admin, webpack, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Webpack",
            "order": 80,
            "title": "Webpack"
          },
          {
            "slug": "vite",
            "content": "\n<Banner type=\"info\">\n  The Vite bundler is currently in beta. If you would like to help us test this package, we'd love to hear from you if you find any [bugs or issues](https://github.com/payloadcms/payload/issues/)!\n</Banner>\n\nPayload has a Vite bundler that you can install and bundle the Admin Panel with. This is an alternative to the [Webpack](../admin/webpack) bundler and might give some performance boosts to your development workflow.\n\nTo use Vite as your bundler, first you need to install the package:\n\n```bash\nyarn add @payloadcms/bundler-vite\n```\n\nThen you will need to add the [bundler](../admin/bundlers) to your Payload config:\n\n```ts\nimport { buildConfig } from '@payloadcms/config'\nimport { viteBundler } from '@payloadcms/bundler-vite'\n\nexport default buildConfig({\n  collections: [],\n  admin: {\n    bundler: viteBundler(),\n  }\n})\n```\n\nVite works fundamentally differently than Webpack. In development mode, it will first pre-bundle any of your dependencies that are CommonJS-only, and then it'll leverage ESM directly in your browser for a better HMR experience.\n\nIt then uses Rollup to create production builds of your admin UI. With Vite, you should see a decent performance boost—especially after your first cold start. However, that first cold start might take a few more seconds.\n\n<Banner type=\"warning\">\n  In most cases, Vite should work out of the box. But existing Payload plugins may need to make compatibility changes to support Vite.\n</Banner>\n\nThis is because Vite aliases work fundamentally differently than Webpack aliases, and Payload relies on aliasing server-only code out of the Payload config to ensure that the bundled admin JS works within your browser.\n\nHere are the main differences between how Vite aliases work and how Webpack aliases work.\n\n**Vite aliases do not work with absolute paths.**\n\nIn Vite, alias keys must <strong>exactly match</strong> a import paths. If you have 2 files that import the same server-only module, but have different import paths, you would need to add 2 aliases to support both import paths.\n\n```ts\n// File A\nimport serverOnlyModule from '../server-only-module'\n\n// File B\nimport serverOnlyModule from '../../server-only-module'\n\n// payload.config.ts\n// You would need to add 2 aliases to support both import paths\nexport const buildConfig({\n  collections: [],\n  admin: {\n    bundler: viteBundler(),\n    vite: (incomingViteConfig) => {\n      const existingAliases = incomingViteConfig?.resolve?.alias || {};\n      let aliasArray: { find: string | RegExp; replacement: string; }[] = [];\n\n      // Pass the existing Vite aliases\n      if (Array.isArray(existingAliases)) {\n        aliasArray = existingAliases;\n      } else {\n        aliasArray = Object.values(existingAliases);\n      }\n\n      // Add your own aliases using the find and replacement keys\n      aliasArray.push({\n        find: '../server-only-module',\n        replacement: path.resolve(__dirname, './path/to/browser-safe-module.js')\n        find: '../../server-only-module',\n        replacement: path.resolve(__dirname, './path/to/browser-safe-module.js')\n      });\n\n      return {\n        ...incomingViteConfig,\n        resolve: {\n          ...(incomingViteConfig?.resolve || {}),\n          alias: aliasArray,\n        }\n      };\n    },\n  }\n})\n```\n\n**Vite aliases do not get applied to pre-bundled dependencies.**\n\nThis especially affects plugins, as plugins will be pre-bundled by Vite using `esbuild`. To get around this and support Vite, plugin authors need to configure an alias to their plugin at the top level, so that the alias will work accordingly.\n\nHere's an example. Say your plugin is called `payload-plugin-cool`. It's imported as follows:\n\n```ts\nimport { myCoolPlugin } from 'payload-plugin-cool'\n```\n\nThat plugin should create an alias to support Vite as follows:\n\n```ts\n{\n  // aliases go here\n  find: 'payload-plugin-cool',\n  replacement: path.resolve(__dirname, './my-admin-plugin.js')\n}\n\n```\n\nThis will effectively alias the entire plugin and work with Vite. If the plugin requires admin-specific code, then the `./my-admin-plugin.js` alias target file should reflect any changes necessary to the admin UI that the main server-side plugin performs.\n\n### Extending the Vite config\n\nThe Payload config supports a new property for plugins to be able to extend the Vite config specifically. That property exists on the main Payload config under `admin.vite`. You can check out the [Vite docs](https://vitejs.dev/config/shared-options.html) for more information on what you can do with the Vite config.\n\nIt's a function that takes a Vite config, and returns an updated Vite config. Here's an example:\n\n```ts\nexport const buildConfig({\n  collections: [],\n  admin: {\n    bundler: viteBundler(),\n    vite: (incomingViteConfig) => {\n      const existingAliases = incomingViteConfig?.resolve?.alias || {};\n      let aliasArray: { find: string | RegExp; replacement: string; }[] = [];\n\n      // Pass the existing Vite aliases\n      if (Array.isArray(existingAliases)) {\n        aliasArray = existingAliases;\n      } else {\n        aliasArray = Object.values(existingAliases);\n      }\n\n      // Add your own aliases using the find and replacement keys\n      aliasArray.push({\n        find: '../server-only-module',\n        replacement: path.resolve(__dirname, './path/to/browser-safe-module.js')\n      });\n\n      return {\n        ...incomingViteConfig,\n        resolve: {\n          ...(incomingViteConfig?.resolve || {}),\n          alias: aliasArray,\n        }\n      };\n    },\n  }\n})\n```\n\nLearn more about [aliasing server-only modules](../admin/excluding-server-code#aliasing-server-only-modules).\n\nEven though there is a new property for Vite configs specifically, we have implemented some \"compatibility\" between Webpack and Vite out-of-the-box.\n\nIf your config specifies Webpack aliases, we attempt to leverage them automatically within the Vite config. They are merged into the Vite alias configuration seamlessly and may work out-of-the-box.\n",
            "desc": "NEEDS TO BE WRITTEN",
            "headings": [
              {
                "id": "extending-the-vite-config",
                "level": 3,
                "text": "Extending the Vite config"
              }
            ],
            "keywords": "",
            "label": "Vite",
            "order": 90,
            "title": "Vite"
          },
          {
            "slug": "environment-vars",
            "content": "\n## Admin environment vars\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  Be careful about what variables you provide to your client-side code. Analyze every single one to\n  make sure that you're not accidentally leaking anything that an attacker could exploit. Only keys\n  that are safe for anyone to read in plain text should be provided to your Admin panel.\n</Banner>\n\nBy default, `env` variables are **not** provided to the Admin panel for security and safety reasons.\nBut, Payload provides you with a way to still provide `env` vars to your frontend code.\n\n**Payload will automatically supply any present `env` variables that are prefixed with `PAYLOAD_PUBLIC_` directly to the Admin panel.**\n\nFor example, if you've got the following environment variable:\n\n`PAYLOAD_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_XXXXXXXXXXXXXXXXXX`\n\nThis key will automatically be made available to the Payload bundle and can be referenced in your Admin component code as `process.env.PAYLOAD_PUBLIC_STRIPE_PUBLISHABLE_KEY`.\n",
            "desc": "NEEDS TO BE WRITTEN",
            "headings": [
              {
                "id": "admin-environment-vars",
                "level": 2,
                "text": "Admin environment vars"
              }
            ],
            "keywords": "",
            "label": "Environment Variables",
            "order": 100,
            "title": "Environment Variables in Admin UI"
          }
        ]
      }
    ]
  },
  {
    "groupLabel": "",
    "topics": [
      {
        "slug": "Local-API",
        "docs": [
          {
            "slug": "overview",
            "content": "\nThe Payload Local API gives you the ability to execute the same operations that are available through REST and GraphQL\nwithin Node, directly on your server. Here, you don't need to deal with server latency or network speed whatsoever and\ncan interact directly with your database.\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  The Local API is incredibly powerful when used with server-side rendering app frameworks like\n  NextJS. With other headless CMS, you need to request your data from third-party servers which can\n  add significant loading time to your server-rendered pages. With Payload, you don't have to leave\n  your server to gather the data you need. It can be incredibly fast and is definitely a game\n  changer.\n</Banner>\n\nHere are some common examples of how you can use the Local API:\n\n- Seeding data via Node seed scripts that you write and maintain\n- Opening custom Express routes which feature additional functionality but still rely on Payload\n- Within access control and hook functions\n\n### Accessing payload\n\nYou can gain access to the currently running `payload` object via two ways:\n\n##### Importing it\n\nYou can import or require `payload` into your own files after it's been initialized, but you need to make sure that\nyour `import` / `require` statements come **after** you call `payload.init()`—otherwise Payload won't have been\ninitialized yet. That might be obvious. To us, it's usually not.\n\nExample:\n\n```ts\nimport payload from 'payload'\nimport { CollectionAfterChangeHook } from 'payload/types'\n\nconst afterChangeHook: CollectionAfterChangeHook = async () => {\n  const posts = await payload.find({\n    collection: 'posts',\n  })\n}\n```\n\n##### Accessing from the `req`\n\nPayload is available anywhere you have access to the Express `req` - including within your access control and hook\nfunctions.\n\nExample:\n\n```ts\nconst afterChangeHook: CollectionAfterChangeHook = async ({ req: { payload } }) => {\n  const posts = await payload.find({\n    collection: 'posts',\n  })\n}\n```\n\n### Local options available\n\nYou can specify more options within the Local API vs. REST or GraphQL due to the server-only context that they are\nexecuted in.\n\n| Local Option       | Description                                                                                                                                                                                                                                                                                                                                                           |\n|--------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `collection`       | Required for Collection operations. Specifies the Collection slug to operate against.                                                                                                                                                                                                                                                                                 |\n| `data`             | The data to use within the operation. Required for `create`, `update`.                                                                                                                                                                                                                                                                                                |\n| `depth`            | [Control auto-population](../getting-started/concepts#depth) of nested relationship and upload fields.                                                                                                                                                                                                                                                             |\n| `locale`           | Specify [locale](../configuration/localization) for any returned documents.                                                                                                                                                                                                                                                                                        |\n| `fallbackLocale`   | Specify a [fallback locale](../configuration/localization) to use for any returned documents.                                                                                                                                                                                                                                                                      |\n| `overrideAccess`   | Skip access control. By default, this property is set to true within all Local API operations.                                                                                                                                                                                                                                                                        |\n| `user`             | If you set `overrideAccess` to `false`, you can pass a user to use against the access control checks.                                                                                                                                                                                                                                                                 |\n| `showHiddenFields` | Opt-in to receiving hidden fields. By default, they are hidden from returned documents in accordance to your config.                                                                                                                                                                                                                                                  |\n| `pagination`       | Set to false to return all documents and avoid querying for document counts.                                                                                                                                                                                                                                                                                          |\n| `context`          | [Context](../hooks/context), which will then be passed to `context` and `req.context`, which can be read by hooks. Useful if you want to pass additional information to the hooks which shouldn't be necessarily part of the document, for example a `triggerBeforeChange` option which can be read by the BeforeChange hook to determine if it should run or not. |\n\n_There are more options available on an operation by operation basis outlined below._\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  By default, all access control checks are disabled in the Local API, but you can re-enable them if\n  you'd like, as well as pass a specific user to run the operation with.\n</Banner>\n\n## Collections\n\nThe following Collection operations are available through the Local API:\n\n#### Create\n\n```js\n// The created Post document is returned\nconst post = await payload.create({\n  collection: 'posts', // required\n  data: {\n    // required\n    title: 'sure',\n    description: 'maybe',\n  },\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUserDoc,\n  overrideAccess: true,\n  showHiddenFields: false,\n\n  // If creating verification-enabled auth doc,\n  // you can optionally disable the email that is auto-sent\n  disableVerificationEmail: true,\n\n  // If your collection supports uploads, you can upload\n  // a file directly through the Local API by providing\n  // its full, absolute file path.\n  filePath: path.resolve(__dirname, './path-to-image.jpg'),\n\n  // Alternatively, you can directly pass a File,\n  // if file is provided, filePath will be omitted\n  file: uploadedFile,\n})\n```\n\n#### Find\n\n```js\n// Result will be a paginated set of Posts.\n// See /docs/queries/pagination for more.\nconst result = await payload.find({\n  collection: 'posts', // required\n  depth: 2,\n  page: 1,\n  limit: 10,\n  pagination: false, // If you want to disable pagination count, etc.\n  where: {}, // pass a `where` query here\n  sort: '-title',\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n#### Find by ID\n\n```js\n// Result will be a Post document.\nconst result = await payload.findByID({\n  collection: 'posts', // required\n  id: '507f1f77bcf86cd799439011', // required\n  depth: 2,\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n#### Count\n\n```js\n// Result will be an object with:\n// {\n//   totalDocs: 10, // count of the documents satisfies query\n// }\nconst result = await payload.count({\n  collection: 'posts', // required\n  locale: 'en',\n  where: {}, // pass a `where` query here\n  user: dummyUser,\n  overrideAccess: false,\n})\n```\n\n#### Update by ID\n\n```js\n// Result will be the updated Post document.\nconst result = await payload.update({\n  collection: 'posts', // required\n  id: '507f1f77bcf86cd799439011', // required\n  data: {\n    // required\n    title: 'sure',\n    description: 'maybe',\n  },\n  depth: 2,\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n\n  // If your collection supports uploads, you can upload\n  // a file directly through the Local API by providing\n  // its full, absolute file path.\n  filePath: path.resolve(__dirname, './path-to-image.jpg'),\n\n  // If you are uploading a file and would like to replace\n  // the existing file instead of generating a new filename,\n  // you can set the following property to `true`\n  overwriteExistingFiles: true,\n})\n```\n\n#### Update Many\n\n```js\n// Result will be an object with:\n// {\n//   docs: [], // each document that was updated\n//   errors: [], // each error also includes the id of the document\n// }\nconst result = await payload.update({\n  collection: 'posts', // required\n  where: {\n    // required\n    fieldName: { equals: 'value' },\n  },\n  data: {\n    // required\n    title: 'sure',\n    description: 'maybe',\n  },\n  depth: 0,\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n\n  // If your collection supports uploads, you can upload\n  // a file directly through the Local API by providing\n  // its full, absolute file path.\n  filePath: path.resolve(__dirname, './path-to-image.jpg'),\n\n  // If you are uploading a file and would like to replace\n  // the existing file instead of generating a new filename,\n  // you can set the following property to `true`\n  overwriteExistingFiles: true,\n})\n```\n\n#### Delete\n\n```js\n// Result will be the now-deleted Post document.\nconst result = await payload.delete({\n  collection: 'posts', // required\n  id: '507f1f77bcf86cd799439011', // required\n  depth: 2,\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n#### Delete Many\n\n```js\n// Result will be an object with:\n// {\n//   docs: [], // each document that is now deleted\n//   errors: [], // any errors that occurred, including the id of the errored on document\n// }\nconst result = await payload.delete({\n  collection: 'posts', // required\n  where: {\n    // required\n    fieldName: { equals: 'value' },\n  },\n  depth: 0,\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n## Auth Operations\n\nIf a collection has [`Authentication`](../authentication/overview) enabled, additional Local API operations will be\navailable:\n\n#### Login\n\n```js\n// result will be formatted as follows:\n// {\n//   token: 'o38jf0q34jfij43f3f...', // JWT used for auth\n//   user: { ... } // the user document that just logged in\n//   exp: 1609619861 // the UNIX timestamp when the JWT will expire\n// }\n\nconst result = await payload.login({\n  collection: 'users', // required\n  data: {\n    // required\n    email: 'dev@payloadcms.com',\n    password: 'rip',\n  },\n  req: req, // pass an Express `req` which will be provided to all hooks\n  res: res, // used to automatically set an HTTP-only auth cookie\n  depth: 2,\n  locale: 'en',\n  fallbackLocale: false,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n#### Forgot Password\n\n```js\n// Returned token will allow for a password reset\nconst token = await payload.forgotPassword({\n  collection: 'users', // required\n  data: {\n    // required\n    email: 'dev@payloadcms.com',\n  },\n  req: req, // pass an Express `req` which will be provided to all hooks\n})\n```\n\n#### Reset Password\n\n```js\n// Result will be formatted as follows:\n// {\n//   token: 'o38jf0q34jfij43f3f...', // JWT used for auth\n//   user: { ... } // the user document that just logged in\n// }\nconst result = await payload.resetPassword({\n  collection: 'users', // required\n  data: {\n    // required\n    password: req.body.password, // the new password to set\n    token: 'afh3o2jf2p3f...', // the token generated from the forgotPassword operation\n  },\n  req: req, // pass an Express `req` which will be provided to all hooks\n  res: res, // used to automatically set an HTTP-only auth cookie\n})\n```\n\n#### Unlock\n\n```js\n// Returned result will be a boolean representing success or failure\nconst result = await payload.unlock({\n  collection: 'users', // required\n  data: {\n    // required\n    email: 'dev@payloadcms.com',\n  },\n  req: req, // pass an Express `req` which will be provided to all hooks\n  overrideAccess: true,\n})\n```\n\n#### Verify\n\n```js\n// Returned result will be a boolean representing success or failure\nconst result = await payload.verifyEmail({\n  collection: 'users', // required\n  token: 'afh3o2jf2p3f...', // the token saved on the user as `_verificationToken`\n})\n```\n\n## Globals\n\nThe following Global operations are available through the Local API:\n\n#### Find\n\n```js\n// Result will be the Header Global.\nconst result = await payload.findGlobal({\n  slug: 'header', // required\n  depth: 2,\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n#### Update\n\n```js\n// Result will be the updated Header Global.\nconst result = await payload.updateGlobal({\n  slug: 'header', // required\n  data: {\n    // required\n    nav: [\n      {\n        url: 'https://google.com',\n      },\n      {\n        url: 'https://payloadcms.com',\n      },\n    ],\n  },\n  depth: 2,\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n## Next.js Conflict with Local API\n\nThere is a known issue when using the Local API with Next.js version `13.4.13` and higher. Next.js executes within a\nseparate child process, and Payload has not been initalized yet in these instances. That means that unless you\nexplicitly initialize Payload within your operation, it will not be running and return no data / an empty object.\n\nAs a workaround, we recommend leveraging the following pattern to determine and ensure Payload is initalized:\n\n```\nimport dotenv from 'dotenv'\nimport path from 'path'\nimport type { Payload } from 'payload'\nimport payload from 'payload'\nimport type { InitOptions } from 'payload/config'\nimport { seed as seedData } from './seed'\n\ndotenv.config({\n  path: path.resolve(__dirname, '../.env'),\n})\n\nlet cached = (global as any).payload\n\nif (!cached) {\n  cached = (global as any).payload = { client: null, promise: null }\n}\n\ninterface Args {\n  initOptions?: Partial<InitOptions>\n  seed?: boolean\n}\n\nexport const getPayloadClient = async ({ initOptions, seed }: Args = {}): Promise<Payload> => {\n  if (!process.env.DATABASE_URI) {\n    throw new Error('DATABASE_URI environment variable is missing')\n  }\n  if (!process.env.PAYLOAD_SECRET) {\n    throw new Error('PAYLOAD_SECRET environment variable is missing')\n  }\n  if (cached.client) {\n    return cached.client\n  }\n  if (!cached.promise) {\n    cached.promise = payload.init({\n      mongoURL: process.env.DATABASE_URI,\n      secret: process.env.PAYLOAD_SECRET,\n      local: initOptions?.express ? false : true,\n      ...(initOptions || {}),\n    })\n  }\n  try {\n    process.env.PAYLOAD_DROP_DATABASE = seed ? 'true' : 'false'\n    cached.client = await cached.promise\n    if (seed) {\n      payload.logger.info('---- SEEDING DATABASE ----')\n      await seedData(payload)\n    }\n  } catch (e: unknown) {\n    cached.promise = null\n    throw e\n  }\n  return cached.client\n}\n```\n\nTo checkout how this works in a project, take a look at\nour [custom server example](https://github.com/payloadcms/payload/blob/master/examples/custom-server/src/getPayload.ts).\n\n## Example Script using Local API\n\nThe Local API is especially useful for running scripts\n\n```ts\nimport payload from 'payload'\nimport path from 'path'\nimport dotenv from 'dotenv'\n\ndotenv.config({\n  path: path.resolve(__dirname, '../.env'),\n})\n\nconst { PAYLOAD_SECRET } = process.env\n\nconst doAction = async (): Promise<void> => {\n  await payload.init({\n    secret: PAYLOAD_SECRET,\n    local: true, // Enables local mode, doesn't spin up a server or frontend\n  })\n\n  // Perform any Local API operations here\n  await payload.find({\n    collection: 'posts',\n    // where: {} // optional\n  })\n\n  await payload.create({\n    collection: 'posts',\n    data: {},\n  })\n}\n\ndoAction()\n```\n\n## TypeScript\n\nLocal API calls will automatically infer your [generated types](../typescript/generating-types).\n\nHere is an example of usage:\n\n```ts\n// Properly inferred as `Post` type\nconst post = await payload.create({\n  collection: 'posts',\n\n  // Data will now be typed as Post and give you type hints\n  data: {\n    title: 'my title',\n    description: 'my description',\n  },\n})\n```\n",
            "desc": "The Payload Local API allows you to interact with your database and execute the same operations that are available through REST and GraphQL within Node, directly on your server.",
            "headings": [
              {
                "id": "accessing-payload",
                "level": 3,
                "text": "Accessing payload"
              },
              {
                "id": "local-options-available",
                "level": 3,
                "text": "Local options available"
              },
              {
                "id": "collections",
                "level": 2,
                "text": "Collections"
              },
              {
                "id": "auth-operations",
                "level": 2,
                "text": "Auth Operations"
              },
              {
                "id": "globals",
                "level": 2,
                "text": "Globals"
              },
              {
                "id": "nextjs-conflict-with-local-api",
                "level": 2,
                "text": "Next.js Conflict with Local API"
              },
              {
                "id": "example-script-using-local-api",
                "level": 2,
                "text": "Example Script using Local API"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              }
            ],
            "keywords": "local api, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Local API"
          }
        ]
      },
      {
        "slug": "REST-API",
        "docs": [
          {
            "slug": "overview",
            "content": "\n<Banner>\n  A fully functional REST API is automatically generated from your Collection and Global configs.\n</Banner>\n\nAll Payload API routes are mounted and prefixed to your config's `routes.api` URL segment (default: `/api`).\n\n**REST query parameters:**\n\n- [depth](../getting-started/concepts#depth) - automatically populates relationships and uploads\n- [locale](../configuration/localization#retrieving-localized-docs) - retrieves document(s) in a specific locale\n- [fallback-locale](../configuration/localization#retrieving-localized-docs) - specifies a fallback locale if no locale value exists\n\n## Collections\n\nEach collection is mounted using its `slug` value. For example, if a collection's slug is `users`, all corresponding routes will be mounted on `/api/users`.\n\nNote: Collection slugs must be formatted in kebab-case\n\n**All CRUD operations are exposed as follows:**\n\n<RestExamples\n  data={[\n    {\n      operation: \"Find\",\n      method: \"GET\",\n      path: \"/api/{collection-slug}\",\n      description: \"Find paginated documents\",\n      example: {\n        slug: \"getCollection\",\n        req: true,\n        res: {\n          paginated: true,\n          data: {\n            id: \"644a5c24cc1383022535fc7c\",\n            title: \"Home\",\n            content: \"REST API examples\",\n            slug: \"home\",\n            createdAt: \"2023-04-27T11:27:32.419Z\",\n            updatedAt: \"2023-04-27T11:27:32.419Z\",\n          },\n        },\n        drawerContent: (\n          <>\n            <h6>Additional <code>find</code> query parameters</h6>\n            The <code>find</code> endpoint supports the following additional query parameters:\n            <ul>\n              <li>\n                <a href=\"../queries/overview#sort\">sort</a> - sort by field\n              </li>\n              <li>\n                <a href=\"../queries/overview\">where</a> - pass a where query to constrain returned\n                documents\n              </li>\n              <li>\n                <a href=\"../queries/pagination#pagination-controls\">limit</a> - limit the returned\n                documents to a certain number\n              </li>\n              <li>\n                <a href=\"../queries/pagination#pagination-controls\">page</a> - get a specific page of\n                documents\n              </li>\n            </ul>\n          </>\n        ),\n      },\n    },\n    {\n      operation: \"Find By ID\",\n      method: \"GET\",\n      path: \"/api/{collection-slug}/{id}\",\n      description: \"Find a specific document by ID\",\n      example: {\n        slug: \"findByID\",\n        req: true,\n        res: {\n          id: \"644a5c24cc1383022535fc7c\",\n          title: \"Home\",\n          content: \"REST API examples\",\n          slug: \"home\",\n          createdAt: \"2023-04-27T11:27:32.419Z\",\n          updatedAt: \"2023-04-27T11:27:32.419Z\",\n        },\n      },\n    },\n    {\n      operation: \"Count\",\n      method: \"GET\",\n      path: \"/api/{collection-slug}/count\",\n      description: \"Count the documents\",\n      example: {\n        slug: \"count\",\n        req: true,\n        res: {\n         totalDocs: 10\n        },\n      },\n    },\n    {\n      operation: \"Create\",\n      method: \"POST\",\n      path: \"/api/{collection-slug}\",\n      description: \"Create a new document\",\n      example: {\n        slug: \"createDocument\",\n        req: {\n          credentials: true,\n          headers: true,\n          body: {\n            title: \"New page\",\n            content: \"Here is some content\",\n          },\n        },\n        res: {\n          message: \"Page successfully created.\",\n          doc: {\n            id: \"644ba34c86359864f9535932\",\n            title: \"New page\",\n            content: \"Here is some content\",\n            slug: \"new-page\",\n            createdAt: \"2023-04-28T10:43:24.466Z\",\n            updatedAt: \"2023-04-28T10:43:24.466Z\",\n          },\n        },\n      },\n    },\n    {\n      operation: \"Update\",\n      method: \"PATCH\",\n      path: \"/api/{collection-slug}\",\n      description: \"Update all documents matching the where query\",\n      example: {\n        slug: \"updateDocument\",\n        req: {\n          credentials: true,\n          query: true,\n          headers: true,\n          body: {\n            title: \"I have been updated!\",\n          },\n        },\n        res: {\n          docs: [\n            {\n              id: \"644ba34c86359864f9535932\",\n              title: \"I have been updated!\",\n              content: \"Here is some content\",\n              slug: \"new-page\",\n              createdAt: \"2023-04-28T10:43:24.466Z\",\n              updatedAt: \"2023-04-28T10:45:23.724Z\",\n            },\n          ],\n          errors: [],\n        },\n      },\n    },\n    {\n      operation: \"Update By ID\",\n      method: \"PATCH\",\n      path: \"/api/{collection-slug}/{id}\",\n      description: \"Update a document by ID\",\n      example: {\n        slug: \"updateDocumentByID\",\n        req: {\n          credentials: true,\n          headers: true,\n          body: {\n            title: \"I have been updated by ID!\",\n            categories: \"example-uuid\",\n            tags: {\n              relationTo: \"location\",\n              value: \"another-example-uuid\",\n            },\n          },\n        },\n        res: {\n          message: \"Updated successfully.\",\n          doc: {\n            id: \"644a5c24cc1383022535fc7c\",\n            title: \"I have been updated by ID!\",\n            content: \"REST API examples\",\n            categories: {\n              id: \"example-uuid\",\n              name: \"Test Category\",\n            },\n            tags: [\n              {\n                relationTo: \"location\",\n                value: {\n                  id: \"another-example-uuid\",\n                  name: \"Test Location\",\n                },\n              },\n            ],\n            slug: \"home\",\n            createdAt: \"2023-04-27T11:27:32.419Z\",\n            updatedAt: \"2023-04-28T10:47:59.259Z\",\n          },\n        },\n      },\n    },\n    {\n      operation: \"Delete\",\n      method: \"DELETE\",\n      path: \"/api/{collection-slug}\",\n      description: \"Delete all documents matching the where query\",\n      example: {\n        slug: \"deleteDocuments\",\n        req: {\n          credentials: true,\n          query: true,\n          headers: true,\n        },\n        res: {\n          docs: [\n            {\n              id: \"644ba4cf86359864f953594b\",\n              title: \"New page\",\n              content: \"Here is some content\",\n              slug: \"new-page\",\n              createdAt: \"2023-04-28T10:49:51.359Z\",\n              updatedAt: \"2023-04-28T10:49:51.359Z\",\n            },\n          ],\n          errors: [],\n        },\n      },\n    },\n    {\n      operation: \"Delete by ID\",\n      method: \"DELETE\",\n      path: \"/api/{collection-slug}/{id}\",\n      description: \"Delete an existing document by ID\",\n      example: {\n        slug: \"deleteByID\",\n        req: {\n          credentials: true,\n          headers: true,\n        },\n        res: {\n          id: \"644ba51786359864f9535954\",\n          title: \"New page\",\n          content: \"Here is some content\",\n          slug: \"new-page\",\n          createdAt: \"2023-04-28T10:51:03.028Z\",\n          updatedAt: \"2023-04-28T10:51:03.028Z\",\n        },\n      },\n    },\n\n]}\n/>\n\n## Auth Operations\n\nAuth enabled collections are also given the following endpoints:\n\n<RestExamples\n  data={[\n    {\n      operation: \"Login\",\n      method: \"POST\",\n      path: \"/api/{user-collection}/login\",\n      description: \"Logs in a user with email / password\",\n      example: {\n        slug: \"login\",\n        req: {\n          credentials: true,\n          headers: true,\n          body: {\n            email: \"dev@payloadcms.com\",\n            password: \"password\",\n          },\n        },\n        res: {\n          message: \"Auth Passed\",\n          user: {\n            id: \"644b8453cd20c7857da5a9b0\",\n            email: \"dev@payloadcms.com\",\n            _verified: true,\n            createdAt: \"2023-04-28T08:31:15.788Z\",\n            updatedAt: \"2023-04-28T11:11:03.716Z\",\n          },\n          token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n          exp: 1682689147,\n        },\n      },\n    },\n    {\n      operation: \"Logout\",\n      method: \"POST\",\n      path: \"/api/{user-collection}/logout\",\n      description: \"Logs out a user\",\n      example: {\n        slug: \"logout\",\n        req: {\n          headers: true,\n          credentials: true,\n        },\n        res: {\n          message: \"You have been logged out successfully.\",\n        },\n      },\n    },\n    {\n      operation: \"Unlock\",\n      method: \"POST\",\n      path: \"/api/{user-collection}/unlock\",\n      description: \"Unlock a user account\",\n      example: {\n        slug: \"unlockCollection\",\n        req: {\n          credentials: true,\n          headers: true,\n          body: {\n            email: \"dev@payloadcms.com\",\n          },\n        },\n        res: {\n          message: \"Success\",\n        },\n      },\n    },\n    {\n      operation: \"Refresh\",\n      method: \"POST\",\n      path: \"/api/{user-collection}/refresh-token\",\n      description: \"Refreshes a token that has not yet expired\",\n      example: {\n        slug: \"refreshToken\",\n        req: {\n          credentials: true,\n          headers: true,\n        },\n        res: {\n          message: \"Token refresh successful\",\n          refreshedToken: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n          exp: 1682689362,\n          user: {\n            email: \"dev@payloadcms.com\",\n            id: \"644b8453cd20c7857da5a9b0\",\n            collection: \"users\",\n          },\n        },\n      },\n    },\n    {\n      operation: \"Verify User\",\n      method: \"POST\",\n      path: \"/api/{user-collection}/verify/{token}\",\n      description: \"User verification\",\n      example: {\n        slug: \"verifyUser\",\n        req: {\n          credentials: true,\n          headers: true,\n        },\n        res: {\n          message: \"Email verified successfully.\",\n        },\n      },\n    },\n    {\n      operation: \"Current User\",\n      method: \"GET\",\n      path: \"/api/{user-collection}/me\",\n      description: \"Returns the currently logged in user with token\",\n      example: {\n        slug: \"currentUser\",\n        req: {\n          credentials: true,\n          headers: true,\n        },\n        res: {\n          user: {\n            id: \"644b8453cd20c7857da5a9b0\",\n            email: \"dev@payloadcms.com\",\n            _verified: true,\n            createdAt: \"2023-04-28T08:31:15.788Z\",\n            updatedAt: \"2023-04-28T11:45:23.926Z\",\n            _strategy: \"local-jwt\",\n          },\n          collection: \"users\",\n          token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n          exp: 1682689523,\n        },\n      },\n    },\n    {\n      operation: \"Forgot Password\",\n      method: \"POST\",\n      path: \"/api/{user-collection}/forgot-password\",\n      description: \"Password reset workflow entry point\",\n      example: {\n        slug: \"forgotPassword\",\n        req: {\n          headers: true,\n          credentials: true,\n          body: {\n            email: \"dev@payloadcms.com\",\n          },\n        },\n        res: {\n          message: \"Success\",\n        },\n      },\n    },\n    {\n      operation: \"Reset Password\",\n      method: \"POST\",\n      path: \"/api/{user-collection}/reset-password\",\n      description: \"Reset user password\",\n      example: {\n        slug: \"resetPassword\",\n        req: {\n          credentials: true,\n          headers: true,\n          body: {\n            token: \"7eac3830ffcfc7f9f66c00315dabeb11575dba91\",\n            password: \"newPassword\",\n          },\n        },\n        res: {\n          message: \"Password reset successfully.\",\n          token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\",\n          user: {\n            id: \"644baa473ea9538765cc30fc\",\n            email: \"dev@payloadcms.com\",\n            _verified: true,\n            createdAt: \"2023-04-28T11:13:11.569Z\",\n            updatedAt: \"2023-04-28T11:49:23.860Z\",\n          },\n        },\n      },\n    },\n\n]}\n/>\n\n## Globals\n\nGlobals cannot be created or deleted, so there are only two REST endpoints opened:\n\n<RestExamples\n  data={[\n    {\n      operation: 'Get Global',\n      method: 'GET',\n      path: '/api/globals/{global-slug}',\n      description: 'Get a global by slug',\n      example: {\n        slug: 'getGlobal',\n        req: {\n          credentials: true,\n          headers: true,\n        },\n        res: {\n          announcement: 'Here is an announcement!',\n          globalType: 'announcement',\n          createdAt: '2023-04-28T08:53:56.066Z',\n          updatedAt: '2023-04-28T08:53:56.066Z',\n          id: '644b89a496c64a833fe579c9',\n        },\n      },\n    },\n    {\n      operation: 'Update Global',\n      method: 'POST',\n      path: '/api/globals/{global-slug}',\n      description: 'Update a global by slug',\n      example: {\n        slug: 'updateGlobal',\n        req: {\n          headers: true,\n          credentials: true,\n          body: {\n            announcement: 'Paging Doctor Scrunt',\n          },\n        },\n        res: {\n          announcement: 'Paging Doctor Scrunt',\n          globalType: 'announcement',\n          createdAt: '2023-04-28T08:53:56.066Z',\n          updatedAt: '2023-04-28T08:53:56.066Z',\n          id: '644b89a496c64a833fe579c9',\n        },\n      },\n    },\n  ]}\n/>\n\n## Preferences\n\nIn addition to the dynamically generated endpoints above Payload also has REST endpoints to manage the admin user [preferences](../admin/overview#preferences) for data specific to the authenticated user.\n\n<RestExamples\n  data={[\n    {\n      operation: 'Get Preference',\n      method: 'GET',\n      path: '/api/payload-preferences/{key}',\n      description: 'Get a preference by key',\n      example: {\n        slug: 'getPreference',\n        req: {\n          headers: true,\n          credentials: true,\n        },\n        res: {\n          _id: '644bb7a8307b3d363c6edf2c',\n          key: 'region',\n          user: '644b8453cd20c7857da5a9b0',\n          userCollection: 'users',\n          __v: 0,\n          createdAt: '2023-04-28T12:10:16.689Z',\n          updatedAt: '2023-04-28T12:10:16.689Z',\n          value: 'Europe/London',\n        },\n      },\n    },\n    {\n      operation: 'Create Preference',\n      method: 'POST',\n      path: '/api/payload-preferences/{key}',\n      description: 'Create or update a preference by key',\n      example: {\n        slug: 'createPreference',\n        req: {\n          headers: true,\n          credentials: true,\n          body: {\n            value: 'Europe/London',\n          },\n        },\n        res: {\n          message: 'Updated successfully.',\n          doc: {\n            user: '644b8453cd20c7857da5a9b0',\n            key: 'region',\n            userCollection: 'users',\n            value: 'Europe/London',\n          },\n        },\n      },\n    },\n    {\n      operation: 'Delete Preference',\n      method: 'DELETE',\n      path: '/api/payload-preferences/{key}',\n      description: 'Delete a preference by key',\n      example: {\n        slug: 'deletePreference',\n        req: {\n          headers: true,\n        },\n        res: {\n          message: 'deletedSuccessfully',\n        },\n      },\n    },\n  ]}\n/>\n\n## Custom Endpoints\n\nAdditional REST API endpoints can be added to your application by providing an array of `endpoints` in various places within a Payload config. Custom endpoints are useful for adding additional middleware on existing routes or for building custom functionality into Payload apps and plugins. Endpoints can be added at the top of the Payload config, `collections`, and `globals` and accessed respective of the api and slugs you have configured.\n\nEach endpoint object needs to have:\n\n| Property      | Description                                                                                                                                                                                                                                                |\n| ------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`path`**    | A string for the endpoint route after the collection or globals slug                                                                                                                                                                                       |\n| **`method`**  | The lowercase HTTP verb to use: 'get', 'head', 'post', 'put', 'delete', 'connect' or 'options'                                                                                                                                                             |\n| **`handler`** | A function or array of functions to be called with **req**, **res** and **next** arguments. [Express](https://expressjs.com/en/guide/routing.html#route-handlers)                                                                                          |\n| **`root`**    | When `true`, defines the endpoint on the root Express app, bypassing Payload handlers and the `routes.api` subpath. Note: this only applies to top-level endpoints of your Payload config, endpoints defined on `collections` or `globals` cannot be root. |\n| **`custom`**  | Extension point for adding custom data (e.g. for plugins)                                                                                                                                                                                                  |\n\nExample:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\n// a collection of 'orders' with an additional route for tracking details, reachable at /api/orders/:id/tracking\nexport const Orders: CollectionConfig = {\n  slug: 'orders',\n  fields: [\n    /* ... */\n  ],\n  // highlight-start\n  endpoints: [\n    {\n      path: '/:id/tracking',\n      method: 'get',\n      handler: async (req, res, next) => {\n        const tracking = await getTrackingInfo(req.params.id)\n        if (tracking) {\n          res.status(200).send({ tracking })\n        } else {\n          res.status(404).send({ error: 'not found' })\n        }\n      },\n    },\n  ],\n  // highlight-end\n}\n```\n\n<Banner>\n  <strong>Note:</strong>\n  <br />\n  **req** will have the **payload** object and can be used inside your endpoint handlers for making\n  calls like req.payload.find() that will make use of access control and hooks.\n</Banner>\n",
            "desc": "Payload generates a fully functional REST API from your Collection and Global configs.",
            "headings": [
              {
                "id": "collections",
                "level": 2,
                "text": "Collections"
              },
              {
                "id": "auth-operations",
                "level": 2,
                "text": "Auth Operations"
              },
              {
                "id": "globals",
                "level": 2,
                "text": "Globals"
              },
              {
                "id": "preferences",
                "level": 2,
                "text": "Preferences"
              },
              {
                "id": "custom-endpoints",
                "level": 2,
                "text": "Custom Endpoints"
              }
            ],
            "keywords": "rest, api, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "REST API"
          }
        ]
      },
      {
        "slug": "GraphQL",
        "docs": [
          {
            "slug": "overview",
            "content": "\nIn addition to its REST and Local APIs, Payload ships with a fully featured and extensible GraphQL API.\n\nBy default, the GraphQL API is exposed via `/api/graphql`, but you can customize this URL via specifying your `routes` within the main Payload config.\n\nThe labels you provide for your Collections and Globals are used to name the GraphQL types that are created to correspond to your config. Special characters and spaces are removed.\n\n## GraphQL Options\n\nAt the top of your Payload config you can define all the options to manage GraphQL.\n\n| Option                          | Description                                                                                                                                                   |\n| ------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `mutations`                     | Any custom Mutations to be added in addition to what Payload provides. [More](../graphql/extending)                                                        |\n| `queries`                       | Any custom Queries to be added in addition to what Payload provides. [More](../graphql/extending)                                                          |\n| `maxComplexity`                 | A number used to set the maximum allowed complexity allowed by requests [More](../graphql/overview#query-complexity-limits)                                |\n| `disablePlaygroundInProduction` | A boolean that if false will enable the GraphQL playground, defaults to true. [More](../graphql/overview#graphql-playground)                               |\n| `disable`                       | A boolean that if true will disable the GraphQL entirely, defaults to false.                                                                                  |\n| `schemaOutputFile`              | A string for the file path used by the generate schema command. Defaults to `graphql.schema` next to `payload.config.ts` [More](../graphql/graphql-schema) |\n\n## Collections\n\nEverything that can be done to a Collection via the REST or Local API can be done with GraphQL (outside of uploading files, which is REST-only). If you have a collection as follows:\n\n```ts\nimport { CollectionConfig } from 'payload/types';\n\nexport const PublicUser: CollectionConfig = {\n  slug: 'public-users',\n  auth: true, // Auth is enabled\n  fields: [\n    ...\n  ],\n}\n```\n\n**Payload will automatically open up the following queries:**\n\n| Query Name              | Operation           |\n| ------------------      | ------------------- |\n| **`PublicUser`**        | `findByID`          |\n| **`PublicUsers`**       | `find`              |\n| **`countPublicUsers`**  | `count`             |\n| **`mePublicUser`**      | `me` auth operation |\n\n**And the following mutations:**\n\n| Query Name                     | Operation                       |\n| ------------------------------ | ------------------------------- |\n| **`createPublicUser`**         | `create`                        |\n| **`updatePublicUser`**         | `update`                        |\n| **`deletePublicUser`**         | `delete`                        |\n| **`forgotPasswordPublicUser`** | `forgotPassword` auth operation |\n| **`resetPasswordPublicUser`**  | `resetPassword` auth operation  |\n| **`unlockPublicUser`**         | `unlock` auth operation         |\n| **`verifyPublicUser`**         | `verify` auth operation         |\n| **`loginPublicUser`**          | `login` auth operation          |\n| **`logoutPublicUser`**         | `logout` auth operation         |\n| **`refreshTokenPublicUser`**   | `refresh` auth operation        |\n\n## Globals\n\nGlobals are also fully supported. For example:\n\n```ts\nimport { GlobalConfig } from 'payload/types';\n\nconst Header: GlobalConfig = {\n  slug: 'header',\n  fields: [\n    ...\n  ],\n}\n```\n\n**Payload will open the following query:**\n\n| Query Name   | Operation |\n| ------------ | --------- |\n| **`Header`** | `findOne` |\n\n**And the following mutation:**\n\n| Query Name         | Operation |\n| ------------------ | --------- |\n| **`updateHeader`** | `update`  |\n\n## Preferences\n\nUser [preferences](../admin/overview#preferences) for the admin panel are also available to GraphQL the same way as other collection schemas are generated. To query preferences you must supply an authorization token in the header and only the preferences of that user will be accessible.\n\n**Payload will open the following query:**\n\n| Query Name       | Operation |\n| ---------------- | --------- |\n| **`Preference`** | `findOne` |\n\n**And the following mutations:**\n\n| Query Name             | Operation |\n| ---------------------- | --------- |\n| **`updatePreference`** | `update`  |\n| **`deletePreference`** | `delete`  |\n\n## GraphQL Playground\n\nGraphQL Playground is enabled by default for development purposes, but disabled in production. You can enable it in production by passing `graphQL.disablePlaygroundInProduction` a `false` setting in the main Payload config.\n\nYou can even log in using the `login[collection-singular-label-here]` mutation to use the Playground as an authenticated user.\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  To see more regarding how the above queries and mutations are used, visit your GraphQL playground\n  (by default at\n  [http://localhost:3000/api/graphql-playground](http://localhost:3000/api/graphql-playground))\n  while your server is running. There, you can use the \"Schema\" and \"Docs\" buttons on the right to\n  see a ton of detail about how GraphQL operates within Payload.\n</Banner>\n\n## Query complexity limits\n\nPayload comes with a built-in query complexity limiter to prevent bad people from trying to slow down your server by running massive queries. To learn more, [click here](../production/preventing-abuse#limiting-graphql-complexity).\n",
            "desc": "Payload ships with a fully featured and extensible GraphQL API, which can be used in addition to the REST and Local APIs to give you more flexibility.",
            "headings": [
              {
                "id": "graphql-options",
                "level": 2,
                "text": "GraphQL Options"
              },
              {
                "id": "collections",
                "level": 2,
                "text": "Collections"
              },
              {
                "id": "globals",
                "level": 2,
                "text": "Globals"
              },
              {
                "id": "preferences",
                "level": 2,
                "text": "Preferences"
              },
              {
                "id": "graphql-playground",
                "level": 2,
                "text": "GraphQL Playground"
              },
              {
                "id": "query-complexity-limits",
                "level": 2,
                "text": "Query complexity limits"
              }
            ],
            "keywords": "graphql, resolvers, mutations, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "GraphQL Overview"
          },
          {
            "slug": "extending",
            "content": "\nYou can add your own GraphQL queries and mutations to Payload, making use of all the types that Payload has defined for you.\n\nTo do so, add your queries and mutations to the main Payload config as follows:\n\n| Config Path         | Description                                                                 |\n| ------------------- | --------------------------------------------------------------------------- |\n| `graphQL.queries`   | Function that returns an object containing keys to custom GraphQL queries   |\n| `graphQL.mutations` | Function that returns an object containing keys to custom GraphQL mutations |\n\nThe above properties each receive a function that is defined with the following arguments:\n\n**`GraphQL`**\n\nThis is Payload's GraphQL dependency. You should not install your own copy of GraphQL as a dependency due to underlying restrictions based on how GraphQL works. Instead, you can use the Payload-provided copy via this argument.\n\n**`payload`**\n\nThis is a copy of the currently running Payload instance, which provides you with existing GraphQL types for all of your Collections and Globals - among other things.\n\n##### Return value\n\nBoth `graphQL.queries` and `graphQL.mutations` functions should return an object with properties equal to your newly written GraphQL queries and mutations.\n\n### Example\n\n`payload.config.js`:\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport myCustomQueryResolver from './graphQL/resolvers/myCustomQueryResolver'\n\nexport default buildConfig({\n  graphQL: {\n    // highlight-start\n    queries: (GraphQL, payload) => {\n      return {\n        MyCustomQuery: {\n          type: new GraphQL.GraphQLObjectType({\n            name: 'MyCustomQuery',\n            fields: {\n              text: {\n                type: GraphQL.GraphQLString,\n              },\n              someNumberField: {\n                type: GraphQL.GraphQLFloat,\n              },\n            },\n          }),\n          args: {\n            argNameHere: {\n              type: new GraphQL.GraphQLNonNull(GraphQLString),\n            },\n          },\n          resolve: myCustomQueryResolver,\n        },\n      }\n    },\n    // highlight-end\n  },\n})\n```\n\n### Resolver function\n\nIn your resolver, make sure you set `depth: 0` if you're returning data directly from the local API so that GraphQL can correctly resolve queries to nested values such as relationship data.\n\nYour function will receive four arguments you can make use of:\n\nExample\n\n```ts\n;async (obj, args, context, info) => {}\n```\n\n**`obj`**\n\nThe previous object. Not very often used and usually discarded.\n\n**`args`**\n\nThe available arguments from your query or mutation will be available to you here, these must be configured via the custom operation first.\n\n**`context`**\n\nAn object containing the `req` and `res` objects that will provide you with the `payload`, `user` instances and more, like any other Payload API handler.\n\n**`info`**\n\nContextual information about the currently running GraphQL operation. You can get schema information from this as well as contextual information about where this resolver function is being run.\n\n### Types\n\nWe've exposed a few types and utilities to help you extend the API further. Payload uses the GraphQL.js package for which you can view the full list of available types in the [official documentation](https://graphql.org/graphql-js/type/).\n\n**`GraphQL`**\n\nYou can directly import the GraphQL package used by Payload, most useful for typing. For queries, mutations and handlers make sure you use the `GraphQL` and `payload` instances provided via arguments.\n\n**`buildPaginatedListType`**\n\nThis is a utility function that allows you to build a new GraphQL type for a paginated result similar to the Payload's generated schema.\nIt takes in two arguments, the first for the name of this new schema type and the second for the GraphQL type to be used in the docs parameter.\n\nExample\n\n```ts\nexport const getMyPosts = (GraphQL, payload) => {\n  return {\n    args: {},\n    resolve: Resolver,\n    // The name of your new type has to be unique\n    type: buildPaginatedListType('AuthorPosts', payload.collections['posts'].graphQL?.type),\n  }\n}\n```\n\n**`payload.collections.slug.graphQL`**\n\nIf you want to extend more of the provided API then the `graphQL` object on your collection slug will contain additional types to help you re-use code for types, mutations and queries.\n\n```ts\ngraphQL?: {\n  type: GraphQLObjectType\n  paginatedType: GraphQLObjectType\n  JWT: GraphQLObjectType\n  versionType: GraphQLObjectType\n  whereInputType: GraphQLInputObjectType\n  mutationInputType: GraphQLNonNull<any>\n  updateMutationInputType: GraphQLNonNull<any>\n}\n```\n\n### Best practices\n\nThere are a few ways to structure your code, we recommend using a dedicated `graphql` directory so you can keep all of your logic in one place. You have total freedom of how you want to structure this but a common pattern is to group functions by type and with their resolver.\n\nExample\n\n```\nsrc/graphql\n---- queries/\n     index.ts\n    -- myCustomQuery/\n       index.ts\n       resolver.ts\n\n---- mutations/\n```\n",
            "desc": "Payload allows you to add your own GraphQL queries and mutations, simply set up GraphQL in your main Payload config by following these instructions.",
            "headings": [
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              },
              {
                "id": "resolver-function",
                "level": 3,
                "text": "Resolver function"
              },
              {
                "id": "types",
                "level": 3,
                "text": "Types"
              },
              {
                "id": "best-practices",
                "level": 3,
                "text": "Best practices"
              }
            ],
            "keywords": "graphql, resolvers, mutations, custom, queries, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Custom Queries and Mutations",
            "order": 20,
            "title": "Adding your own Queries and Mutations"
          },
          {
            "slug": "graphql-schema",
            "content": "\nWhen working with GraphQL it is useful to have the schema for development of other projects that need to call on your GraphQL endpoint. In Payload the schema is controlled by your collections and globals and is made available to the developer or third parties, it is not necessary for developers using Payload to write schema types manually.\n\n### Schema generation script\n\nRun the following command in a Payload project to generate your project's GraphQL schema from Payload:\n\n```\npayload generate:graphQLSchema\n```\n\nYou can run this command whenever you need to regenerate your GraphQL schema and output it to a file, and then you can use the schema for writing your own GraphQL elsewhere in other projects.\n\n### Custom output file path\n\n```js\n{\n  // the remainder of your config\n\tgraphQL: {\n\t\tschemaOutputFile: path.resolve(__dirname, './graphql/schema.graphql'),\n\t},\n}\n```\n\n### Custom Field Schemas\n\nFor `array`, `block`, `group` and named `tab` fields, you can generate top level reusable interfaces. The following group field config:\n\n```ts\n{\n  type: 'group',\n  name: 'meta',\n  interfaceName: 'SharedMeta', <-- here!!\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n    },\n    {\n      name: 'description',\n      type: 'text',\n    },\n  ],\n}\n```\n\nwill generate:\n\n```ts\n// a top level reusable type!!\ntype SharedMeta {\n  title: String\n  description: String\n}\n\n// example usage inside collection schema\ntype Collection1 {\n  // ...other fields\n  meta: SharedMeta\n}\n```\n\nThe above example outputs all your definitions to a file relative from your payload config as `./graphql/schema.graphql`. By default, the file will be output to your current working directory as `schema.graphql`.\n\n#### Adding an NPM script\n\n<Banner type=\"warning\">\n  <strong>Important</strong>\n  <br />\n  Payload needs to be able to find your config to generate your GraphQL schema.\n</Banner>\n\nPayload will automatically try and locate your config, but might not always be able to find it. For example, if you are working in a `/src` directory or similar, you need to tell Payload where to find your config manually by using an environment variable. If this applies to you, you can create an NPM script to make generating your types easier.\n\nTo add an NPM script to generate your types and show Payload where to find your config, open your `package.json` and update the `scripts` property to the following:\n\n```json\n{\n  \"scripts\": {\n    \"generate:graphQLSchema\": \"cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts payload generate:graphQLSchema\"\n  }\n}\n```\n\nNow you can run `yarn generate:graphQLSchema` to easily generate your schema.\n",
            "desc": "Output your own GraphQL schema based on your collections and globals to a file.",
            "headings": [
              {
                "id": "schema-generation-script",
                "level": 3,
                "text": "Schema generation script"
              },
              {
                "id": "custom-output-file-path",
                "level": 3,
                "text": "Custom output file path"
              },
              {
                "id": "custom-field-schemas",
                "level": 3,
                "text": "Custom Field Schemas"
              }
            ],
            "keywords": "headless cms, typescript, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "GraphQL Schema",
            "order": 30,
            "title": "GraphQL Schema"
          }
        ]
      },
      {
        "slug": "Queries",
        "docs": [
          {
            "slug": "overview",
            "content": "\nPayload provides an extremely granular querying language through all APIs. Each API takes the same syntax and fully supports all options.\n\n<Banner>\n  <strong>Here, \"querying\" relates to filtering or searching through documents within a Collection.</strong>{' '}\n  You can build queries to pass to Find operations as well as to [restrict which documents certain\n  users can access](../access-control/overview) via access control functions.\n</Banner>\n\n### Simple queries\n\nFor example, say you have a collection as follows:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Post: CollectionConfig = {\n  slug: 'posts',\n  fields: [\n    {\n      name: 'color',\n      type: 'select',\n      options: ['mint', 'dark-gray', 'white'],\n    },\n    {\n      name: 'featured',\n      type: 'checkbox',\n    },\n  ],\n}\n```\n\nYou may eventually have a lot of documents within this Collection. If you wanted to find only documents with `color` equal to `mint`, you could write a query as follows:\n\n```js\nconst query = {\n  color: {\n    // property name to filter on\n    equals: 'mint', // operator to use and value to compare against\n  },\n}\n```\n\nThe above example demonstrates a simple query but you can get much more complex.\n\n### Operators\n\n| Operator             | Description                                                                                                                                                                       |\n| -------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `equals`             | The value must be exactly equal.                                                                                                                                                  |\n| `not_equals`         | The query will return all documents where the value is not equal.                                                                                                                 |\n| `greater_than`       | For numeric or date-based fields.                                                                                                                                                 |\n| `greater_than_equal` | For numeric or date-based fields.                                                                                                                                                 |\n| `less_than`          | For numeric or date-based fields.                                                                                                                                                 |\n| `less_than_equal`    | For numeric or date-based fields.                                                                                                                                                 |\n| `like`               | Case-insensitive string must be present. If string of words, all words must be present, in any order.                                                                             |\n| `contains`           | Must contain the value entered, case-insensitive.                                                                                                                                 |\n| `in`                 | The value must be found within the provided comma-delimited list of values.                                                                                                       |\n| `not_in`             | The value must NOT be within the provided comma-delimited list of values.                                                                                                         |\n| `all`                | The value must contain all values provided in the comma-delimited list.                                                                                                           |\n| `exists`             | Only return documents where the value either exists (`true`) or does not exist (`false`).                                                                                         |\n| `near`               | For distance related to a [point field](../fields/point) comma separated as `<longitude>, <latitude>, <maxDistance in meters (nullable)>, <minDistance in meters (nullable)>`. |\n\n<Banner type=\"success\">\n  <strong>Tip</strong>:<br />\n  If you know your users will be querying on certain fields a lot, you can add <strong>\n    index: true\n  </strong> to a field's config which will speed up searches using that field immensely.\n</Banner>\n\n### And / Or Logic\n\nIn addition to defining simple queries, you can join multiple queries together using simple AND / OR logic. Let's take the above `Post` collection for example and write a more complex query using AND / OR:\n\n```js\nconst query = {\n  or: [\n    // array of OR conditions\n    {\n      color: {\n        equals: 'mint',\n      },\n    },\n    {\n      and: [\n        // nested array of AND conditions\n        {\n          color: {\n            equals: 'white',\n          },\n        },\n        {\n          featured: {\n            equals: false,\n          },\n        },\n      ],\n    },\n  ],\n}\n```\n\nWritten in plain English, if the above query were passed to a `find` operation, it would translate to finding posts where either the `color` is `mint` OR the `color` is `white` AND `featured` is set to false.\n\n### Nested properties\n\nWhen working with nested properties, which can happen when using relational fields, it is possible to use the dot notation to access the nested property. For example, when working with a `Song` collection that has a `artists` field which is related to an `Artists` collection using the `name: 'artists'`. You can access a property within the collection `Artists` like so:\n\n```js\nconst query = {\n  'artists.featured': {\n    // nested property name to filter on\n    exists: true, // operator to use and boolean value that needs to be true\n  },\n}\n```\n\n### GraphQL Find Queries\n\nAll GraphQL `find` queries support the `where` argument, which accepts queries exactly as detailed above.\n\n**For example:**\n\n```\nquery {\n  Posts(where: { color: { equals: mint } }) {\n    docs {\n      color\n    }\n    totalDocs\n  }\n}\n```\n\n### REST Queries\n\nWith the REST API, you can use the full power of Payload queries as well but they become a bit more unwieldy the more complex that they get.\n\nSimple queries are fairly straightforward to write. To understand the syntax, you need to understand how Express and similar languages would go about parsing a complex URL search string into a JSON object. For example, the above [simple query](#simple-queries) would be parsed into a string like this:\n\n**`https://localhost:3000/api/posts?where[color][equals]=mint`**\n\nThis one isn't too bad, but more complex queries get unavoidably more difficult to write as query strings. For this reason, we recommend to use the extremely helpful and ubiquitous [`qs`](https://www.npmjs.com/package/qs) package to parse your JSON / object-formatted queries into query strings for use with the REST API.\n\n**For example, using fetch:**\n\n```js\nimport qs from 'qs'\n\nconst query = {\n  color: {\n    equals: 'mint',\n  },\n  // This query could be much more complex\n  // and QS would handle it beautifully\n}\n\nconst getPosts = async () => {\n  const stringifiedQuery = qs.stringify(\n    {\n      where: query, // ensure that `qs` adds the `where` property, too!\n    },\n    { addQueryPrefix: true },\n  )\n\n  const response = await fetch(`http://localhost:3000/api/posts${stringifiedQuery}`)\n  // Continue to handle the response below...\n}\n```\n\n### Local API Queries\n\nThe Local API's `find` operation accepts an object exactly how you write it. For example:\n\n```js\nconst getPosts = async () => {\n  const posts = await payload.find({\n    collection: 'posts',\n    where: {\n      color: {\n        equals: 'mint',\n      },\n    },\n  })\n\n  return posts\n}\n```\n\n## Sort\n\nPayload `find` queries support a `sort` parameter through all APIs. Pass the `name` of a top-level field to sort by that field in ascending order. Prefix the name of the field with a minus symbol (\"-\") to sort in descending order. Because sorting is handled by the database, the field you wish to sort on must be stored in the database to work; not a [virtual field](https://payloadcms.com/blog/learn-how-virtual-fields-can-help-solve-common-cms-challenges). It is recommended to enable indexing for the fields where sorting is used.\n\n**REST example:**\n**`https://localhost:3000/api/posts?sort=-createdAt`**\n\n**GraphQL example:**\n\n```\nquery {\n  Posts(sort: \"-createdAt\") {\n    docs {\n      color\n    }\n  }\n}\n```\n\n**Local API example:**\n\n```js\nconst getPosts = async () => {\n  const posts = await payload.find({\n    collection: 'posts',\n    sort: '-createdAt',\n  })\n\n  return posts\n}\n```\n",
            "desc": "Payload provides a querying language through all APIs, allowing you to filter or search through documents within a Collection.",
            "headings": [
              {
                "id": "simple-queries",
                "level": 3,
                "text": "Simple queries"
              },
              {
                "id": "operators",
                "level": 3,
                "text": "Operators"
              },
              {
                "id": "and-or-logic",
                "level": 3,
                "text": "And / Or Logic"
              },
              {
                "id": "nested-properties",
                "level": 3,
                "text": "Nested properties"
              },
              {
                "id": "graphql-find-queries",
                "level": 3,
                "text": "GraphQL Find Queries"
              },
              {
                "id": "rest-queries",
                "level": 3,
                "text": "REST Queries"
              },
              {
                "id": "local-api-queries",
                "level": 3,
                "text": "Local API Queries"
              },
              {
                "id": "sort",
                "level": 2,
                "text": "Sort"
              }
            ],
            "keywords": "query, documents, overview, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Querying your Documents"
          },
          {
            "slug": "pagination",
            "content": "\nAll collection `find` queries are paginated automatically. Responses are returned with top-level meta data related to pagination, and returned documents are nested within a `docs` array.\n\n**`Find` response properties:**\n\n| Property      | Description                                               |\n| ------------- | --------------------------------------------------------- |\n| docs          | Array of documents in the collection                      |\n| totalDocs     | Total available documents within the collection           |\n| limit         | Limit query parameter - defaults to `10`                  |\n| totalPages    | Total pages available, based upon the `limit` queried for |\n| page          | Current page number                                       |\n| pagingCounter | `number` of the first doc on the current page             |\n| hasPrevPage   | `true/false` if previous page exists                      |\n| hasNextPage   | `true/false` if next page exists                          |\n| prevPage      | `number` of previous page, `null` if it doesn't exist     |\n| nextPage      | `number` of next page, `null` if it doesn't exist         |\n\n**Example response:**\n\n```json\n{\n  // Document Array // highlight-line\n  \"docs\": [\n    {\n      \"title\": \"Page Title\",\n      \"description\": \"Some description text\",\n      \"priority\": 1,\n      \"createdAt\": \"2020-10-17T01:19:29.858Z\",\n      \"updatedAt\": \"2020-10-17T01:19:29.858Z\",\n      \"id\": \"5f8a46a1dd05db75c3c64760\"\n    }\n  ],\n  // Metadata // highlight-line\n  \"totalDocs\": 6,\n  \"limit\": 1,\n  \"totalPages\": 6,\n  \"page\": 1,\n  \"pagingCounter\": 1,\n  \"hasPrevPage\": false,\n  \"hasNextPage\": true,\n  \"prevPage\": null,\n  \"nextPage\": 2\n}\n```\n\n## Pagination controls\n\nAll Payload APIs support the pagination controls below. With them, you can create paginated lists of documents within your application:\n\n| Control | Description                             |\n| ------- | --------------------------------------- |\n| `limit` | Limits the number of documents returned |\n| `page`  | Get a specific page number              |\n\n### Disabling pagination within Local API\n\nFor `find` operations within the Local API, you can disable pagination to retrieve all documents from a collection by passing `pagination: false` to the `find` local operation.\n",
            "desc": "Payload queries are equipped with automatic pagination so you create paginated lists of documents within your app.",
            "headings": [
              {
                "id": "pagination-controls",
                "level": 2,
                "text": "Pagination controls"
              },
              {
                "id": "disabling-pagination-within-local-api",
                "level": 3,
                "text": "Disabling pagination within Local API"
              }
            ],
            "keywords": "query, documents, pagination, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Pagination",
            "order": 20,
            "title": "Pagination"
          }
        ]
      }
    ]
  },
  {
    "groupLabel": "",
    "topics": [
      {
        "slug": "Rich-Text",
        "docs": [
          {
            "slug": "overview",
            "content": "\nPayload currently supports two official rich text editors and you can choose either one depending on your needs.\n\n1. [SlateJS](../rich-text/slate) - stable, backwards-compatible with 1.0\n2. [Lexical](../rich-text/lexical) - beta, where things will be moving in the future\n\nThese editors are built on an \"adapter pattern\" which means that you will need to install the editor you'd like to use. Take a look at the docs for the editor you'd like to use for instructions on how to install it.\n\nThe big TL;DR here is that Slate is what we have used in the past, and we still support it for existing projects, but if you're building something new and you're feeling adventurous, you should give Lexical a shot. Slate has a lot of good stuff, but Lexical has lots more.\n\nNo matter which editor you use, you have to install it at the top-level on the `config.editor` property, which will then cascade throughout all of your rich text fields and be used accordingly. Additionally, you also have the option to override the editor on a field-by-field basis if you'd like.\n",
            "desc": "Rich Text within Payload is extremely powerful. We've combined the beauty of the Medium editor with the power of the Notion editor all in one place.",
            "headings": [],
            "keywords": "slatejs, lexical, rich text, json, custom editor, javascript, typescript",
            "label": "Overview",
            "order": 10,
            "title": "Overview"
          },
          {
            "slug": "slate",
            "content": "\nThe Slate editor has been supported by Payload since we released our initial beta. It's battle-tested and will continue to be supported into the future.\n\nIf you are migrating a Payload project from 1.x or earlier, you can continue to use the Slate editor as long as you'd like.\n\nTo use the Slate editor, first you need to install it:\n\n```\nnpm install --save @payloadcms/richtext-slate\n```\n\n\nAfter installation, you can pass it to your top-level Payload config:\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport { slateEditor } from '@payloadcms/richtext-slate'\n\nexport default buildConfig({\n  collections: [\n    // your collections here\n  ],\n  // Pass the Slate editor to the root config\n  editor: slateEditor({})\n})\n```\n\nAnd here's an example for how to install the Slate editor on a field-by-field basis, while customizing its options:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\nimport { slateEditor } from '@payloadcms/richtext-slate'\n\nexport const Pages: CollectionConfig = {\n  slug: 'pages',\n  fields: [\n    {\n      name: 'content',\n      type: 'richText',\n      // Pass the Slate editor here and configure it accordingly\n      editor: slateEditor({\n        admin: {\n          elements: [\n            // customize elements allowed in Slate editor here\n          ],\n          leaves: [\n            // customize leaves allowed in Slate editor here\n          ]\n        }\n      })\n    }\n  ]\n}\n```\n\n## Admin Options\n\n**`elements`**\n\nThe `elements` property is used to specify which built-in or custom [SlateJS elements](https://docs.slatejs.org/concepts/02-nodes#element) should be made available to the field within the admin panel.\n\nThe default `elements` available in Payload are:\n\n- `h1`\n- `h2`\n- `h3`\n- `h4`\n- `h5`\n- `h6`\n- `blockquote`\n- `link`\n- `ol`\n- `ul`\n- `textAlign`\n- `indent`\n- [`relationship`](#relationship-element)\n- [`upload`](#upload-element)\n- [`textAlign`](#text-align)\n\n**`leaves`**\n\nThe `leaves` property specifies built-in or custom [SlateJS leaves](https://docs.slatejs.org/concepts/08-rendering#leaves) to be enabled within the Admin panel.\n\nThe default `leaves` available in Payload are:\n\n- `bold`\n- `code`\n- `italic`\n- `strikethrough`\n- `underline`\n\n**`link.fields`**\n\nThis allows [fields](../fields/overview) to be saved as extra fields on a link inside the Rich Text Editor. When this is present, the fields will render inside a modal that can be opened by clicking the \"edit\" button on the link element.\n\n`link.fields` may either be an array of fields (in which case all fields defined in it will be appended below the default fields) or a function that accepts the default fields as only argument and returns an array defining the entirety of fields to be used (thus providing a mechanism of overriding the default fields).\n\n![RichText link fields](https://payloadcms.com/images/docs/fields/richText/rte-link-fields-modal.jpg)\n_RichText link with custom fields_\n\n**`upload.collections[collection-name].fields`**\n\nThis allows [fields](../fields/overview) to be saved as meta data on an upload field inside the Rich Text Editor. When this is present, the fields will render inside a modal that can be opened by clicking the \"edit\" button on the upload element.\n\n![RichText upload element](https://payloadcms.com/images/docs/fields/richText/rte-upload-element.jpg)\n_RichText field using the upload element_\n\n![RichText upload element modal](https://payloadcms.com/images/docs/fields/richText/rte-upload-fields-modal.jpg)\n_RichText upload element modal displaying fields from the config_\n\n### Relationship element\n\nThe built-in `relationship` element is a powerful way to reference other Documents directly within your Rich Text editor.\n\n### Upload element\n\nSimilar to the `relationship` element, the `upload` element is a user-friendly way to reference [Upload-enabled collections](../upload/overview) with a UI specifically designed for media / image-based uploads.\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />\n  Collections are automatically allowed to be selected within the Rich Text relationship and upload\n  elements by default. If you want to disable a collection from being able to be referenced in Rich\n  Text fields, set the collection admin options of <strong>enableRichTextLink</strong> and{' '}\n  <strong>enableRichTextRelationship</strong> to false.\n</Banner>\n\nRelationship and Upload elements are populated dynamically into your Rich Text field' content. Within the REST and Local APIs, any present RichText `relationship` or `upload` elements will respect the `depth` option that you pass, and will be populated accordingly. In GraphQL, each `richText` field accepts an argument of `depth` for you to utilize.\n\n### TextAlign element\n\nText Alignment is not included by default and can be added to a Rich Text Editor by adding `textAlign` to the list of elements. TextAlign will alter the existing element to include a new `textAlign` field in the resulting JSON. This field can be used in combination with other elements and leaves to position content to the left, center or right.\n\n### Specifying which elements and leaves to allow\n\nTo specify which default elements or leaves should be allowed to be used for this field, define arrays that contain string names for each element or leaf you wish to enable. To specify a custom element or leaf, pass an object with all corresponding properties as outlined below. View the [example](#example) to reference how this all works.\n\n### Building custom elements and leaves\n\nYou can design and build your own Slate elements and leaves to extend the editor with your own functionality. To do so, first start by reading the [SlateJS documentation](https://docs.slatejs.org/) and looking at the [Slate examples](https://www.slatejs.org/examples/richtext) to familiarize yourself with the SlateJS editor as a whole.\n\nOnce you're up to speed with the general concepts involved, you can pass in your own elements and leaves to your field's admin config.\n\n**Both custom elements and leaves are defined via the following config:**\n\n| Property        | Description                                                |\n| --------------- | ---------------------------------------------------------- |\n| **`name`** \\*   | The default name to be used as a `type` for this element.  |\n| **`Button`** \\* | A React component to be rendered in the Rich Text toolbar. |\n| **`plugins`**   | An array of plugins to provide to the Rich Text editor.    |\n| **`type`**      | A type that overrides the default type used by `name`      |\n\nCustom `Element`s also require the `Element` property set to a React component to be rendered as the `Element` within the rich text editor itself.\n\nCustom `Leaf` objects follow a similar pattern but require you to define the `Leaf` property instead.\n\nSpecifying custom `Type`s let you extend your custom elements by adding additional fields to your JSON object.\n\n### Example\n\n`collections/ExampleCollection.ts`\n\n```ts\nimport type { CollectionConfig } from 'payload/types'\n\nimport { slateEditor } from '@payloadcms/richtext-slate'\n\nexport const ExampleCollection: CollectionConfig = {\n  slug: 'example-collection',\n  fields: [\n    {\n      name: 'content', // required\n      type: 'richText', // required\n      defaultValue: [\n        {\n          children: [{ text: 'Here is some default content for this field' }],\n        },\n      ],\n      required: true,\n      editor: slateEditor({\n        admin: {\n          elements: [\n            'h2',\n            'h3',\n            'h4',\n            'link',\n            'blockquote',\n            {\n              name: 'cta',\n              Button: CustomCallToActionButton,\n              Element: CustomCallToActionElement,\n              plugins: [\n                // any plugins that are required by this element go here\n              ],\n            },\n          ],\n          leaves: [\n            'bold',\n            'italic',\n            {\n              name: 'highlight',\n              Button: CustomHighlightButton,\n              Leaf: CustomHighlightLeaf,\n              plugins: [\n                // any plugins that are required by this leaf go here\n              ],\n            },\n          ],\n          link: {\n            // Inject your own fields into the Link element\n            fields: [\n              {\n                name: 'rel',\n                label: 'Rel Attribute',\n                type: 'select',\n                hasMany: true,\n                options: ['noopener', 'noreferrer', 'nofollow'],\n              },\n            ],\n          },\n          upload: {\n            collections: {\n              media: {\n                fields: [\n                  // any fields that you would like to save\n                  // on an upload element in the `media` collection\n                ],\n              },\n            },\n          },\n        },\n      }),\n    },\n  ],\n}\n```\n\n### Generating HTML\n\nAs the Rich Text field saves its content in a JSON format, you'll need to render it as HTML yourself. Here is an example for how to generate JSX / HTML from Rich Text content:\n\n```ts\nimport React, { Fragment } from \"react\";\nimport escapeHTML from \"escape-html\";\nimport { Text } from \"slate\";\n\nconst serialize = (children) =>\n  children.map((node, i) => {\n    if (Text.isText(node)) {\n      let text = (\n        <span dangerouslySetInnerHTML={{ __html: escapeHTML(node.text) }} />\n      );\n\n      if (node.bold) {\n        text = <strong key={i}>{text}</strong>;\n      }\n\n      if (node.code) {\n        text = <code key={i}>{text}</code>;\n      }\n\n      if (node.italic) {\n        text = <em key={i}>{text}</em>;\n      }\n\n      if (node.text === '') {\n        text = <br />;\n      }\n\n      // Handle other leaf types here...\n\n      return <Fragment key={i}>{text}</Fragment>;\n    }\n\n    if (!node) {\n      return null;\n    }\n\n    switch (node.type) {\n      case \"h1\":\n        return <h1 key={i}>{serialize(node.children)}</h1>;\n      // Iterate through all headings here...\n      case \"h6\":\n        return <h6 key={i}>{serialize(node.children)}</h6>;\n      case \"blockquote\":\n        return <blockquote key={i}>{serialize(node.children)}</blockquote>;\n      case \"ul\":\n        return <ul key={i}>{serialize(node.children)}</ul>;\n      case \"ol\":\n        return <ol key={i}>{serialize(node.children)}</ol>;\n      case \"li\":\n        return <li key={i}>{serialize(node.children)}</li>;\n      case \"link\":\n        return (\n          <a href={escapeHTML(node.url)} key={i}>\n            {serialize(node.children)}\n          </a>\n        );\n\n      default:\n        return <p key={i}>{serialize(node.children)}</p>;\n    }\n  });\n```\n\n<Banner>\n  <strong>Note:</strong>\n  <br />\n  The above example is for how to render to JSX, although for plain HTML the pattern is similar.\n  Just remove the JSX and return HTML strings instead!\n</Banner>\n\n### Built-in SlateJS Plugins\n\nPayload comes with a few built-in SlateJS plugins which can be extended to make developing your own elements and leaves a bit easier.\n\n#### `shouldBreakOutOnEnter`\n\nPayload's built-in heading elements all allow a \"hard return\" to \"break out\" of the currently active element. For example, if you hit `enter` while typing an `h1`, the `h1` will be \"broken out of\" and you'll be able to continue writing as the default paragraph element.\n\nIf you want to utilize this functionality within your own custom elements, you can do so by adding a custom plugin to your `element` like the following \"large body\" element example:\n\n`customLargeBodyElement.js`:\n\n```ts\nimport Button from './Button'\nimport Element from './Element'\nimport withLargeBody from './plugin'\n\nexport default {\n  name: 'large-body',\n  Button,\n  Element,\n  plugins: [\n    (incomingEditor) => {\n      const editor = incomingEditor\n      const { shouldBreakOutOnEnter } = editor\n\n      editor.shouldBreakOutOnEnter = (element) =>\n        element.type === 'large-body' ? true : shouldBreakOutOnEnter(element)\n\n      return editor\n    },\n  ],\n}\n```\n\nAbove, you can see that we are creating a custom SlateJS element with a name of `large-body`. This might render a slightly larger body copy on the frontend of your app(s). We pass it a name, button, and element&mdash;but additionally, we pass it a `plugins` array containing a single SlateJS plugin.\n\nThe plugin itself extends Payload's built-in `shouldBreakOutOnEnter` Slate function to add its own element name to the list of elements that should \"break out\" when the `enter` key is pressed.\n\n### TypeScript\n\nIf you are building your own custom Rich Text elements or leaves, you may benefit from importing the following types:\n\n```ts\nimport type { RichTextCustomElement, RichTextCustomLeaf } from '@payloadcms/richtext-slate'\n```\n",
            "desc": "The Slate editor has been supported by Payload since beta. It's very powerful and stores content as JSON, which unlocks a ton of power.",
            "headings": [
              {
                "id": "admin-options",
                "level": 2,
                "text": "Admin Options"
              },
              {
                "id": "relationship-element",
                "level": 3,
                "text": "Relationship element"
              },
              {
                "id": "upload-element",
                "level": 3,
                "text": "Upload element"
              },
              {
                "id": "textalign-element",
                "level": 3,
                "text": "TextAlign element"
              },
              {
                "id": "specifying-which-elements-and-leaves-to-allow",
                "level": 3,
                "text": "Specifying which elements and leaves to allow"
              },
              {
                "id": "building-custom-elements-and-leaves",
                "level": 3,
                "text": "Building custom elements and leaves"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              },
              {
                "id": "generating-html",
                "level": 3,
                "text": "Generating HTML"
              },
              {
                "id": "built-in-slatejs-plugins",
                "level": 3,
                "text": "Built-in SlateJS Plugins"
              },
              {
                "id": "typescript",
                "level": 3,
                "text": "TypeScript"
              }
            ],
            "keywords": "slatejs, slate, rich text, editor, headless cms",
            "label": "Slate",
            "order": 20,
            "title": "Slate Rich Text"
          },
          {
            "slug": "lexical",
            "content": "\nOne of Payload's goals is to build the best rich text editor experience that we possibly can. We want to combine the beauty and polish of the Medium editing experience with the strength and features of the Notion editor - all in one place.\n\nClassically, we've used SlateJS to work toward this goal, but building custom elements into Slate has proven to be more difficult than we'd like, and we've been keeping our options open.\n\n<Banner type=\"warning\">\n  Payload's Lexical rich text editor is currently in beta. It's stable enough to use as you build on Payload, so if you're up for helping us fine-tune it, you should use it. But if you're looking for stability, use Slate instead.\n</Banner>\n\nLexical is extremely impressive and trivializes a lot of the hard parts of building new elements into a rich text editor. It has a few distinct advantages over Slate, including the following:\n\n1. A \"/\" menu, which allows editors to easily add new elements while never leaving their keyboard\n1. A \"hover\" toolbar that pops up if you select text\n1. It supports Payload blocks natively, directly within your rich text editor\n1. Custom elements, called \"features\", are much easier to build in Lexical vs. Slate\n\nTo use the Lexical editor, first you need to install it:\n\n```\nnpm install @payloadcms/richtext-lexical\n```\n\nOnce you have it installed, you can pass it to your top-level Payload config as follows:\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport { lexicalEditor } from '@payloadcms/richtext-lexical'\n\nexport default buildConfig({\n  collections: [\n    // your collections here\n  ],\n  // Pass the Lexical editor to the root config\n  editor: lexicalEditor({})\n})\n```\n\nYou can also override Lexical settings on a field-by-field basis as follows:\n\n```ts\nimport type { CollectionConfig } from 'payload/types'\nimport {\n  lexicalEditor\n} from '@payloadcms/richtext-lexical'\n\nexport const Pages: CollectionConfig = {\n  slug: 'pages',\n  fields: [\n    {\n      name: 'content',\n      type: 'richText',\n      // Pass the Lexical editor here and override base settings as necessary\n      editor: lexicalEditor({})\n    }\n  ]\n}\n```\n\n## Extending the lexical editor with Features\n\nLexical has been designed with extensibility in mind. Whether you're aiming to introduce new functionalities or tweak the existing ones, Lexical makes it seamless for you to bring those changes to life.\n\n### Features: The Building Blocks\n\nAt the heart of Lexical's customization potential are \"features\". While Lexical ships with a set of default features we believe are essential for most use cases, the true power lies in your ability to redefine, expand, or prune these as needed.\n\nIf you remove all the default features, you're left with a blank editor. You can then add in only the features you need, or you can build your own custom features from scratch.\n\n### Integrating New Features\n\nTo weave in your custom features, utilize the `features` prop when initializing the Lexical Editor. Here's a basic example of how this is done:\n\n```ts\nimport {\n  BlocksFeature,\n  LinkFeature,\n  UploadFeature,\n  lexicalEditor\n} from '@payloadcms/richtext-lexical'\nimport { Banner } from '../blocks/Banner'\nimport { CallToAction } from '../blocks/CallToAction'\n\n{\n  editor: lexicalEditor({\n    features: ({ defaultFeatures }) => [\n      ...defaultFeatures,\n      LinkFeature({\n        // Example showing how to customize the built-in fields\n        // of the Link feature\n        fields: [\n          {\n            name: 'rel',\n            label: 'Rel Attribute',\n            type: 'select',\n            hasMany: true,\n            options: ['noopener', 'noreferrer', 'nofollow'],\n            admin: {\n              description:\n                'The rel attribute defines the relationship between a linked resource and the current document. This is a custom link field.',\n            },\n          },\n        ],\n      }),\n      UploadFeature({\n        collections: {\n          uploads: {\n            // Example showing how to customize the built-in fields\n            // of the Upload feature\n            fields: [\n              {\n                name: 'caption',\n                type: 'richText',\n                editor: lexicalEditor(),\n              },\n            ],\n          },\n        },\n      }),\n      // This is incredibly powerful. You can re-use your Payload blocks\n      // directly in the Lexical editor as follows:\n      BlocksFeature({\n        blocks: [\n          Banner,\n          CallToAction,\n        ],\n      }),\n    ]\n  })\n}\n```\n\n## Features overview\n\nHere's an overview of all the included features:\n\n| Feature Name                   | Included by default | Description                                                                                                                                                                            |\n|--------------------------------|---------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| **`BoldTextFeature`**          | Yes                 | Handles the bold text format                                                                                                                                                           |\n| **`ItalicTextFeature`**        | Yes                 | Handles the italic text format                                                                                                                                                         |\n| **`UnderlineTextFeature`**     | Yes                 | Handles the underline text format                                                                                                                                                      |\n| **`StrikethroughTextFeature`** | Yes                 | Handles the strikethrough text format                                                                                                                                                  |\n| **`SubscriptTextFeature`**     | Yes                 | Handles the subscript text format                                                                                                                                                      |\n| **`SuperscriptTextFeature`**   | Yes                 | Handles the superscript text format                                                                                                                                                    |\n| **`InlineCodeTextFeature`**    | Yes                 | Handles the inline-code text format                                                                                                                                                    |\n| **`ParagraphFeature`**         | Yes                 | Handles paragraphs. Since they are already a key feature of lexical itself, this Feature mainly handles the Slash and Add-Block menu entries for paragraphs                            |\n| **`HeadingFeature`**           | Yes                 | Adds Heading Nodes (by default, H1 - H6, but that can be customized)                                                                                                                   |\n| **`AlignFeature`**             | Yes                 | Allows you to align text left, centered and right                                                                                                                                      |\n| **`IndentFeature`**            | Yes                 | Allows you to indent text with the tab key                                                                                                                                             |\n| **`UnorderedListFeature`**     | Yes                 | Adds unordered lists (ul)                                                                                                                                                              |\n| **`OrderedListFeature`**       | Yes                 | Adds ordered lists (ol)                                                                                                                                                                |\n| **`CheckListFeature`**         | Yes                 | Adds checklists                                                                                                                                                                        |\n| **`LinkFeature`**              | Yes                 | Allows you to create internal and external links                                                                                                                                       |\n| **`RelationshipFeature`**      | Yes                 | Allows you to create block-level (not inline) relationships to other documents                                                                                                         |\n| **`BlockQuoteFeature`**        | Yes                 | Allows you to create block-level quotes                                                                                                                                                |\n| **`UploadFeature`**            | Yes                 | Allows you to create block-level upload nodes - this supports all kinds of uploads, not just images                                                                                    |\n| **`HorizontalRuleFeature`**    | Yes                 | Horizontal rules / separators. Basically displays an `<hr>` element                                                                                                                      |\n| **`BlocksFeature`**            | No                  | Allows you to use Payload's [Blocks Field](../fields/blocks) directly inside your editor. In the feature props, you can specify the allowed blocks - just like in the Blocks field. |\n| **`TreeViewFeature`**          | No                  | Adds a debug box under the editor, which allows you to see the current editor state live, the dom, as well as time travel. Very useful for debugging                                   |\n\n## Creating your own, custom Feature\n\nCreating your own custom feature requires deep knowledge of the Lexical editor. We recommend you take a look at the [Lexical documentation](https://lexical.dev/docs/intro) first - especially the \"concepts\" section.\n\nNext, take a look at the [features we've already built](https://github.com/payloadcms/payload/tree/main/packages/richtext-lexical/src/field/features) - understanding how they work will help you understand how to create your own. There is no difference between the features included by default and the ones you create yourself - since those features are all isolated from the \"core\", you have access to the same APIs, whether the feature is part of payload or not!\n\n## Converters\n\n### Lexical => HTML\n\nLexical saves data in JSON, but can also generate its HTML representation via two main methods:\n\n1. **Outputting HTML from the Collection:** Create a new field in your collection to convert saved JSON content to HTML. Payload generates and outputs the HTML for use in your frontend.\n2. **Generating HTML on any server** Convert JSON to HTML on-demand on the server.\n\nThe editor comes with built-in HTML serializers, simplifying the process of converting JSON to HTML.\n\n#### Outputting HTML from the Collection\n\nTo add HTML generation directly within the collection, follow the example below:\n\n```ts\nimport type { CollectionConfig } from 'payload/types'\n\nimport {\n  HTMLConverterFeature,\n  lexicalEditor,\n  lexicalHTML\n} from '@payloadcms/richtext-lexical'\n\nconst Pages: CollectionConfig = {\n  slug: 'pages',\n  fields: [\n    {\n      name: 'nameOfYourRichTextField',\n      type: 'richText',\n      editor: lexicalEditor({\n        features: ({ defaultFeatures }) => [\n          ...defaultFeatures,\n          // The HTMLConverter Feature is the feature which manages the HTML serializers.\n          // If you do not pass any arguments to it, it will use the default serializers.\n          HTMLConverterFeature({}),\n        ],\n      }),\n    },\n    lexicalHTML('nameOfYourRichTextField', { name: 'nameOfYourRichTextField_html' }),\n  ],\n}\n```\nThe `lexicalHTML()` function creates a new field that automatically converts the referenced lexical richText field into HTML through an afterRead hook.\n\n#### Generating HTML anywhere on the server:\n\nIf you wish to convert JSON to HTML ad-hoc, use this code snippet:\n\n```ts\nimport type { SerializedEditorState } from 'lexical'\nimport {\n  type SanitizedEditorConfig,\n  convertLexicalToHTML,\n  consolidateHTMLConverters,\n} from '@payloadcms/richtext-lexical'\n\nasync function lexicalToHTML(editorData: SerializedEditorState, editorConfig: SanitizedEditorConfig) {\n  return await convertLexicalToHTML({\n    converters: consolidateHTMLConverters({ editorConfig }),\n    data: editorData,\n  })\n}\n```\nThis method employs `convertLexicalToHTML` from `@payloadcms/richtext-lexical`, which converts the serialized editor state into HTML.\n\nBecause every `Feature` is able to provide html converters, and because the `htmlFeature` can modify those or provide their own, we need to consolidate them with the default html Converters using the `consolidateHTMLConverters` function.\n\n#### Creating your own HTML Converter\n\nHTML Converters are typed as `HTMLConverter`, which contains the node type it should handle, and a function that accepts the serialized node from the lexical editor, and outputs the HTML string. Here's the HTML Converter of the Upload node as an example:\n\n```ts\nimport type { HTMLConverter } from '@payloadcms/richtext-lexical'\nimport payload from 'payload'\n\nconst UploadHTMLConverter: HTMLConverter<SerializedUploadNode> = {\n  converter: async ({ node }) => {\n    const uploadDocument = await payload.findByID({\n      id: node.value.id,\n      collection: node.relationTo,\n    })\n    const url = (payload?.config?.serverURL || '') + uploadDocument?.url\n\n    if (!(uploadDocument?.mimeType as string)?.startsWith('image')) {\n      // Only images can be serialized as HTML\n      return ``\n    }\n\n    return `<img src=\"${url}\" alt=\"${uploadDocument?.filename}\" width=\"${uploadDocument?.width}\"  height=\"${uploadDocument?.height}\"/>`\n  },\n  nodeTypes: [UploadNode.getType()], // This is the type of the lexical node that this converter can handle. Instead of hardcoding 'upload' we can get the node type directly from the UploadNode, since it's static.\n}\n```\n\nAs you can see, we have access to all the information saved in the node (for the Upload node, this is `value`and `relationTo`) and we can use that to generate the HTML.\n\nThe `convertLexicalToHTML` is part of `@payloadcms/richtext-lexical` automatically handles traversing the editor state and calling the correct converter for each node.\n\n#### Embedding the HTML Converter in your Feature\n\nYou can embed your HTML Converter directly within your custom `Feature`, allowing it to be handled automatically by the `consolidateHTMLConverters` function. Here is an example:\n\n```ts\nexport const UploadFeature = (props?: UploadFeatureProps): FeatureProvider => {\n  return {\n    feature: () => {\n      return {\n        nodes: [\n          {\n            converters: {\n              html: yourHTMLConverter, // <= This is where you define your HTML Converter\n            },\n            node: UploadNode,\n            type: UploadNode.getType(),\n            //...\n          },\n        ],\n        plugins: [/*...*/],\n        props: props,\n        slashMenu: {/*...*/},\n      }\n    },\n    key: 'upload',\n  }\n}\n```\n\n### Headless Editor\n\nLexical provides a seamless way to perform conversions between various other formats:\n- HTML to Lexical (or, importing HTML into the lexical editor)\n- Markdown to Lexical (or, importing Markdown into the lexical editor)\n- Lexical to Markdown\n\nA headless editor can perform such conversions outside of the main editor instance. Follow this method to initiate a headless editor:\n\n```ts\nimport { createHeadlessEditor } from '@lexical/headless' // <= make sure this package is installed\nimport {\n  getEnabledNodes,\n  sanitizeEditorConfig,\n} from '@payloadcms/richtext-lexical'\n\nconst yourEditorConfig; // <= your editor config here\n\nconst headlessEditor = createHeadlessEditor({\n  nodes: getEnabledNodes({\n    editorConfig: sanitizeEditorConfig(yourEditorConfig),\n  }),\n})\n```\n\n### Getting the editor config\n\nAs you can see, you need to provide an editor config in order to create a headless editor. This is because the editor config is used to determine which nodes & features are enabled, and which converters are used.\n\nTo get the editor config, simply import the default editor config and adjust it - just like you did inside of the `editor: lexicalEditor({})` property:\n\n```ts\nimport { defaultEditorConfig, defaultEditorFeatures } from '@payloadcms/richtext-lexical' // <= make sure this package is installed\n\nconst yourEditorConfig = defaultEditorConfig\n\n// If you made changes to the features of the field's editor config, you should also make those changes here:\nyourEditorConfig.features = [\n  ...defaultEditorFeatures,\n  // Add your custom features here\n]\n```\n\n### HTML => Lexical\n\nOnce you have your headless editor instance, you can use it to convert HTML to Lexical:\n\n```ts\nimport { $generateNodesFromDOM } from '@lexical/html'\nimport { $getRoot,$getSelection } from 'lexical'\nimport { JSDOM } from 'jsdom';\n\nheadlessEditor.update(() => {\n  // In a headless environment you can use a package such as JSDom to parse the HTML string.\n  const dom = new JSDOM(htmlString)\n\n  // Once you have the DOM instance it's easy to generate LexicalNodes.\n  const nodes = $generateNodesFromDOM(headlessEditor, dom.window.document)\n\n  // Select the root\n  $getRoot().select()\n\n  // Insert them at a selection.\n  const selection = $getSelection()\n  selection.insertNodes(nodes)\n}, { discrete: true })\n\n// Do this if you then want to get the editor JSON\nconst editorJSON = headlessEditor.getEditorState().toJSON()\n```\n\nFunctions prefixed with a `$` can only be run inside of an `editor.update()` or `editorState.read()` callback.\n\nThis has been taken from the [lexical serialization & deserialization docs](https://lexical.dev/docs/concepts/serialization#html---lexical).\n\n<Banner type=\"success\">\n  <strong>Note:</strong>\n  <br />\n  Using the <code>discrete: true</code> flag ensures instant updates to the editor state. If immediate reading of the updated state isn't necessary, you can omit the flag.\n</Banner>\n\n### Markdown => Lexical\n\nConvert markdown content to the Lexical editor format with the following:\n\n```ts\nimport { $convertFromMarkdownString } from '@lexical/markdown'\nimport { sanitizeEditorConfig } from '@payloadcms/richtext-lexical'\n\nconst yourSanitizedEditorConfig = sanitizeEditorConfig(yourEditorConfig) // <= your editor config here\nconst markdown = `# Hello World`\n\nheadlessEditor.update(() => { $convertFromMarkdownString(markdown, yourSanitizedEditorConfig.features.markdownTransformers) }, { discrete: true })\n\n// Do this if you then want to get the editor JSON\nconst editorJSON = headlessEditor.getEditorState().toJSON()\n```\n\n### Lexical => Markdown\n\nExport content from the Lexical editor into Markdown format using these steps:\n\n1. Import your current editor state into the headless editor.\n2. Convert and fetch the resulting markdown string.\n\nHere's the code for it:\n\n```ts\nimport { $convertToMarkdownString } from '@lexical/markdown'\nimport { sanitizeEditorConfig } from '@payloadcms/richtext-lexical'\nimport type { SerializedEditorState } from \"lexical\"\n\nconst yourSanitizedEditorConfig = sanitizeEditorConfig(yourEditorConfig) // <= your editor config here\nconst yourEditorState: SerializedEditorState // <= your current editor state here\n\n// Import editor state into your headless editor\ntry {\n  headlessEditor.setEditorState(headlessEditor.parseEditorState(yourEditorState)) // This should commit the editor state immediately\n} catch (e) {\n  logger.error({ err: e }, 'ERROR parsing editor state')\n}\n\n// Export to markdown\nlet markdown: string\nheadlessEditor.getEditorState().read(() => {\n  markdown = $convertToMarkdownString(yourSanitizedEditorConfig?.features?.markdownTransformers)\n})\n```\n\nThe `.setEditorState()` function immediately updates your editor state. Thus, there's no need for the `discrete: true` flag when reading the state afterward.\n\n\n### Lexical => Plain Text\n\nExport content from the Lexical editor into plain text using these steps:\n\n1. Import your current editor state into the headless editor.\n2. Convert and fetch the resulting plain text string.\n\nHere's the code for it:\n\n```ts\nimport type { SerializedEditorState } from \"lexical\"\nimport { $getRoot } from \"lexical\"\n\nconst yourEditorState: SerializedEditorState // <= your current editor state here\n\n// Import editor state into your headless editor\ntry {\n  headlessEditor.setEditorState(headlessEditor.parseEditorState(yourEditorState)) // This should commit the editor state immediately\n} catch (e) {\n  logger.error({ err: e }, 'ERROR parsing editor state')\n}\n\n// Export to plain text\nconst plainTextContent = headlessEditor.getEditorState().read(() => {\n  return $getRoot().getTextContent()\n}) || ''\n```\n\n## Migrating from Slate\n\nWhile both Slate and Lexical save the editor state in JSON, the structure of the JSON is different.\n\n### Migration via SlateToLexicalFeature\n\nOne way to handle this is to just give your lexical editor the ability to read the slate JSON.\n\nSimply add the `SlateToLexicalFeature` to your editor:\n\n```ts\nimport type { CollectionConfig } from 'payload/types'\n\nimport {\n  SlateToLexicalFeature,\n  lexicalEditor,\n} from '@payloadcms/richtext-lexical'\n\nconst Pages: CollectionConfig = {\n  slug: 'pages',\n  fields: [\n    {\n      name: 'nameOfYourRichTextField',\n      type: 'richText',\n      editor: lexicalEditor({\n        features: ({ defaultFeatures }) => [\n          ...defaultFeatures,\n          SlateToLexicalFeature({})\n        ],\n      }),\n    },\n  ],\n}\n```\n\nand done! Now, everytime this lexical editor is initialized, it converts the slate date to lexical on-the-fly. If the data is already in lexical format, it will just pass it through.\n\nThis is by far the easiest way to migrate from Slate to Lexical, although it does come with a few caveats:\n- There is a performance hit when initializing the lexical editor\n- The editor will still output the Slate data in the output JSON, as the on-the-fly converter only runs for the admin panel\n\nThe easy way to solve this: Just save the document! This overrides the slate data with the lexical data, and the next time the document is loaded, the lexical data will be used. This solves both the performance and the output issue for that specific document.\n\n### Migration via migration script\n\nThe method described above does not solve the issue for all documents, though. If you want to convert all your documents to lexical, you can use a migration script. Here's a simple example:\n\n```ts\nimport type { Payload } from 'payload'\nimport type { YourDocumentType } from 'payload/generated-types'\n\nimport {\n  cloneDeep,\n  convertSlateToLexical,\n  defaultSlateConverters,\n} from '@payloadcms/richtext-lexical'\n\nimport { AnotherCustomConverter } from './lexicalFeatures/converters/AnotherCustomConverter'\n\nexport async function convertAll(payload: Payload, collectionName: string, fieldName: string) {\n  const docs: YourDocumentType[] = await payload.db.collections[collectionName].find({}).exec() // Use MongoDB models directly to query all documents at once\n  console.log(`Found ${docs.length} ${collectionName} docs`)\n\n  const converters = cloneDeep([...defaultSlateConverters, AnotherCustomConverter])\n\n  // Split docs into batches of 20.\n  const batchSize = 20\n  const batches = []\n  for (let i = 0; i < docs.length; i += batchSize) {\n    batches.push(docs.slice(i, i + batchSize))\n  }\n\n  let processed = 0 // Number of processed docs\n\n  for (const batch of batches) {\n    // Process each batch asynchronously\n    const promises = batch.map(async (doc: YourDocumentType) => {\n      const richText = doc[fieldName]\n\n      if (richText && Array.isArray(richText) && !('root' in richText)) { // It's Slate data - skip already-converted data\n        const converted = convertSlateToLexical({\n          converters: converters,\n          slateData: richText,\n        })\n\n        await payload.update({\n          id: doc.id,\n          collection: collectionName as any,\n          data: {\n            [fieldName]: converted,\n          },\n        })\n      }\n    })\n\n    // Wait for all promises in the batch to complete. Resolving batches of 20 asynchronously is faster than waiting for each doc to update individually\n    await Promise.all(promises)\n\n    // Update the count of processed docs\n    processed += batch.length\n    console.log(`Converted ${processed} of ${docs.length}`)\n  }\n}\n```\n\nThe `convertSlateToLexical` is the same method used in the `SlateToLexicalFeature` - it handles traversing the Slate JSON for you.\n\nDo note that this script might require adjustment depending on your document structure, especially if you have nested richText fields or localization enabled.\n\n### Converting custom Slate nodes\n\nIf you have custom Slate nodes, create a custom converter for them. Here's the Upload converter as an example:\n\n```ts\nimport type { SerializedUploadNode } from '../uploadNode.'\nimport type { SlateNodeConverter } from '@payloadcms/richtext-lexical'\n\nexport const SlateUploadConverter: SlateNodeConverter = {\n  converter({ slateNode }) {\n    return {\n      fields: {\n        ...slateNode.fields,\n      },\n      format: '',\n      relationTo: slateNode.relationTo,\n      type: 'upload',\n      value: {\n        id: slateNode.value?.id || '',\n      },\n      version: 1,\n    } as const as SerializedUploadNode\n  },\n  nodeTypes: ['upload'],\n}\n```\n\nIt's pretty simple: You get a Slate node as input, and you return the lexical node. The `nodeTypes` array is used to determine which Slate nodes this converter can handle.\n\nWhen using a migration script, you can add your custom converters to the `converters` property of the `convertSlateToLexical` props, as seen in the example above\n\nWhen using the `SlateToLexicalFeature`, you can add your custom converters to the `converters` property of the `SlateToLexicalFeature` props:\n\n```ts\nimport type { CollectionConfig } from 'payload/types'\n\nimport {\n  SlateToLexicalFeature,\n  lexicalEditor,\n  defaultSlateConverters\n} from '@payloadcms/richtext-lexical'\n\nimport { YourCustomConverter } from '../converters/YourCustomConverter'\n\nconst Pages: CollectionConfig = {\n  slug: 'pages',\n  fields: [\n    {\n      name: 'nameOfYourRichTextField',\n      type: 'richText',\n      editor: lexicalEditor({\n        features: ({ defaultFeatures }) => [\n          ...defaultFeatures,\n          SlateToLexicalFeature({\n            converters: [\n              ...defaultSlateConverters,\n              YourCustomConverter\n            ]\n          }),\n        ],\n      }),\n    },\n  ],\n}\n```\n\n## Migrating from payload-plugin-lexical\n\nMigrating from [payload-plugin-lexical](https://github.com/AlessioGr/payload-plugin-lexical) works similar to migrating from Slate.\n\nInstead of a `SlateToLexicalFeature` there is a `LexicalPluginToLexicalFeature` you can use. And instead of `convertSlateToLexical` you can use `convertLexicalPluginToLexical`.\n\n## Coming Soon\n\nLots more documentation will be coming soon, which will show in detail how to create your own custom features within Lexical.\n\nFor now, take a look at the TypeScript interfaces and let us know if you need a hand. Much more will be coming from the Payload team on this topic soon.\n",
            "desc": "Built by Meta, Lexical is an incredibly powerful rich text editor, and it works beautifully within Payload.",
            "headings": [
              {
                "id": "extending-the-lexical-editor-with-features",
                "level": 2,
                "text": "Extending the lexical editor with Features"
              },
              {
                "id": "features-the-building-blocks",
                "level": 3,
                "text": "Features: The Building Blocks"
              },
              {
                "id": "integrating-new-features",
                "level": 3,
                "text": "Integrating New Features"
              },
              {
                "id": "features-overview",
                "level": 2,
                "text": "Features overview"
              },
              {
                "id": "creating-your-own-custom-feature",
                "level": 2,
                "text": "Creating your own, custom Feature"
              },
              {
                "id": "converters",
                "level": 2,
                "text": "Converters"
              },
              {
                "id": "lexical-html",
                "level": 3,
                "text": "Lexical => HTML"
              },
              {
                "id": "headless-editor",
                "level": 3,
                "text": "Headless Editor"
              },
              {
                "id": "getting-the-editor-config",
                "level": 3,
                "text": "Getting the editor config"
              },
              {
                "id": "html-lexical",
                "level": 3,
                "text": "HTML => Lexical"
              },
              {
                "id": "markdown-lexical",
                "level": 3,
                "text": "Markdown => Lexical"
              },
              {
                "id": "lexical-markdown",
                "level": 3,
                "text": "Lexical => Markdown"
              },
              {
                "id": "lexical-plain-text",
                "level": 3,
                "text": "Lexical => Plain Text"
              },
              {
                "id": "migrating-from-slate",
                "level": 2,
                "text": "Migrating from Slate"
              },
              {
                "id": "migration-via-slatetolexicalfeature",
                "level": 3,
                "text": "Migration via SlateToLexicalFeature"
              },
              {
                "id": "migration-via-migration-script",
                "level": 3,
                "text": "Migration via migration script"
              },
              {
                "id": "converting-custom-slate-nodes",
                "level": 3,
                "text": "Converting custom Slate nodes"
              },
              {
                "id": "migrating-from-payload-plugin-lexical",
                "level": 2,
                "text": "Migrating from payload-plugin-lexical"
              },
              {
                "id": "coming-soon",
                "level": 2,
                "text": "Coming Soon"
              }
            ],
            "keywords": "lexical, rich text, editor, headless cms",
            "label": "Lexical",
            "order": 30,
            "title": "Lexical Rich Text"
          }
        ]
      },
      null,
      {
        "slug": "Live-Preview",
        "docs": [
          {
            "slug": "overview",
            "content": "\n**With Live Preview you can render your front-end application directly within the Admin panel. As you type, your changes take effect in real-time. No need to save a draft or publish your changes.**\n\nLive Preview works by rendering an iframe on the page that loads your front-end application. The Admin panel communicates with your app through [`window.postMessage`](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage) events. These events are emitted every time a change is made to the document. Your app then listens for these events and re-renders itself with the data it receives.\n\n{/* IMAGE OF LIVE PREVIEW HERE */}\n\n<Banner type=\"warning\">\n  Live Preview is currently in beta. You may use this feature in production, but please be aware that it is subject to change and may not be fully stable for all use cases. If you encounter any issues, please [report them](https://github.com/payloadcms/payload/issues/new?assignees=jacobsfletch&labels=possible-bug&projects=&title=Live%20Preview&template=1.bug_report.yml) with as much detail as possible.\n</Banner>\n\n## Setup\n\nSetting up Live Preview is easy. You first need to enable it through the `admin.livePreview` property of your Payload config. It takes the following options:\n\n| Path                  | Description                                                                                                                                                                                   |\n| --------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`url`** \\*          | String, or function that returns a string, pointing to your front-end application. This value is used as the iframe `src`. [More details](#url).                                              |\n| **`breakpoints`**     | Array of breakpoints to be used as “device sizes” in the preview window. Each item appears as an option in the toolbar. [More details](#breakpoints).                                         |\n| **`collections`**     | Array of collection slugs to enable Live Preview on.                                                                                                                                          |\n| **`globals`**         | Array of global slugs to enable Live Preview on.                                                                                                                                              |\n\n_\\* An asterisk denotes that a property is required._\n\nHere is a basic example of enabling Live Preview on a `pages` collection:\n\n```ts\n// payload.config.ts\n{\n  // ...\n  admin: {\n    // ...\n    livePreview: {\n      url: 'http://localhost:3000', // The URL to your front-end, this can also be a function (see below)\n      collections: ['pages'], // The collections to enable Live Preview on (globals are also possible)\n    },\n  }\n}\n```\n\nAlternatively, you can define the <code>admin.livePreview</code> property on individual collection and global configs. Settings defined here will be merged into the top-level as overrides (if applicable).\n\n```ts\n// Collection.ts\n{\n  // ...\n  admin: {\n    // ...\n    livePreview: {\n      url: 'http://localhost:3000',\n    },\n  }\n}\n```\n\nOnce configured, a new \"Live Preview\" tab will appear at the top of enabled documents. Navigating to this tab opens the preview window and loads your front-end application.\n\n### URL\n\nThe `url` property is a string that points to your front-end application. This value is used as the `src` attribute of the iframe rendering your front-end.\n\nYou can also pass a function in order to dynamically format URLs. This function is called with the following arguments:\n\n| Path                  | Description                                                                                                                                                                                 |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`data`**            | The data of the document being edited. This includes changes that have not yet been saved.                                                                                                  |\n| **`documentInfo`**    | Information about the document being edited like collection slug. [More details](../admin/hooks#usedocumentinfo).                                                                           |\n| **`locale`**          | The locale currently being edited (if applicable). [More details](../configuration/localization).                                                                         |\n\nHere is an example of using a function that returns a dynamic URL:\n\n```ts\n// payload.config.ts\n{\n  // ...\n  admin: {\n    // ...\n    livePreview: {\n      url: ({\n        data,\n        documentInfo,\n        locale\n      }) => `${data.tenant.url}${ // Multi-tenant top-level domain\n        documentInfo.slug === 'posts' ? `/posts/${data.slug}` : `${data.slug !== 'home' : `/${data.slug}` : ''}`\n      }${locale ? `?locale=${locale?.code}` : ''}`, // Localization query param\n      collections: ['pages'],\n    },\n  }\n}\n```\n\n### Breakpoints\n\nThe breakpoints property is an array of objects which are used as “device sizes” in the preview window. Each item will render as an option in the toolbar. When selected, the preview window will resize to the exact dimensions specified in that breakpoint. Each breakpoint takes the following properties:\n\n| Path                  | Description                                                                                                                                                                                 |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`label`** \\*        | The label to display in the drop-down. This is what the user will see.                                                                                                                      |\n| **`name`** \\*         | The name of the breakpoint.                                                                                                                                                                 |\n| **`width`** \\*        | The width of the breakpoint. This is used to set the width of the iframe.                                                                                                                   |\n| **`height`** \\*       | The height of the breakpoint. This is used to set the height of the iframe.                                                                                                                 |\n\n_\\* An asterisk denotes that a property is required._\n\nHere is an example of defining breakpoints:\n\n```ts\n// payload.config.ts\n{\n  // ...\n  admin: {\n    // ...\n    livePreview: {\n      url: 'http://localhost:3000',\n      breakpoints: [\n        {\n          label: 'Mobile',\n          name: 'mobile',\n          width: 375,\n          height: 667,\n        },\n        {\n          label: 'Tablet',\n          name: 'tablet',\n          width: 768,\n          height: 1024,\n        },\n        {\n          label: 'Desktop',\n          name: 'desktop',\n          width: 1440,\n          height: 900,\n        },\n      ],\n    },\n  }\n}\n```\n\n{/* IMAGE OF TOOLBAR HERE */}\n\nThe \"Responsive\" option is always available in the drop-down and requires no additional configuration. This is the default breakpoint that will be used on initial load. This option styles the iframe with a width and height of `100%` so that it fills the screen at its maximum size and automatically resizes as the window changes size.\n\nYou may also explicitly resize the Live Preview by using the corresponding inputs in the toolbar. This will temporarily override the breakpoint selection to \"Custom\" until a predefined breakpoint is selected once again.\n\nIf you prefer to freely resize the Live Preview without the use of breakpoints, you can open it in a new window by clicking the button in the toolbar. This will close the iframe and open a new window which can be resized as you wish. Closing it will automatically re-open the iframe.\n\n## Example\n\nFor a working demonstration of this, check out the official [Live Preview Example](https://github.com/payloadcms/payload/tree/main/examples/live-preview/payload).\n",
            "desc": "With Live Preview you can render your front-end application directly within the Admin panel. Your changes take effect as you type. No save needed.",
            "headings": [
              {
                "id": "setup",
                "level": 2,
                "text": "Setup"
              },
              {
                "id": "url",
                "level": 3,
                "text": "URL"
              },
              {
                "id": "breakpoints",
                "level": 3,
                "text": "Breakpoints"
              },
              {
                "id": "example",
                "level": 2,
                "text": "Example"
              }
            ],
            "keywords": "live preview, preview, live, iframe, iframe preview, visual editing, design",
            "label": "Overview",
            "order": 10,
            "title": "Live Preview"
          },
          {
            "slug": "frontend",
            "content": "\nWhile using Live Preview, the Admin panel emits a new `window.postMessage` event every time a change is made to the document. Your front-end application can listen for these events and re-render accordingly.\n\nWiring your front-end into Live Preview is easy. If your front-end application is built with React, Next.js, Vue or Nuxt.js, use the `useLivePreview` hook that Payload provides. In the future, all other major frameworks like Svelte will be officially supported. If you are using any of these frameworks today, you can still integrate with Live Preview yourself using the underlying tooling that Payload provides. See [building your own hook](#building-your-own-hook) for more information.\n\nBy default, all hooks accept the following args:\n\n| Path                  | Description                                                                                                                                                                                 |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`serverURL`** \\*    | The URL of your Payload server.                                                                                                                                                             |\n| **`initialData`**     | The initial data of the document. The live data will be merged in as changes are made.                                                                                                      |\n| **`depth`**           | The depth of the relationships to fetch. Defaults to `0`.                                                                                                                                   |\n| **`apiRoute`**        | The path of your API route as defined in `routes.api`. Defaults to `/api`.                                                                                                                              |\n\n_\\* An asterisk denotes that a property is required._\n\nAnd return the following values:\n\n| Path                  | Description                                                                                                                                                                                 |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`data`**            | The live data of the document, merged with the initial data.                                                                                                                                |\n| **`isLoading`**       | A boolean that indicates whether or not the document is loading.                                                                                                                            |\n\n<Banner type=\"info\">\n  If your front-end is tightly coupled to required fields, you should ensure that your UI does not break when these fields are removed. For example, if you are rendering something like `data.relatedPosts[0].title`, your page will break once you remove the first related post. To get around this, use conditional logic, optional chaining, or default values in your UI where needed. For example, `data?.relatedPosts?.[0]?.title`.\n</Banner>\n\n<Banner type=\"info\">\n  If is important that the `depth` argument matches exactly with the depth of your initial page request. The depth property is used to populated relationships and uploads beyond their IDs. See [Depth](../getting-started/concepts#depth) for more information.\n</Banner>\n\n### React\n\nIf your front-end application is built with React or Next.js, you can use the `useLivePreview` hook that Payload provides.\n\nFirst, install the `@payloadcms/live-preview-react` package:\n\n```bash\nnpm install @payloadcms/live-preview-react\n```\n\nThen, use the `useLivePreview` hook in your React component:\n\n```tsx\n'use client';\nimport { useLivePreview } from '@payloadcms/live-preview-react';\nimport { Page as PageType } from '@/payload-types'\n\n// Fetch the page in a server component, pass it to the client component, then thread it through the hook\n// The hook will take over from there and keep the preview in sync with the changes you make\n// The `data` property will contain the live data of the document\nexport const PageClient: React.FC<{\n  page: {\n    title: string\n  }\n}> = ({ page: initialPage }) => {\n  const { data } = useLivePreview<PageType>({\n    initialData: initialPage,\n    serverURL: PAYLOAD_SERVER_URL,\n    depth: 2,\n  })\n\n  return (\n    <h1>{data.title}</h1>\n  )\n}\n```\n\n### Vue\n\nIf your front-end application is built with Vue 3 or Nuxt 3, you can use the `useLivePreview` composable that Payload provides.\n\nFirst, install the `@payloadcms/live-preview-vue` package:\n\n```bash\nnpm install @payloadcms/live-preview-vue\n```\n\nThen, use the `useLivePreview` hook in your Vue component:\n\n```vue\n<script setup lang=\"ts\">\nimport type { PageData } from '~/types';\nimport { defineProps } from 'vue';\nimport { useLivePreview } from '@payloadcms/live-preview-vue';\n\n// Fetch the initial data on the parent component or using async state\nconst props = defineProps<{ initialData: PageData }>();\n\n// The hook will take over from here and keep the preview in sync with the changes you make.\n// The `data` property will contain the live data of the document only when viewed from the Preview view of the Admin UI.\nconst { data } = useLivePreview<PageData>({\n  initialData: props.initialData,\n  serverURL: \"<PAYLOAD_SERVER_URL>\",\n  depth: 2,\n});\n</script>\n\n<template>\n  <h1>{{ data.title }}</h1>\n</template>\n```\n\n## Building your own hook\n\nNo matter what front-end framework you are using, you can build your own hook using the same underlying tooling that Payload provides.\n\nFirst, install the base `@payloadcms/live-preview` package:\n\n```bash\nnpm install @payloadcms/live-preview\n```\n\nThis package provides the following functions:\n\n| Path                  | Description                                                                                                                                                                                 |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`subscribe`**       | Subscribes to the Admin panel's `window.postMessage` events and calls the provided callback function.                                                                                       |\n| **`unsubscribe`**     | Unsubscribes from the Admin panel's `window.postMessage` events.                                                                                                                            |\n| **`ready`**           | Sends a `window.postMessage` event to the Admin panel to indicate that the front-end is ready to receive messages.                                                                          |\n\nThe `subscribe` function takes the following args:\n\n| Path                  | Description                                                                                                                                                                                 |\n| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`callback`** \\*     | A callback function that is called with `data` every time a change is made to the document.                                                                                                 |\n| **`serverURL`** \\*    | The URL of your Payload server.                                                                                                                                                             |\n| **`initialData`**     | The initial data of the document. The live data will be merged in as changes are made.                                                                                                      |\n| **`depth`**           | The depth of the relationships to fetch. Defaults to `0`.                                                                                                                                   |\n\nWith these functions, you can build your own hook using your front-end framework of choice:\n\n```tsx\nimport { subscribe, unsubscribe } from '@payloadcms/live-preview';\n\n// To build your own hook, subscribe to Live Preview events using the`subscribe` function\n// It handles everything from:\n// 1. Listening to `window.postMessage` events\n// 2. Merging initial data with active form state\n// 3. Populating relationships and uploads\n// 4. Calling the `onChange` callback with the result\n// Your hook should also:\n// 1. Tell the Admin panel when it is ready to receive messages\n// 2. Handle the results of the `onChange` callback to update the UI\n// 3. Unsubscribe from the `window.postMessage` events when it unmounts\n```\n\nHere is an example of what the same `useLivePreview` React hook from above looks like under the hood:\n\n```tsx\nimport { subscribe, unsubscribe, ready } from '@payloadcms/live-preview'\nimport { useCallback, useEffect, useState, useRef } from 'react'\n\nexport const useLivePreview = <T extends any>(props: {\n  depth?: number\n  initialData: T\n  serverURL: string\n}): {\n  data: T\n  isLoading: boolean\n} => {\n  const { depth = 0, initialData, serverURL } = props\n  const [data, setData] = useState<T>(initialData)\n  const [isLoading, setIsLoading] = useState<boolean>(true)\n  const hasSentReadyMessage = useRef<boolean>(false)\n\n  const onChange = useCallback((mergedData) => {\n    // When a change is made, the `onChange` callback will be called with the merged data\n    // Set this merged data into state so that React will re-render the UI\n    setData(mergedData)\n    setIsLoading(false)\n  }, [])\n\n  useEffect(() => {\n    // Listen for `window.postMessage` events from the Admin panel\n    // When a change is made, the `onChange` callback will be called with the merged data\n    const subscription = subscribe({\n      callback: onChange,\n      depth,\n      initialData,\n      serverURL,\n    })\n\n    // Once subscribed, send a `ready` message back up to the Admin panel\n    // This will indicate that the front-end is ready to receive messages\n    if (!hasSentReadyMessage.current) {\n      hasSentReadyMessage.current = true\n\n      ready({\n        serverURL\n      })\n    }\n\n    // When the component unmounts, unsubscribe from the `window.postMessage` events\n    return () => {\n      unsubscribe(subscription)\n    }\n  }, [serverURL, onChange, depth, initialData])\n\n  return {\n    data,\n    isLoading,\n  }\n}\n```\n\n<Banner type=\"info\">\n  When building your own hook, ensure that the args and return values are consistent with the ones listed at the top of this document. This will ensure that all hooks follow the same API.\n</Banner>\n\n## Example\n\nFor a working demonstration of this, check out the official [Live Preview Example](https://github.com/payloadcms/payload/tree/main/examples/live-preview/payload). There you will find examples of various front-end frameworks and how to integrate each one of them, including:\n\n- [Next.js App Router](https://github.com/payloadcms/payload/tree/main/examples/live-preview/next-app)\n- [Next.js Pages Router](https://github.com/payloadcms/payload/tree/main/examples/live-preview/next-pages)\n\n## Troubleshooting\n\n#### Relationships and/or uploads are not populating\n\nIf you are using relationships or uploads in your front-end application, and your front-end application runs on a different domain than your Payload server, you may need to configure [CORS](../configuration/overview) to allow requests to be made between the two domains. This includes sites that are running on a different port or subdomain. Similarly, if you are protecting resources behind user authentication, you may also need to configure [CSRF](../authentication/overview#csrf-protection) to allow cookies to be sent between the two domains. For example:\n\n```ts\n// payload.config.ts\n{\n  // ...\n  // If your site is running on a different domain than your Payload server,\n  // This will allows requests to be made between the two domains\n  cors: {\n    [\n      'http://localhost:3001' // Your front-end application\n    ],\n  },\n  // If you are protecting resources behind user authentication,\n  // This will allow cookies to be sent between the two domains\n  csrf: {\n    [\n      'http://localhost:3001' // Your front-end application\n    ],\n  },\n}\n```\n\n#### Relationships and/or uploads disappear after editing a document\n\nIt is possible that either you are setting an improper [`depth`](../getting-started/concepts#depth) in your initial request and/or your `useLivePreview` hook, or they're mismatched. Ensure that the `depth` parameter is set to the correct value, and that it matches exactly in both places. For example:\n\n```tsx\n// Your initial request\nconst { docs } = await payload.find({\n  collection: 'pages',\n  depth: 1, // Ensure this is set to the proper depth for your application\n  where: {\n    slug: {\n      equals: 'home',\n    }\n  }\n})\n```\n\n```tsx\n// Your hook\nconst { data } = useLivePreview<PageType>({\n  initialData: initialPage,\n  serverURL: PAYLOAD_SERVER_URL,\n  depth: 1, // Ensure this matches the depth of your initial request\n})\n```\n\n#### Iframe refuses to connect\n\nIf your front-end application has set a [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP) (CSP) that blocks the Admin Panel from loading your front-end application, the iframe will not be able to load your site. To resolve this, you can whitelist the Admin Panel's domain in your CSP by setting the `frame-ancestors` directive:\n\n```plaintext\nframe-ancestors: \"self\" localhost:* https://your-site.com;\n```\n",
            "desc": "Learn how to implement Live Preview in your front-end application.",
            "headings": [
              {
                "id": "react",
                "level": 3,
                "text": "React"
              },
              {
                "id": "vue",
                "level": 3,
                "text": "Vue"
              },
              {
                "id": "building-your-own-hook",
                "level": 2,
                "text": "Building your own hook"
              },
              {
                "id": "example",
                "level": 2,
                "text": "Example"
              },
              {
                "id": "troubleshooting",
                "level": 2,
                "text": "Troubleshooting"
              }
            ],
            "keywords": "live preview, frontend, react, next.js, vue, nuxt.js, svelte, hook, useLivePreview",
            "label": "Frontend",
            "order": 20,
            "title": "Implementing Live Preview in your app"
          }
        ]
      },
      {
        "slug": "Versions",
        "docs": [
          {
            "slug": "overview",
            "content": "\n<Banner>\n  Payload's powerful Versions functionality allows you to keep a running history of changes over\n  time and extensible to fit any content publishing workflow.\n</Banner>\n\nWhen enabled, Payload will automatically scaffold a new Collection in your database to store versions of your document(s) over time, and the Admin UI will be extended with additional views that allow you to browse document versions, view diffs in order to see exactly what has changed in your documents (and when they changed), and restore documents back to prior versions easily.\n\n![Versions](/images/docs/versions.png)\n_Comparing an old version to a newer version of a document_\n\n**With Versions, you can:**\n\n- Maintain an audit log / history of every change ever made to a document, including monitoring for what user made which change\n- Restore documents and globals to prior states in case you need to roll back changes\n- Build a true [Draft Preview](../versions/drafts) mode for your data\n- Manage who can see Drafts, and who can only see Published documents via [Access Control](../access-control/overview)\n- Enable [Autosave](../versions/autosave) on collections and globals to never lose your work again\n- Build a powerful publishing schedule mechanism to create documents and have them become publicly readable automatically at a future date\n\n<Banner type=\"success\">\n  Versions are extremely performant and totally opt-in. They don't change the shape of your data at\n  all. All versions are stored in a separate Collection and can be turned on and off easily at your\n  discretion.\n</Banner>\n\n### Options\n\nVersions support a few different levels of functionality that each come with their own impacts to document workflow.\n\n##### Versions enabled, drafts disabled\n\nIf you enable versions but keep draft mode disabled, Payload will simply create a new version of a document each time you update a document. This is great for use cases where you need to retain a history of all document updates over time, but always want to treat the newest document version as the version that is \"published\".\n\nFor example, a use case for \"versions enabled, drafts disabled\" could be on a collection of users, where you might want to keep a version history (or audit log) of all changes ever made to users - but any changes to users should _always_ be treated as \"published\" and you have no need to maintain a \"draft\" version of a user.\n\n##### Versions and drafts enabled\n\nIf you have versions _and_ drafts enabled, you are able to control which documents are published, and which are considered draft. That lets you write [access control](../access-control/overview) to control who can see published documents, and who can see draft documents. It also lets you save versions (drafts) that are _newer_ than your most recently published document, which is helpful if you want to draft changes and maybe even preview them before you publish the changes. Read more about Drafts [here](../versions/drafts).\n\n##### Versions, drafts, and autosave enabled\n\nWhen you have versions, drafts, _and_ `autosave` enabled, the Admin UI will automatically save changes that you make to a new `draft` version as you edit a document, which makes sure that you never lose your changes ever again. Autosave will not affect your published post at all—instead, it'll just save your changes and let you publish them whenever you or your editors are ready to do so. Read more about Autosave [here](../versions/autosave).\n\n### Collection config\n\nConfiguring Versions is done by adding the `versions` key to your Collection configs. Set it to `true` to enable default Versions settings, or customize versions options by setting the property equal to an object containing the following available options:\n\n| Option      | Description                                                                                                                                                        |\n| ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `maxPerDoc` | Use this setting to control how many versions to keep on a document by document basis. Must be an integer. Defaults to 100, use 0 to save all versions.            |\n| `drafts `   | Enable [Drafts](../versions/drafts) mode for this collection. To enable, set to `true` or pass an object with `draft` [options](../versions/drafts#options). |\n\n### Global config\n\nGlobal versions work similarly to Collection versions but have a slightly different set of config properties supported.\n\n| Option   | Description                                                                                                                                                   |\n| -------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `max`    | Use this setting to control how many versions to keep on a global by global basis. Must be an integer.                                                        |\n| `drafts` | Enable [Drafts](../versions/drafts) mode for this global. To enable, set to `true` or pass an object with `draft` [options](../versions/drafts#options) |\n\n#### Database impact\n\nBy enabling `versions`, a new database collection will be made to store versions for your collection or global. The collection will be named based off the `slug` of the collection or global and will follow this pattern (where `slug` is replaced with the `slug` of your collection or global):\n\n```\n_slug_versions\n```\n\nEach document in this new `versions` collection will store a set of meta properties about the version as well as a _full_ copy of the document. For example, a version's data might look like this for a Collection document:\n\n```json\n{\n  \"_id\": \"61cf752c19cdf1b1af7b61f1\", // a unique ID of this version\n  \"parent\": \"61ce1354091d5b3ffc20ea6e\", // the ID of the parent document\n  \"autosave\": false, // used to denote if this version was created via autosave\n  \"version\": {\n    // your document's data goes here\n    // all fields are set to not required and this property can be partially complete\n  },\n  \"createdAt\": \"2021-12-31T21:25:00.992+00:00\",\n  \"updatedAt\": \"2021-12-31T21:25:00.992+00:00\"\n}\n```\n\nGlobal versions are stored the same as the collection version shown above, except they do not feature the `parent` property, as each Global receives its own `versions` collection. That means we know that all versions in that collection correspond to that specific global.\n\n### Version operations\n\nVersions expose new operations for both collections and globals. They allow you to find and query versions, find a single version by ID, and publish (or restore) a version by ID. Both Collections and Globals support the same new operations. They are used primarily by the admin UI, but if you are writing custom logic in your app and would like to utilize them, they're available for you to use as well via REST, GraphQL, and Local APIs.\n\n**Collection REST endpoints:**\n\n| Method | Path                                 | Description                       |\n| ------ | ------------------------------------ | --------------------------------- |\n| `GET`  | `/api/{collectionSlug}/versions`     | Find and query paginated versions |\n| `GET`  | `/api/{collectionSlug}/versions/:id` | Find a specific version by ID     |\n| `POST` | `/api/{collectionSlug}/versions/:id` | Restore a version by ID           |\n\n**Collection GraphQL queries:**\n\n| Query Name                               | Operation         |\n| ---------------------------------------- | ----------------- |\n| **`version{collection.label.singular}`** | `findVersionByID` |\n| **`versions{collection.label.plural}`**  | `findVersions`    |\n\n**And mutation:**\n\n| Query Name                                      | Operation        |\n| ----------------------------------------------- | ---------------- |\n| **`restoreVersion{collection.label.singular}`** | `restoreVersion` |\n\n**Collection Local API methods:**\n\n#### Find\n\n```js\n// Result will be a paginated set of Versions.\n// See /docs/queries/pagination for more.\nconst result = await payload.findVersions({\n  collection: 'posts', // required\n  depth: 2,\n  page: 1,\n  limit: 10,\n  where: {}, // pass a `where` query here\n  sort: '-createdAt',\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n#### Find by ID\n\n```js\n// Result will be a Post document.\nconst result = await payload.findVersionByID({\n  collection: 'posts', // required\n  id: '507f1f77bcf86cd799439013', // required\n  depth: 2,\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n#### Restore\n\n```js\n// Result will be the restored global document.\nconst result = await payload.restoreVersion({\n  collection: 'posts', // required\n  id: '507f1f77bcf86cd799439013', // required\n  depth: 2,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n**Global REST endpoints:**\n\n| Method | Path                                     | Description                       |\n| ------ | ---------------------------------------- | --------------------------------- |\n| `GET`  | `/api/globals/{globalSlug}/versions`     | Find and query paginated versions |\n| `GET`  | `/api/globals/{globalSlug}/versions/:id` | Find a specific version by ID     |\n| `POST` | `/api/globals/{globalSlug}/versions/:id` | Restore a version by ID           |\n\n**Global GraphQL queries:**\n\n| Query Name                   | Operation         |\n| ---------------------------- | ----------------- |\n| **`version{global.label}`**  | `findVersionByID` |\n| **`versions{global.label}`** | `findVersions`    |\n\n**Global GraphQL mutation:**\n\n| Query Name                         | Operation        |\n| ---------------------------------- | ---------------- |\n| **`restoreVersion{global.label}`** | `restoreVersion` |\n\n**Global Local API methods:**\n\n#### Find\n\n```js\n// Result will be a paginated set of Versions.\n// See /docs/queries/pagination for more.\nconst result = await payload.findGlobalVersions({\n  slug: 'header', // required\n  depth: 2,\n  page: 1,\n  limit: 10,\n  where: {}, // pass a `where` query here\n  sort: '-createdAt',\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n#### Find by ID\n\n```js\n// Result will be a Post document.\nconst result = await payload.findGlobalVersionByID({\n  slug: 'header', // required\n  id: '507f1f77bcf86cd799439013', // required\n  depth: 2,\n  locale: 'en',\n  fallbackLocale: false,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n#### Restore\n\n```js\n// Result will be the restored global document.\nconst result = await payload.restoreGlobalVersion({\n  slug: 'header', // required\n  id: '507f1f77bcf86cd799439013', // required\n  depth: 2,\n  user: dummyUser,\n  overrideAccess: false,\n  showHiddenFields: true,\n})\n```\n\n### Access Control\n\nVersions expose a new access control function on both Collections and Globals that allow for you to control who can see versions of documents, and who can't.\n\n**New version access control:**\n\n| Function           | Allows/Denies Access                                                                                                   |\n| ------------------ | ---------------------------------------------------------------------------------------------------------------------- |\n| **`readVersions`** | Used to control who can read versions, and who can't. Will automatically restrict the Admin UI version viewing access. |\n",
            "desc": "Keep a version history or audit log of changes and publish collection documents and globals.",
            "headings": [
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "collection-config",
                "level": 3,
                "text": "Collection config"
              },
              {
                "id": "global-config",
                "level": 3,
                "text": "Global config"
              },
              {
                "id": "version-operations",
                "level": 3,
                "text": "Version operations"
              },
              {
                "id": "access-control",
                "level": 3,
                "text": "Access Control"
              }
            ],
            "keywords": "version history, revisions, audit log, draft, publish, restore, autosave, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Versions"
          },
          {
            "slug": "drafts",
            "content": "\nPayload's Draft functionality builds on top of the Versions functionality to allow you to make changes to your collection documents and globals, but publish only when you're ready. This functionality allows you to build powerful Preview environments for your data, where you can make sure your changes look good before publishing documents.\n\n<Banner type=\"warning\">Drafts rely on Versions being enabled in order to function.</Banner>\n\nBy enabling Versions with Drafts, your collections and globals can maintain _newer_, and _unpublished_ versions of your documents. It's perfect for cases where you might want to work on a document, update it and save your progress, but not necessarily make it publicly published right away. Drafts are extremely helpful when building preview implementations.\n\n![Drafts Enabled](/images/docs/drafts-enabled.png)\n_If Drafts are enabled, the typical Save button is replaced with new actions which allow you to either save a draft, or publish your changes._\n\n### Options\n\nCollections and Globals both support the same options for configuring drafts. You can either set `versions.drafts` to `true`, or pass an object to configure draft properties.\n\n| Draft Option | Description                                                                                                                                                      |\n| ------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `autosave`   | Enable `autosave` to automatically save progress while documents are edited. To enable, set to `true` or pass an object with [options](../versions/autosave). |\n| `validate`   | Set `validate` to `true` to validate draft documents when saved. Default is `false`.                                                                             |\n\n### Database changes\n\nBy enabling drafts on a collection or a global, Payload will <strong>automatically inject a new field into your schema</strong> called `_status`. The `_status` field is used internally by Payload to store if a document is set to `draft` or `published`.\n\n**Admin UI status indication**\n\nWithin the Admin UI, if drafts are enabled, a document can be shown with one of three \"statuses\":\n\n1. <strong>Draft</strong> - if a document has never been published, and only draft versions of the document\n   are present\n1. <strong>Published</strong> - if a document is published and there are no newer drafts available\n1. <strong>Changed</strong> - if a document has been published, but there are newer drafts available\n   and not yet published\n\n### Draft API\n\n<Banner type=\"success\">\n  If drafts are enabled on your collection or global, important and powerful changes are made to\n  your REST, GraphQL, and Local APIs that allow you to specify if you are interacting with drafts or\n  with live documents.\n</Banner>\n\n##### Updating or creating drafts\n\nIf you enable drafts on a collection or global, the `create` and `update` operations for REST, GraphQL, and Local APIs expose a new option called `draft` which allows you to specify if you are creating or updating a <strong>draft</strong>, or if you're just sending your changes straight to the published document. For example, if you pass the query parameter `?draft=true` to a REST `create` or `update` operation, your action will be treated as if you are creating a `draft` and not a published document. By default, the `draft` argument is set to `false`.\n\n**Required fields**\n\nIf `draft` is enabled while creating or updating a document, all fields are considered as not required, so that you can save drafts that are incomplete.\n\n##### Reading drafts vs. published documents\n\nIn addition to the `draft` argument within `create` and `update` operations, a `draft` argument is also exposed for `find` and `findByID` operations.\n\nIf `draft` is set to `true` while reading a document, <strong>Payload will automatically replace returned document(s) with their newest drafts</strong> if any newer drafts are available.\n\n<strong>For example, let's take the following scenario:</strong>\n\n1. You create a new collection document and publish it right away\n1. You then make some updates, and save the updates as a draft\n1. You then make some further updates, and save more updates as another draft\n\nHere, you will have a published document that resides in your main collection, and then you'll have two _newer_ drafts that reside in the `_[collectionSlug]_versions` database collection.\n\nIf you simply fetch your created document using a `find` or `findByID` operation, your published document will be returned and the drafts will be ignored.\n\nBut, if you specify `draft` as `true`, Payload will automatically replace your published document's content with content coming from the most recently saved `version`. In this case, as we have created _two_ versions in the above scenario, Payload will send back data from the newest (second) draft and your document will appear as the most recently drafted version instead of the published version.\n\n### Controlling who can see Collection drafts\n\n<Banner type=\"warning\">\n  If you're using the <strong>drafts</strong> feature, it's important for you to consider who can\n  view your drafts, and who can view only published documents. Luckily, Payload makes this extremely\n  simple and puts the power completely in your hands.\n</Banner>\n\n##### Restricting draft access\n\nYou can use the `read` [Access Control](../access-control/collections#read) method to restrict who is able to view drafts of your documents by simply returning a [query constraint](../queries/overview) which restricts the documents that any given user is able to retrieve.\n\nHere is an example that utilizes the `_status` field to require a user to be logged in to retrieve drafts:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Pages: CollectionConfig = {\n  slug: 'pages',\n  access: {\n    read: ({ req }) => {\n      // If there is a user logged in,\n      // let them retrieve all documents\n      if (req.user) return true\n\n      // If there is no user,\n      // restrict the documents that are returned\n      // to only those where `_status` is equal to `published`\n      return {\n        _status: {\n          equals: 'published',\n        },\n      }\n    },\n  },\n  versions: {\n    drafts: true,\n  },\n  //.. the rest of the Pages config here\n}\n```\n\n<Banner type=\"warning\">\n  <strong>Note regarding adding versions to an existing collection</strong>\n  <br />\n  If you already have a collection with documents, and you <em>opt in</em> to draft functionality\n  after you have already created existing documents, all of your old documents{' '}\n  <em>will not have a _status field</em> until you resave them. For this reason, if you are{' '}\n  <em>adding</em> versions into an existing collection, you might want to write your access control\n  function to allow for users to read both documents where{' '}\n  <strong>_status is equal to \"published\"</strong> as well as where{' '}\n  <strong>_status does not exist</strong>.\n</Banner>\n\nHere is an example for how to write an access control function that grants access to both documents where `_status` is equal to \"published\" and where `_status` does not exist:\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Pages: CollectionConfig = {\n  slug: 'pages',\n  access: {\n    read: ({ req }) => {\n      // If there is a user logged in,\n      // let them retrieve all documents\n      if (req.user) return true\n\n      // If there is no user,\n      // restrict the documents that are returned\n      // to only those where `_status` is equal to `published`\n      // or where `_status` does not exist\n      return {\n        or: [\n          {\n            _status: {\n              equals: 'published',\n            },\n          },\n          {\n            _status: {\n              exists: false,\n            },\n          },\n        ],\n      }\n    },\n  },\n  versions: {\n    drafts: true,\n  },\n  //.. the rest of the Pages config here\n}\n```\n\n### Unpublishing drafts\n\nIf a document is published, the Payload Admin UI will be updated to show an \"unpublish\" button at the top of the sidebar, which will \"unpublish\" the currently published document. Consider this as a way to \"revert\" a document back to a draft state. On the API side, this is done by simply setting `_status: 'draft'` on any document.\n\n### Reverting to published\n\nIf a document is published, and you have made further changes which are saved as a draft, Payload will show a \"revert to published\" button at the top of the sidebar which will allow you to reject your draft changes and \"revert\" back to the published state of the document. Your drafts will still be saved, but a new version will be created that will reflect the last published state of the document.\n",
            "desc": "Enable drafts on collection documents or globals and build true preview environments for your data.",
            "headings": [
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "database-changes",
                "level": 3,
                "text": "Database changes"
              },
              {
                "id": "draft-api",
                "level": 3,
                "text": "Draft API"
              },
              {
                "id": "controlling-who-can-see-collection-drafts",
                "level": 3,
                "text": "Controlling who can see Collection drafts"
              },
              {
                "id": "unpublishing-drafts",
                "level": 3,
                "text": "Unpublishing drafts"
              },
              {
                "id": "reverting-to-published",
                "level": 3,
                "text": "Reverting to published"
              }
            ],
            "keywords": "version history, drafts, preview, draft, restore, publish, autosave, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Drafts",
            "order": 20,
            "title": "Drafts"
          },
          {
            "slug": "autosave",
            "content": "\nExtending on Payload's [Draft](../versions/drafts) functionality, you can configure your collections and globals to autosave changes as drafts, and publish only you're ready. The Admin UI will automatically adapt to autosaving progress at an interval that you define, and will store all autosaved changes as a new Draft version. Never lose your work - and publish changes to the live document only when you're ready.\n\n<Banner type=\"warning\">\n  Autosave relies on Versions and Drafts being enabled in order to function.\n</Banner>\n\n![Autosave Enabled](/images/docs/autosave-enabled.png)\n_If Autosave is enabled, drafts will be created automatically as the document is modified and the Admin UI adds an indicator describing when the document was last saved to the top right of the sidebar._\n\n### Options\n\nCollections and Globals both support the same options for configuring autosave. You can either set `versions.drafts.autosave` to `true`, or pass an object to configure autosave properties.\n\n| Drafts Autosave Options | Description                                                                                                                                                            |\n| ----------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `interval`              | Define an `interval` in milliseconds to automatically save progress while documents are edited. Document updates are \"debounced\" at this interval. Defaults to `800`. |\n\n**Example config with versions, drafts, and autosave enabled:**\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Pages: CollectionConfig = {\n  slug: 'pages',\n  access: {\n    read: ({ req }) => {\n      // If there is a user logged in,\n      // let them retrieve all documents\n      if (req.user) return true\n\n      // If there is no user,\n      // restrict the documents that are returned\n      // to only those where `_status` is equal to `published`\n      return {\n        _status: {\n          equals: 'published',\n        },\n      }\n    },\n  },\n  versions: {\n    drafts: {\n      autosave: true,\n\n      // Alternatively, you can specify an `interval`:\n      // autosave: {\n      //   interval: 1500,\n      // },\n    },\n  },\n  //.. the rest of the Pages config here\n}\n```\n\n### Autosave API\n\nWhen `autosave` is enabled, all `update` operations within Payload expose a new argument called `autosave`. When set to `true`, Payload will treat the incoming draft update as an `autosave`. This is primarily used by the Admin UI, but there may be some cases where you are building an app for your users and wish to implement `autosave` in your own app. To do so, use the `autosave` argument in your `update` operations.\n\n#### How autosaves are stored\n\nIf we created a new version for each autosave, you'd quickly find a ton of autosaves that clutter up your `_versions` collection within the database. That would be messy quick because `autosave` is typically set to save a document at ~800ms intervals.\n\n<Banner type=\"success\">\n  Instead of creating a new version each time a document is autosaved, Payload smartly only creates{' '}\n  <strong>one</strong> autosave version, and then updates that specific version with each autosave\n  performed. This makes sure that your versions remain nice and tidy.\n</Banner>\n",
            "desc": "Using Payload's Draft functionality, you can configure your collections and globals to autosave changes as drafts, and publish only you're ready.",
            "headings": [
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "autosave-api",
                "level": 3,
                "text": "Autosave API"
              }
            ],
            "keywords": "version history, revisions, audit log, draft, publish, autosave, Content Management System, cms, headless, javascript, node, react, expresss",
            "label": "Autosave",
            "order": 30,
            "title": "Autosave"
          }
        ]
      },
      {
        "slug": "Upload",
        "docs": [
          {
            "slug": "overview",
            "content": "\n<Banner>\n  Payload provides for everything you need to enable file upload, storage, and management directly\n  on your server—including extremely powerful file access control.\n</Banner>\n\n![Upload admin panel functionality](https://payloadcms.com/images/docs/upload-admin.jpg)\n_Admin panel screenshot depicting a Media Collection with Upload enabled_\n\n**Here are some common use cases of Uploads:**\n\n- Creating a \"Media Library\" that contains images for use throughout your site or app\n- Building a Gated Content library where users need to sign up to gain access to downloadable assets like ebook PDFs, whitepapers, etc.\n- Storing publicly available, downloadable assets like software, ZIP files, MP4s, etc.\n\n**By simply enabling Upload functionality on a Collection, Payload will automatically transform your Collection into a robust file management / storage solution. The following modifications will be made:**\n\n1. `filename`, `mimeType`, and `filesize` fields will be automatically added to your Collection. Optionally, if you pass `imageSizes` to your Collection's Upload config, a [`sizes`](#image-sizes) array will also be added containing auto-resized image sizes and filenames.\n1. The Admin panel will modify its built-in `List` component to show a thumbnail for each upload within the List View\n1. The Admin panel will modify its `Edit` view(s) to add a new set of corresponding Upload UI which will allow for file upload\n1. The `create`, `update`, and `delete` Collection operations will be modified to support file upload, re-upload, and deletion\n\n### Enabling Uploads\n\nEvery Payload Collection can opt-in to supporting Uploads by specifying the `upload` property on the Collection's config to either `true` or to an object containing `upload` options.\n\n<Banner type=\"success\">\n  <strong>Tip:</strong>\n  <br />A common pattern is to create a <strong>Media</strong> collection and enable <strong>\n    upload\n  </strong> on that collection.\n</Banner>\n\n### Collection Upload Options\n\n| Option                         | Description                                                                                                                                                                             |\n| -------------------------      | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`staticURL`** \\*             | The URL path to use to access your uploads. Relative path like `/media` will be served by payload. Full path like `https://example.com/media` needs to be served by another web server. |\n| **`staticDir`** \\*             | The folder directory to use to store media in. Can be either an absolute path or relative to the directory that contains your config.                                                   |\n| **`adminThumbnail`**           | Set the way that the Admin panel will display thumbnails for this Collection. [More](#admin-thumbnails)                                                                                 |\n| **`crop`**                     | Set to `false` to disable the cropping tool in the Admin panel. Crop is enabled by default. [More](#crop-and-focal-point-selector)                                                      |\n| **`disableLocalStorage`**      | Completely disable uploading files to disk locally. [More](#disabling-local-upload-storage)                                                                                             |\n| **`displayPreview`**           | Enable displaying preview of the uploaded file in Upload fields related to this Collection. Can be locally overridden by `displayPreview` option in Upload field. [More](../fields/upload#config). |\n| **`externalFileHeaderFilter`** | Accepts existing headers and can filter/modify them.                                                                                                                                    |\n| **`focalPoint`**               | Set to `false` to disable the focal point selection tool in the Admin panel. The focal point selector is only available when `imageSizes` or `resizeOptions` are defined. [More](#crop-and-focal-point-selector) |\n| **`formatOptions`**            | An object with `format` and `options` that are used with the Sharp image library to format the upload file. [More](https://sharp.pixelplumbing.com/api-output#toformat)                 |\n| **`handlers`**                 | Array of Express request handlers to execute before the built-in Payload static middleware executes.                                                                                    |\n| **`imageSizes`**               | If specified, image uploads will be automatically resized in accordance to these image sizes. [More](#image-sizes)                                                                      |\n| **`mimeTypes`**                | Restrict mimeTypes in the file picker. Array of valid mimetypes or mimetype wildcards [More](#mimetypes)                                                                                |\n| **`staticOptions`**            | Set options for `express.static` to use while serving your static files. [More](http://expressjs.com/en/resources/middleware/serve-static.html)                                         |\n| **`resizeOptions`**            | An object passed to the the Sharp image library to resize the uploaded file. [More](https://sharp.pixelplumbing.com/api-resize)                                                         |\n| **`filesRequiredOnCreate`**    | Mandate file data on creation, default is true.                                                                                                                                         |\n| **`withMetadata`**             | If specified, appends metadata to the output image file. Accepts a boolean or a function that receives `metadata` and `req`, returning a boolean.                                       |\n\n_An asterisk denotes that a property above is required._\n\n**Example Upload collection:**\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Media: CollectionConfig = {\n  slug: 'media',\n  upload: {\n    staticURL: '/media',\n    staticDir: 'media',\n    imageSizes: [\n      {\n        name: 'thumbnail',\n        width: 400,\n        height: 300,\n        position: 'centre',\n      },\n      {\n        name: 'card',\n        width: 768,\n        height: 1024,\n        position: 'centre',\n      },\n      {\n        name: 'tablet',\n        width: 1024,\n        // By specifying `undefined` or leaving a height undefined,\n        // the image will be sized to a certain width,\n        // but it will retain its original aspect ratio\n        // and calculate a height automatically.\n        height: undefined,\n        position: 'centre',\n      },\n    ],\n    adminThumbnail: 'thumbnail',\n    mimeTypes: ['image/*'],\n  },\n  fields: [\n    {\n      name: 'alt',\n      type: 'text',\n    },\n  ],\n}\n```\n\n### Payload-wide Upload Options\n\nPayload relies on the [`express-fileupload`](https://www.npmjs.com/package/express-fileupload) package to manage file uploads in Express. In addition to the Upload options specifiable on a Collection by Collection basis, you can also control the `express-fileupload` options by passing your base Payload config an `upload` property containing an object supportive of all `express-fileupload` properties which use `Busboy` under the hood. [Click here](https://github.com/mscdex/busboy#api) for more documentation about what you can control.\n\nA common example of what you might want to customize within Payload-wide Upload options would be to increase the allowed `fileSize` of uploads sent to Payload:\n\n```ts\nimport { buildConfig } from 'payload/config'\n\nexport default buildConfig({\n  collections: [\n    {\n      slug: 'media',\n      fields: [\n        {\n          name: 'alt',\n          type: 'text',\n        },\n      ],\n      upload: true,\n    },\n  ],\n  upload: {\n    limits: {\n      fileSize: 5000000, // 5MB, written in bytes\n    },\n  },\n})\n```\n\n### Image Sizes\n\nIf you specify an array of `imageSizes` to your `upload` config, Payload will automatically crop and resize your uploads to fit each of the sizes specified by your config.\n\nThe Payload Admin panel will also automatically display all available files, including width, height, and filesize, for each of your uploaded files.\n\nBehind the scenes, Payload relies on [`sharp`](https://sharp.pixelplumbing.com/api-resize#resize) to perform its image resizing. You can specify additional options for `sharp` to use while resizing your images.\n\n##### Accessing the resized images in hooks\n\nAll auto-resized images are exposed to be re-used in hooks and similar via an object that is bound to `req.payloadUploadSizes`.\n\nThe object will have keys for each size generated, and each key will be set equal to a buffer containing the file data.\n\n##### Handling Image Enlargement\n\nWhen an uploaded image is smaller than the defined image size, we have 3 options:\n\n`withoutEnlargement: undefined | false | true`\n\n1.`undefined` [default]: uploading images with smaller width AND height than the image size will return null\n2. `false`: always enlarge images to the image size\n3. `true`: if the image is smaller than the image size, return the original image\n\n<Banner type=\"error\">\n  <strong>Note:</strong>\n  <br />\n  By default, the image size will return NULL when the uploaded image is smaller than the defined image size.\n  Use the `withoutEnlargement` prop to change this.\n</Banner>\n\n#### Custom file name per size\n\nEach image size supports a `generateImageName` function that can be used to generate a custom file name for the resized image.\nThis function receives the original file name, the resize name, the extension, height and width as arguments.\n\n```ts\n{\n  name: 'thumbnail',\n  width: 400,\n  height: 300,\n  generateImageName: ({ height, sizeName, extension, width }) => {\n    return `custom-${sizeName}-${height}-${width}.${extension}`\n  },\n}\n```\n\n### Crop and Focal Point Selector\n\nThis feature is only available for image file types.\n\nSetting `crop: false` and `focalPoint: false` in your Upload config will be disable the respective selector in the Admin panel.\n\nImage cropping occurs before any resizing, the resized images will therefore be generated from the cropped image (**not** the original image).\n\nIf no resizing options are specified (`imageSizes` or `resizeOptions`), the focal point selector will not be displayed.\n\n### Disabling Local Upload Storage\n\nIf you are using a plugin to send your files off to a third-party file storage host or CDN, like Amazon S3 or similar, you may not want to store your files locally at all. You can prevent Payload from writing files to disk by specifying `disableLocalStorage: true` on your collection's upload config.\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  This is a fairly advanced feature. If you do disable local file storage, by default, your admin\n  panel's thumbnails will be broken as you will not have stored a file. It will be totally up to you\n  to use either a plugin or your own hooks to store your files in a permanent manner, as well as\n  provide your own admin thumbnail using <strong>upload.adminThumbnail</strong>.\n</Banner>\n\n### Admin Thumbnails\n\nYou can specify how Payload retrieves admin thumbnails for your upload-enabled Collections. This property accepts two different configurations:\n\n1. A string equal to one of your provided image size names to use for the admin panel's thumbnail (seen in the example Media collection above)\n1. A function that takes the document's data and sends back a full URL to load the thumbnail. For example, to dynamically set an admin thumbnail URL, you could write a function that returns a string pointing to a different file source:\n\n**Example custom Admin thumbnail:**\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Media: CollectionConfig = {\n  slug: 'media',\n  upload: {\n    staticURL: '/media',\n    staticDir: 'media',\n    imageSizes: [\n      // ... image sizes here\n    ],\n    // highlight-start\n    adminThumbnail: ({ doc }) =>\n      `https://google.com/custom-path-to-file/${doc.filename}`,\n    // highlight-end\n  },\n}\n```\n\n<Banner>\n  <strong>Note:</strong>\n  <br />\n  This function runs in the browser. If your function returns `null` or `false` Payload will show\n  the default generic file thumbnail instead.\n</Banner>\n\n### MimeTypes\n\nSpecifying the `mimeTypes` property can restrict what files are allowed from the user's file picker. This accepts an array of strings, which can be any valid mimetype or mimetype wildcards\n\nSome example values are: `image/*`, `audio/*`, `video/*`, `image/png`, `application/pdf`\n\n**Example mimeTypes usage:**\n\n```ts\nimport { CollectionConfig } from 'payload/types'\n\nexport const Media: CollectionConfig = {\n  slug: 'media',\n  upload: {\n    staticURL: '/media',\n    staticDir: 'media',\n    mimeTypes: ['image/*', 'application/pdf'], // highlight-line\n  },\n}\n```\n\n### Uploading Files\n\n<Banner type=\"warning\">\n  <strong>Important:</strong>\n  <br />\n  Uploading files is currently only possible through the REST and Local APIs due to how GraphQL\n  works. It's difficult and fairly nonsensical to support uploading files through GraphQL.\n</Banner>\n\nTo upload a file, use your collection's [`create`](../rest-api/overview#collections) endpoint. Send it all the data that your Collection requires, as well as a `file` key containing the file that you'd like to upload.\n\nSend your request as a `multipart/form-data` request, using [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData) if possible.\n\n[Here is a walkthrough](https://muffinman.io/blog/uploading-files-using-fetch-multipart-form-data/) detailing how to upload files as `multipart/form-data` using React.\n\n### Access Control\n\nAll files that are uploaded to each Collection automatically support the `read` [Access Control](../access-control/overview) function from the Collection itself. You can use this to control who should be allowed to see your uploads, and who should not.\n",
            "desc": "Payload supports uploads, storage and management of files directly on your server, combined with powerful file access control.",
            "headings": [
              {
                "id": "enabling-uploads",
                "level": 3,
                "text": "Enabling Uploads"
              },
              {
                "id": "collection-upload-options",
                "level": 3,
                "text": "Collection Upload Options"
              },
              {
                "id": "payload-wide-upload-options",
                "level": 3,
                "text": "Payload-wide Upload Options"
              },
              {
                "id": "image-sizes",
                "level": 3,
                "text": "Image Sizes"
              },
              {
                "id": "crop-and-focal-point-selector",
                "level": 3,
                "text": "Crop and Focal Point Selector"
              },
              {
                "id": "disabling-local-upload-storage",
                "level": 3,
                "text": "Disabling Local Upload Storage"
              },
              {
                "id": "admin-thumbnails",
                "level": 3,
                "text": "Admin Thumbnails"
              },
              {
                "id": "mimetypes",
                "level": 3,
                "text": "MimeTypes"
              },
              {
                "id": "uploading-files",
                "level": 3,
                "text": "Uploading Files"
              },
              {
                "id": "access-control",
                "level": 3,
                "text": "Access Control"
              }
            ],
            "keywords": "uploads, images, media, overview, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Uploads"
          }
        ]
      },
      {
        "slug": "Email",
        "docs": [
          {
            "slug": "overview",
            "content": "\n### Introduction\n\nPayload comes ready to send your application's email. Whether you simply need built-in password reset\nemail to work or you want customers to get an order confirmation email, you're almost there. Payload makes use of\n[NodeMailer](https://nodemailer.com) for email and won't get in your way for those already familiar.\n\nFor email to send from your Payload server, some configuration is required. The settings you provide will be set\nin the `email` property object of your payload init call. Payload will make use of the transport that you have configured for it for things like reset password or verifying new user accounts and email send methods are available to you as well on your payload instance.\n\n### Configuration\n\n**Three ways to set it up**\n\n1. **Default**: When email is not needed, a mock email handler will be created and used when nothing is provided. This is ideal for development environments and can be changed later when ready to [go to production](../production/deployment).\n1. **Recommended**: Set the `transportOptions` and Payload will do the set up for you.\n1. **Advanced**: The `transport` object can be assigned a nodemailer transport object set up in your server scripts and given for Payload to use.\n\nThe following options are configurable in the `email` property object as part of the options object when calling payload.init().\n\n| Option                   | Description                                                                                                                                                                                  |\n| ------------------------ | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`fromName`** \\*        | The name part of the From field that will be seen on the delivered email                                                                                                                     |\n| **`fromAddress`** \\*     | The email address part of the From field that will be used when delivering email                                                                                                             |\n| **`transport`**          | The NodeMailer transport object for when you want to do it yourself, not needed when transportOptions is set                                                                                 |\n| **`transportOptions`**   | An object that configures the transporter that Payload will create. For all the available options see the [NodeMailer documentation](https://nodemailer.com) or see the examples below |\n| **`logMockCredentials`** | If set to true and no transport/transportOptions, ethereal credentials will be logged to console on startup                                                                                  |\n\n_\\* An asterisk denotes that a property is required._\n\n### Use SMTP\n\nSimple Mail Transfer Protocol (SMTP) options can be passed in using the `transportOptions` object on the `email` options. See the [NodeMailer SMTP documentation](https://nodemailer.com/smtp/) for more information, including details on when `secure` should and should not be set to `true`.\n\n**Example email options using SMTP:**\n\n```ts\npayload.init({\n  email: {\n    transportOptions: {\n      host: process.env.SMTP_HOST,\n      auth: {\n        user: process.env.SMTP_USER,\n        pass: process.env.SMTP_PASS,\n      },\n      port: Number(process.env.SMTP_HOST),\n      secure: Number(process.env.SMTP_PORT) === 465, // true for port 465, false (the default) for 587 and others\n      requireTLS: true,\n    },\n    fromName: 'hello',\n    fromAddress: 'hello@example.com',\n  },\n  // ...\n})\n```\n\n<Banner type=\"warning\">\n  It is best practice to avoid saving credentials or API keys directly in your code, use\n  [environment variables](../configuration/overview#using-environment-variables-in-your-config).\n</Banner>\n\n### Use an email service\n\nMany third party mail providers are available and offer benefits beyond basic SMTP. As an example, your payload init could look like this if you wanted to use SendGrid.com, though the same approach would work for any other [NodeMailer transports](https://nodemailer.com/transports/) shown here or provided by another third party.\n\n```ts\nimport payload from 'payload'\nimport nodemailerSendgrid from 'nodemailer-sendgrid'\n\nconst sendGridAPIKey = process.env.SENDGRID_API_KEY\n\npayload.init({\n  ...(sendGridAPIKey\n    ? {\n        email: {\n          transportOptions: nodemailerSendgrid({\n            apiKey: sendGridAPIKey,\n          }),\n          fromName: 'Admin',\n          fromAddress: 'admin@example.com',\n        },\n      }\n    : {}),\n})\n```\n\n### Use a custom NodeMailer transport\n\nTo take full control of the mail transport you may wish to use `nodemailer.createTransport()` on your server and provide it to Payload init.\n\n```ts\nimport payload from 'payload'\nimport nodemailer from 'nodemailer'\n\nconst payload = require('payload')\nconst nodemailer = require('nodemailer')\n\nconst transport = await nodemailer.createTransport({\n  host: process.env.SMTP_HOST,\n  port: 587,\n  auth: {\n    user: process.env.SMTP_USER,\n    pass: process.env.SMTP_PASS,\n  },\n})\n\npayload.init({\n  email: {\n    fromName: 'Admin',\n    fromAddress: 'admin@example.com',\n    transport,\n  },\n  // ...\n})\n```\n\n### Sending Mail\n\nWith a working transport you can call it anywhere you have access to payload by calling `payload.sendEmail(message)`. The `message` will contain the `to`, `subject` and `email` or `text` for the email being sent. To see all available message configuration options see [NodeMailer](https://nodemailer.com/message).\n\n### Mock transport\n\nBy default, Payload uses a mock implementation that only sends mail to the [ethereal](https://ethereal.email) capture service that will never reach a user's inbox. While in development you may wish to make use of the captured messages which is why the payload output during server output helpfully logs this out on the server console.\n\nTo see ethereal credentials, add `logMockCredentials: true` to the email options. This will cause them to be logged to console on startup.\n\n```ts\npayload.init({\n  email: {\n    fromName: 'Admin',\n    fromAddress: 'admin@example.com',\n    logMockCredentials: true, // Optional\n  },\n  // ...\n})\n```\n\n**Console output when starting payload with a mock email instance and logMockCredentials: true**\n\n```\n[06:37:21] INFO  (payload): Starting Payload...\n[06:37:22] INFO  (payload): Payload Demo Initialized\n[06:37:22] INFO  (payload): listening on 3000...\n[06:37:22] INFO  (payload): Connected to MongoDB server successfully!\n[06:37:23] INFO  (payload): E-mail configured with mock configuration\n[06:37:23] INFO  (payload): Log into mock email provider at https://ethereal.email\n[06:37:23] INFO  (payload): Mock email account username: hhav5jw7doo4euev@ethereal.email\n[06:37:23] INFO  (payload): Mock email account password: VNdGcvDZeyEhtuPBqf\n```\n\nThe mock email handler is used when payload is started with neither `transport` or `transportOptions` to know how to deliver email.\n\n<Banner type=\"warning\">\n  The randomly generated email account username and password will be different each time the Payload\n  server starts.\n</Banner>\n\n### Using multiple mail providers\n\nPayload supports the use of a single transporter of email, but there is nothing stopping you from having more. Consider a use case where sending bulk email is handled differently than transactional email and could be done using a [hook](../hooks/overview).\n",
            "desc": "Payload uses NodeMailer to allow you to send emails smoothly from your app. Set up email functions such as password resets, order confirmations and more.",
            "headings": [
              {
                "id": "introduction",
                "level": 3,
                "text": "Introduction"
              },
              {
                "id": "configuration",
                "level": 3,
                "text": "Configuration"
              },
              {
                "id": "use-smtp",
                "level": 3,
                "text": "Use SMTP"
              },
              {
                "id": "use-an-email-service",
                "level": 3,
                "text": "Use an email service"
              },
              {
                "id": "use-a-custom-nodemailer-transport",
                "level": 3,
                "text": "Use a custom NodeMailer transport"
              },
              {
                "id": "sending-mail",
                "level": 3,
                "text": "Sending Mail"
              },
              {
                "id": "mock-transport",
                "level": 3,
                "text": "Mock transport"
              },
              {
                "id": "using-multiple-mail-providers",
                "level": 3,
                "text": "Using multiple mail providers"
              }
            ],
            "keywords": "email, overview, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Email Functionality"
          }
        ]
      },
      null,
      {
        "slug": "TypeScript",
        "docs": [
          {
            "slug": "overview",
            "content": "\nPayload supports TypeScript natively, and not only that, the entirety of the CMS is built with TypeScript. To get started developing with Payload and TypeScript, you can use one of Payload's built-in boilerplates in one line via `create-payload-app`:\n\n```\nnpx create-payload-app@latest\n```\n\nPick a TypeScript project type to get started easily.\n\n#### Setting up from Scratch\n\nIt's also possible to set up a TypeScript project from scratch. We plan to write up a guide for exactly how—so keep an eye out for that, too.\n\n## Using Payload's Exported Types\n\nPayload exports a number of types that you may find useful while writing your own plugins, hooks, access control functions, custom views, GraphQL queries / mutations, or anything else.\n\n##### Config Types\n\n- [Base config](../configuration/overview#typescript)\n- [Collections](../configuration/collections#typescript)\n- [Globals](../configuration/globals#typescript)\n- [Fields](../fields/overview#typescript)\n\n##### Hook Types\n\n- [Collection hooks](../hooks/collections#typescript)\n- [Global hooks](../hooks/globals#typescript)\n- [Field hooks](../hooks/fields#typescript)\n",
            "desc": "Payload is the most powerful TypeScript headless CMS available.",
            "headings": [
              {
                "id": "using-payloads-exported-types",
                "level": 2,
                "text": "Using Payload's Exported Types"
              }
            ],
            "keywords": "headless cms, typescript, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "TypeScript - Overview"
          },
          {
            "slug": "generating-types",
            "content": "\nWhile building your own custom functionality into Payload, like plugins, hooks, access control functions, custom views, GraphQL queries / mutations, or anything else, you may benefit from generating your own TypeScript types dynamically from your Payload config itself.\n\n### Types generation script\n\nRun the following command in a Payload project to generate types based on your Payload config:\n\n```\npayload generate:types\n```\n\nYou can run this command whenever you need to regenerate your types, and then you can use these types in your Payload code directly.\n\n### Disable declare statement\n\nBy default, `generate:types` will add a `declare` statement to your types file, which automatically enables type inference within Payload.\n\nIf you are using your `payload-types.ts` file in other repos, though, it might be better to disable this `declare` statement, so that you don't get any TS errors in projects that use your Payload types, but do not have Payload installed.\n\n```ts\n// payload.config.ts\n{\n  // ...\n  typescript: {\n    declare: false, // defaults to true if not set\n  },\n}\n```\n\nIf you do disable the `declare` pattern, you'll need to manually add a `declare` statement to your code in order for Payload types to be recognized. Here's an example showing how to declare your types in your `payload.config.ts` file:\n\n```ts\nimport { Config } from './payload-types'\n\ndeclare module 'payload' {\n  export interface GeneratedTypes extends Config {}\n}\n```\n\n### Custom output file path\n\nYou can specify where you want your types to be generated by adding a property to your Payload config:\n\n```ts\n// payload.config.ts\n{\n  // ...\n\ttypescript: {\n    // defaults to: path.resolve(__dirname, './payload-types.ts')\n\t\toutputFile: path.resolve(__dirname, './generated-types.ts'),\n\t},\n}\n```\n\nThe above example places your types next to your Payload config itself as the file `generated-types.ts`.\n\n### Example Usage\n\nFor example, let's look at the following simple Payload config:\n\n```ts\nconst config: Config = {\n  serverURL: process.env.PAYLOAD_PUBLIC_SERVER_URL,\n  admin: {\n    user: 'users',\n  }\n  collections: [\n    {\n      slug: 'users',\n      fields: [\n        {\n          name: 'name',\n          type: 'text',\n          required: true,\n        }\n      ]\n    },\n    {\n      slug: 'posts',\n      admin: {\n        useAsTitle: 'title',\n      },\n      fields: [\n        {\n          name: 'title',\n          type: 'text',\n        },\n        {\n          name: 'author',\n          type: 'relationship',\n          relationTo: 'users',\n        },\n      ]\n    }\n  ]\n}\n```\n\nBy generating types, we'll end up with a file containing the following two TypeScript interfaces:\n\n```ts\nexport interface User {\n  id: string\n  name: string\n  email?: string\n  resetPasswordToken?: string\n  resetPasswordExpiration?: string\n  loginAttempts?: number\n  lockUntil?: string\n}\n\nexport interface Post {\n  id: string\n  title?: string\n  author?: string | User\n}\n```\n\n### Custom Field Interfaces\n\nFor `array`, `block`, `group` and named `tab` fields, you can generate top level reusable interfaces. The following group field config:\n\n```ts\n{\n  type: 'group',\n  name: 'meta',\n  interfaceName: 'SharedMeta', <-- here!!\n  fields: [\n    {\n      name: 'title',\n      type: 'text',\n    },\n    {\n      name: 'description',\n      type: 'text',\n    },\n  ],\n}\n```\n\nwill generate:\n\n```ts\n// a top level reusable interface!!\nexport interface SharedMeta {\n  title?: string\n  description?: string\n}\n\n// example usage inside collection interface\nexport interface Collection1 {\n  // ...other fields\n  meta?: SharedMeta\n}\n```\n\n<Banner type=\"warning\">\n  <strong>Naming Collisions</strong>\n  <br />\n  Since these types are hoisted to the top level, you need to be aware that naming collisions can\n  occur. For example, if you have a collection with the name of `Meta` and you also create a\n  interface with the name `Meta` they will collide. It is recommended to scope your interfaces by\n  appending the field type to the end, i.e. `MetaGroup` or similar.\n</Banner>\n\n### Using your types\n\nNow that your types have been generated, payloads local API will now be typed. It is common for users to want to use this in their frontend code, we recommend generating them with payload and then copying the file over to your frontend codebase. This is the simplest way to get your types into your frontend codebase.\n\n#### Adding an NPM script\n\n<Banner type=\"warning\">\n  <strong>Important</strong>\n  <br />\n  Payload needs to be able to find your config to generate your types.\n</Banner>\n\nPayload will automatically try and locate your config, but might not always be able to find it. For example, if you are working in a `/src` directory or similar, you need to tell Payload where to find your config manually by using an environment variable. If this applies to you, you can create an NPM script to make generating your types easier.\n\nTo add an NPM script to generate your types and show Payload where to find your config, open your `package.json` and update the `scripts` property to the following:\n\n```\n{\n  \"scripts\": {\n    \"generate:types\": \"PAYLOAD_CONFIG_PATH=src/payload.config.ts payload generate:types\",\n  },\n}\n```\n\nNow you can run `yarn generate:types` to easily generate your types.\n",
            "desc": "Generate your own TypeScript interfaces based on your collections and globals.",
            "headings": [
              {
                "id": "types-generation-script",
                "level": 3,
                "text": "Types generation script"
              },
              {
                "id": "disable-declare-statement",
                "level": 3,
                "text": "Disable declare statement"
              },
              {
                "id": "custom-output-file-path",
                "level": 3,
                "text": "Custom output file path"
              },
              {
                "id": "example-usage",
                "level": 3,
                "text": "Example Usage"
              },
              {
                "id": "custom-field-interfaces",
                "level": 3,
                "text": "Custom Field Interfaces"
              },
              {
                "id": "using-your-types",
                "level": 3,
                "text": "Using your types"
              }
            ],
            "keywords": "headless cms, typescript, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Generating Types",
            "order": 20,
            "title": "Generating TypeScript Interfaces"
          }
        ]
      }
    ]
  },
  {
    "groupLabel": "",
    "topics": [
      {
        "slug": "Plugins",
        "docs": [
          {
            "slug": "overview",
            "content": "\nPayload comes with a built-in Plugins infrastructure that allows developers to build their own modular and easily reusable sets of functionality.\n\n<Banner type=\"success\">\n  Because we rely on a simple config-based structure, Payload plugins simply take in a user's\n  existing config and return a modified config with new fields, hooks, collections, admin views, or\n  anything else you can think of.\n</Banner>\n\nWriting plugins is no more complex than writing regular JavaScript. If you know how [spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) works and are up to speed with Payload concepts, writing a plugin will be a breeze.\n\n**Example use cases:**\n\n- Automatically sync data from a specific collection to HubSpot or a similar CRM when data is added or changes\n- Add password-protection functionality to certain documents\n- Add a full e-commerce backend to any Payload app\n- Add custom reporting views to Payload's admin panel\n- Encrypt specific collections' data\n- Add a full form builder implementation\n- Integrate all `upload`-enabled collections with a third-party file host like S3 or Cloudinary\n- Add custom endpoints or GraphQL queries / mutations with any type of custom functionality that you can think of\n\n### How to install plugins\n\nThe base Payload config allows for a `plugins` property which takes an `array` of [`Plugins`](https://github.com/payloadcms/payload/blob/main/packages/payload/src/config/types.ts).\n\n```js\nimport { buildConfig } from 'payload/config'\n// note: these plugins are not real (yet?)\nimport addLastModified from 'payload-add-last-modified'\nimport passwordProtect from 'payload-password-protect'\nimport { mongooseAdapter } from '@payloadcms/db-mongodb'\nimport { postgresAdapter } from '@payloadcms/db-postgres'\n\nimport { viteBundler } from '@payloadcms/bundler-vite'\nimport { webpackBundler } from '@payloadcms/bundler-webpack'\n\n\nconst config = buildConfig({\n  bundler: webpackBundler() // or viteBundler(),\n  collections: [\n    {\n      slug: 'pages',\n      fields: [\n        {\n          name: 'title',\n          type: 'text',\n          required: true,\n        },\n        {\n          name: 'content',\n          type: 'richText',\n          required: true,\n        },\n      ],\n    },\n  ],\n  db: mongooseAdapter({}) // or postgresAdapter({})\n  plugins: [\n    // Many plugins require options to be passed.\n    // In the following example, we call the function\n    // and pass it options accordingly\n    passwordProtect(['pages']),\n\n    // This plugin takes no options and just\n    // needs to be passed directly\n    addLastModified,\n\n    // ..\n    // To understand how to use the plugins you're interested in,\n    // consult their corresponding documentation\n  ],\n})\n\nexport default config\n```\n\n#### When Plugins are initialized\n\nPayload Plugins are executed _after_ the incoming config is validated, but before it is sanitized and had default options merged in.\n\nAfter all plugins are executed, the full config with all plugins will be sanitized.\n\n## Simple example\n\nHere is an example for how to automatically add a `lastModifiedBy` field to all Payload collections using a Plugin written in TypeScript.\n\n```ts\nimport { Config, Plugin } from 'payload/config'\n\nconst addLastModified: Plugin = (incomingConfig: Config): Config => {\n  // Find all incoming auth-enabled collections\n  // so we can create a lastModifiedBy relationship field\n  // to all auth collections\n  const authEnabledCollections = incomingConfig.collections.filter((collection) =>\n    Boolean(collection.auth),\n  )\n\n  // Spread the existing config\n  const config: Config = {\n    ...incomingConfig,\n    collections: incomingConfig.collections.map((collection) => {\n      // Spread each item that we are modifying,\n      // and add our new field - complete with\n      // hooks and proper admin UI config\n      return {\n        ...collection,\n        fields: [\n          ...collection.fields,\n          {\n            name: 'lastModifiedBy',\n            type: 'relationship',\n            relationTo: authEnabledCollections.map(({ slug }) => slug),\n            hooks: {\n              beforeChange: [\n                ({ req }) => ({\n                  value: req?.user?.id,\n                  relationTo: req?.user?.collection,\n                }),\n              ],\n            },\n            admin: {\n              position: 'sidebar',\n              readOnly: true,\n            },\n          },\n        ],\n      }\n    }),\n  }\n\n  return config\n}\n\nexport default addLastModified\n```\n\n### Available Plugins\n\nPayload supports both official plugins, maintained by the Payload team, and community plugins, developed by external contributors.\n\nYou can discover existing plugins by browsing the `payload-plugin` topic on [GitHub](https://github.com/topics/payload-plugin). These plugins offer a wide range of functionality. Some are maintained by the Payload team, while others are community-built. While we encourage users to explore them, please note that only official plugins are maintained and supported by the Payload team. For community plugins, support may vary as they are developed and maintained independently.\n\nFor maintainers building plugins for others to use, please add the topic to help others find it. If you would like one to be built by the core Payload team, [open a Feature Request](https://github.com/payloadcms/payload/discussions) in our GitHub Discussions board. We would be happy to review your code and maybe feature you and your plugin where appropriate.\n\nFor a list of official plugins, check the [Payload monorepo](https://github.com/payloadcms/payload/tree/main/packages).\n",
            "desc": "Plugins provide a great way to modularize Payload functionalities into easy-to-use enhancements and extensions of your Payload apps.",
            "headings": [
              {
                "id": "how-to-install-plugins",
                "level": 3,
                "text": "How to install plugins"
              },
              {
                "id": "simple-example",
                "level": 2,
                "text": "Simple example"
              },
              {
                "id": "available-plugins",
                "level": 3,
                "text": "Available Plugins"
              }
            ],
            "keywords": "plugins, config, configuration, extensions, custom, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Overview",
            "order": 10,
            "title": "Plugins"
          },
          {
            "slug": "form-builder",
            "content": "\n[![NPM](https://img.shields.io/npm/v/@payloadcms/plugin-form-builder)](https://www.npmjs.com/package/@payloadcms/plugin-form-builder)\n\nThis plugin allows you to build and manage custom forms directly within the admin panel. Instead of hard-coding a new form into your website or application every time you need one, admins can simply define the schema for each form they need on-the-fly, and your front-end can map over this schema, render its own UI components, and match your brand's design system.\n\nAll form submissions are stored directly in your database and are managed directly from the admin panel. When forms are submitted, you can display a custom on-screen confirmation message to the user or redirect them to a dedicated confirmation page. You can even send dynamic, personalized emails derived from the form's data. For example, you may want to send a confirmation email to the user who submitted the form, and also send a notification email to your team.\n\nForms can be as simple or complex as you need, from a basic contact form, to a multi-step lead generation engine, or even a donation form that processes payment. You may not need to reach for third-party services like HubSpot or Mailchimp for this, but instead use your own first-party tooling, built directly into your own application.\n\n<Banner type=\"info\">\n  This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-form-builder). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20form-builder&template=bug_report.md&title=plugin-form-builder%3A) with as much detail as possible.\n</Banner>\n\n##### Core Features\n\n- Build completely dynamic forms directly from the admin panel for a variety of use cases\n- Render forms on your front-end using your own UI components and match your brand's design system\n- Send dynamic, personalized emails upon form submission to multiple recipients, derived from the form's data\n- Display a custom confirmation message or automatically redirect upon form submission\n- Build dynamic prices based on form input to use for payment processing (optional)\n\n## Installation\n\nInstall the plugin using any JavaScript package manager like [Yarn](https://yarnpkg.com), [NPM](https://npmjs.com), or [PNPM](https://pnpm.io):\n\n```bash\nyarn add @payloadcms/plugin-form-builder\n```\n\n## Basic Usage\n\nIn the `plugins` array of your [Payload config](../configuration/overview), call the plugin with [options](#options):\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport formBuilder from '@payloadcms/plugin-form-builder'\n\nconst config = buildConfig({\n  collections: [\n    {\n      slug: 'pages',\n      fields: [],\n    },\n  ],\n  plugins: [\n    formBuilder({\n      // see below for a list of available options\n    })\n  ],\n})\n\nexport default config\n```\n\n### Options\n\n#### `fields` (option)\n\nThe `fields` property is an object of field types to allow your admin editors to build forms with. To override default settings, pass either a boolean value or a partial [Payload Block](../fields/blocks#block-configs) _keyed to the block's slug_. See [Fields](#fields) for more details.\n\n```ts\n// payload.config.ts\nformBuilder({\n  // ...\n  fields: {\n    text: true,\n    textarea: true,\n    select: true,\n    email: true,\n    state: true,\n    country: true,\n    checkbox: true,\n    number: true,\n    message: true,\n    payment: false\n  }\n})\n```\n\n#### `redirectRelationships`\n\nThe `redirectRelationships` property is an array of collection slugs that, when enabled, are populated as options in the form's `redirect` field. This field is used to redirect the user to a dedicated confirmation page upon form submission (optional).\n\n```ts\n// payload.config.ts\nformBuilder({\n  // ...\n  redirectRelationships: ['pages']\n})\n```\n\n#### `beforeEmail`\n\nThe `beforeEmail` property is a [beforeChange](../hooks/globals#beforechange) hook that is called just after emails are prepared, but before they are sent. This is a great place to inject your own HTML template to add custom styles.\n\n```ts\n// payload.config.ts\nformBuilder({\n  // ...\n  beforeEmail: (emailsToSend) => {\n    // modify the emails in any way before they are sent\n    return emails.map((email) => ({\n      ...email,\n      html: email.html, // transform the html in any way you'd like (maybe wrap it in an html template?)\n    }))\n  }\n})\n```\n\n#### `formOverrides`\n\nOverride anything on the `forms` collection by sending a [Payload Collection Config](../configuration/collections) to the `formOverrides` property.\n\n```ts\n// payload.config.ts\nformBuilder({\n  // ...\n  formOverrides: {\n    slug: \"contact-forms\",\n    access: {\n      read: () => true,\n      update: () => false,\n    },\n    fields: [\n      {\n        name: \"custom-field\",\n        type: \"text\"\n      }\n    ]\n  }\n})\n```\n\n#### `formSubmissionOverrides`\n\nOverride anything on the `form-submissions` collection by sending a [Payload Collection Config](../configuration/collections) to the `formSubmissionOverrides` property.\n\n<Banner type=\"warning\">\n  By default, this plugin relies on [Payload access control](../access-control/collections) to restrict the `update` and `read` operations on the `form-submissions` collection. This is because _anyone_ should be able to create a form submission, even from a public-facing website, but _no one_ should be able to update a submission one it has been created, or read a submission unless they have permission. You can override this behavior or any other property as needed.\n</Banner>\n\n```ts\n// payload.config.ts\nformBuilder({\n  // ...\n  formSubmissionOverrides: {\n    slug: \"leads\",\n  }\n})\n```\n\n#### `handlePayment`\n\nThe `handlePayment` property is a [beforeChange](<[beforeChange](../hooks/globals#beforechange)>) hook that is called upon form submission. You can integrate into any third-party payment processing API here to accept payment based on form input. You can use the `getPaymentTotal` function to calculate the total cost after all conditions have been applied. This is only applicable if the form has enabled the `payment` field.\n\nFirst import the utility function. This will execute all of the price conditions that you have set in your form's `payment` field and returns the total price.\n\n```ts\n// payload.config.ts\nimport { getPaymentTotal } from '@payloadcms/plugin-form-builder';\n```\n\nThen in your plugin's config:\n\n```ts\n// payload.config.ts\nformBuilder({\n  // ...\n  handlePayment: async ({ form, submissionData }) => {\n    // first calculate the price\n    const paymentField =  form.fields?.find((field) => field.blockType === 'payment');\n    const price = getPaymentTotal({\n      basePrice: paymentField.basePrice,\n      priceConditions: paymentField.priceConditions,\n      fieldValues: submissionData,\n    });\n    // then asynchronously process the payment here\n  }\n})\n```\n\n## Fields\n\nEach field represents a form input. To override default settings pass either a boolean value or a partial [Payload Block](../fields/blocks) _keyed to the block's slug_. See [Field Overrides](#field-overrides) for more details on how to do this.\n\n<Banner type=\"info\">\n  <strong>Note:</strong>\n  \"Fields\" here is in reference to the _fields to build forms with_, not to be confused with the _fields of a collection_ which are set via `formOverrides.fields`.\n</Banner>\n\n#### Text\n\nMaps to a `text` input in your front-end. Used to collect a simple string.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `name` | string | The name of the field. |\n| `label` | string | The label of the field. |\n| `defaultValue` | string | The default value of the field. |\n| `width` | string | The width of the field on the front-end. |\n| `required` | checkbox | Whether or not the field is required when submitted. |\n\n#### Textarea\n\nMaps to a `textarea` input on your front-end. Used to collect a multi-line string.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `name` | string | The name of the field. |\n| `label` | string | The label of the field. |\n| `defaultValue` | string | The default value of the field. |\n| `width` | string | The width of the field on the front-end. |\n| `required` | checkbox | Whether or not the field is required when submitted. |\n\n#### Select\n\nMaps to a `select` input on your front-end. Used to display a list of options.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `name` | string | The name of the field. |\n| `label` | string | The label of the field. |\n| `defaultValue` | string | The default value of the field. |\n| `width` | string | The width of the field on the front-end. |\n| `required` | checkbox | Whether or not the field is required when submitted. |\n| `options` | array | An array of objects with `label` and `value` properties. |\n\n#### Email (field)\n\nMaps to a `text` input with type `email` on your front-end. Used to collect an email address.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `name` | string | The name of the field. |\n| `label` | string | The label of the field. |\n| `defaultValue` | string | The default value of the field. |\n| `width` | string | The width of the field on the front-end. |\n| `required` | checkbox | Whether or not the field is required when submitted. |\n\n#### State\n\nMaps to a `select` input on your front-end. Used to collect a US state.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `name` | string | The name of the field. |\n| `label` | string | The label of the field. |\n| `defaultValue` | string | The default value of the field. |\n| `width` | string | The width of the field on the front-end. |\n| `required` | checkbox | Whether or not the field is required when submitted. |\n\n#### Country\n\nMaps to a `select` input on your front-end. Used to collect a country.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `name` | string | The name of the field. |\n| `label` | string | The label of the field. |\n| `defaultValue` | string | The default value of the field. |\n| `width` | string | The width of the field on the front-end. |\n| `required` | checkbox | Whether or not the field is required when submitted. |\n\n#### Checkbox\n\nMaps to a `checkbox` input on your front-end. Used to collect a boolean value.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `name` | string | The name of the field. |\n| `label` | string | The label of the field. |\n| `defaultValue` | checkbox | The default value of the field. |\n| `width` | string | The width of the field on the front-end. |\n| `required` | checkbox | Whether or not the field is required when submitted. |\n\n#### Number\n\nMaps to a `number` input on your front-end. Used to collect a number.\n\n| Property | Type | Description |\n| --- | --- | --- |\n| `name` | string | The name of the field. |\n| `label` | string | The label of the field. |\n| `defaultValue` | string | The default value of the field. |\n| `width` | string | The width of the field on the front-end. |\n| `required` | checkbox | Whether or not the field is required when submitted. || `defaultValue` | number | The default value of the field. |\n\n#### Message\n\nMaps to a `RichText` component on your front-end. Used to display an arbitrary message to the user anywhere in the form.\n\n| property | type | description |\n| --- | --- | --- |\n| `message` | richText | The message to display on the form. |\n\n#### Payment\n\nAdd this field to your form if it should collect payment. Upon submission, the `handlePayment` callback is executed with the form and submission data. You can use this to integrate with any third-party payment processing API.\n\n| property | type | description |\n| --- | --- | --- |\n| `name` | string | The name of the field. |\n| `label` | string | The label of the field. |\n| `defaultValue` | number | The default value of the field. |\n| `width` | string | The width of the field on the front-end. |\n| `required` | checkbox | Whether or not the field is required when submitted. |\n| `priceConditions` | array | An array of objects that define the price conditions. See below for more details. |\n\n##### Price Conditions\n\nEach of the `priceConditions` are executed by the `getPaymentTotal` utility that this plugin provides. You can call this function in your `handlePayment` callback to dynamically calculate the total price of a form upon submission based on the user's input. For example, you could create a price condition that says \"if the user selects 'yes' for this checkbox, add $10 to the total price\".\n\n| property | type | description |\n| --- | --- | --- |\n| `fieldToUse` | relationship | The field to use to determine the price. |\n| `condition` | string | The condition to use to determine the price. |\n| `valueForOperator` | string | The value to use for the operator. |\n| `operator` | string | The operator to use to determine the price. |\n| `valueType` | string | The type of value to use to determine the price. |\n| `value` | string | The value to use to determine the price. |\n\n#### Field Overrides\n\nYou can provide your own custom fields by passing a new [Payload Block](../fields/blocks#block-configs) object into `fields`. You can override or extend any existing fields by first importing the `fields` from the plugin:\n\n```ts\nimport { fields } from '@payloadcms/plugin-form-builder'\n```\n\nThen merging it into your own custom field:\n\n```ts\n// payload.config.ts\nformBuilder({\n  // ...\n  fields: {\n    text: {\n      ...fields.text,\n      labels: {\n        singular: \"Custom Text Field\",\n        plural: \"Custom Text Fields\",\n      }\n    }\n  }\n})\n```\n\n## Email\n\nThis plugin relies on the [email configuration](../email/overview) defined in your `payload.init()`. It will read from your config and attempt to send your emails using the credentials provided.\n\n## TypeScript\n\nAll types can be directly imported:\n\n```js\nimport {\n  PluginConfig,\n  Form,\n  FormSubmission,\n  FieldsConfig,\n  BeforePayment,\n  BeforeEmail,\n  HandlePayment,\n  ...\n} from \"@payloadcms/plugin-form-builder/types\";\n```\n\n## Examples\n\nThe [Examples Directory](https://github.com/payloadcms/payload/tree/main/examples) contains an official [Form Builder Plugin Example](https://github.com/payloadcms/payload/tree/main/examples/form-builder) which demonstrates exactly how to configure this plugin in Payload and implement it on your front-end. We've also included an in-depth walk-through of how to build a form from scratch in our [Form Builder Plugin Blog Post](https://payloadcms.com/blog/create-custom-forms-with-the-official-form-builder-plugin).\n\n## Troubleshooting\n\nBelow are some common troubleshooting tips. To help other developers, please contribute to this section as you troubleshoot your own application.\n\n##### SendGrid 403 Forbidden Error\n\n- If you are using [SendGrid Link Branding](https://docs.sendgrid.com/ui/account-and-settings/how-to-set-up-link-branding) to remove the \"via sendgrid.net\" part of your email, you must also setup [Domain Authentication](https://docs.sendgrid.com/ui/account-and-settings/how-to-set-up-domain-authentication). This means you can only send emails from an address on this domain — so the `from` addresses in your form submission emails **_cannot_** be anything other than `something@your_domain.com`. This means that from `{{email}}` will not work, but `website@your_domain.com` will. You can still send the form's email address in the body of the email.\n\n## Screenshots\n\n![screenshot 1](https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-1.jpg?raw=true)\n<br />\n![screenshot 2](https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-2.jpg?raw=true)\n<br />\n![screenshot 3](https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-3.jpg?raw=true)\n<br />\n![screenshot 4](https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-4.jpg?raw=true)\n<br />\n![screenshot 5](https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-5.jpg?raw=true)\n<br />\n![screenshot 6](https://github.com/payloadcms/plugin-form-builder/blob/main/images/screenshot-6.jpg?raw=true)\n",
            "desc": "Easily build and manage forms from the admin panel. Send dynamic, personalized emails and even accept and process payments.",
            "headings": [
              {
                "id": "installation",
                "level": 2,
                "text": "Installation"
              },
              {
                "id": "basic-usage",
                "level": 2,
                "text": "Basic Usage"
              },
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "fields",
                "level": 2,
                "text": "Fields"
              },
              {
                "id": "email",
                "level": 2,
                "text": "Email"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              },
              {
                "id": "examples",
                "level": 2,
                "text": "Examples"
              },
              {
                "id": "troubleshooting",
                "level": 2,
                "text": "Troubleshooting"
              },
              {
                "id": "screenshots",
                "level": 2,
                "text": "Screenshots"
              }
            ],
            "keywords": "plugins, plugin, form, forms, form builder",
            "label": "Form Builder",
            "order": 20,
            "title": "Form Builder Plugin"
          },
          {
            "slug": "nested-docs",
            "content": "\n[![NPM](https://img.shields.io/npm/v/@payloadcms/plugin-nested-docs)](https://www.npmjs.com/package/@payloadcms/plugin-nested-docs)\n\nThis plugin allows you to easily nest the documents of your application inside of one another. It does so by adding a\nnew `parent` field onto each of your documents that, when selected, attaches itself to the parent's tree. When you edit\nthe great-great-grandparent of a document, for instance, all of its descendants are recursively updated. This is an\nextremely powerful way of achieving hierarchy within a collection, such as parent/child relationship between pages.\n\nDocuments also receive a new `breadcrumbs` field. Once a parent is assigned, these breadcrumbs are populated based on\neach ancestor up the tree. Breadcrumbs allow you to dynamically generate labels and URLs based on the document's\nposition in the hierarchy. Even if the slug of a parent document changes, or the entire tree is nested another level\ndeep, changes will cascade down the entire tree and all breadcrumbs will reflect those changes.\n\nWith this pattern you can perform whatever side-effects your applications needs on even the most deeply nested\ndocuments. For example, you could easily add a custom `fullTitle` field onto each document and inject the parent's title\nonto it, such as \"Parent Title > Child Title\". This would allow you to then perform searches and filters based on _that_\nfield instead of the original title. This is especially useful if you happen to have two documents with identical titles\nbut different parents.\n\n<Banner type=\"info\">\n  This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-nested-docs). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20nested-docs&template=bug_report.md&title=plugin-nested-docs%3A) with as much detail as possible.\n</Banner>\n\n##### Core features\n\n- Automatically adds a `parent` relationship field to each document\n- Allows for parent/child relationships between documents within the same collection\n- Recursively updates all descendants when a parent is changed\n- Automatically populates a `breadcrumbs` field with all ancestors up the tree\n- Dynamically generate labels and URLs for each breadcrumb\n- Supports localization\n\n## Installation\n\nInstall the plugin using any JavaScript package manager like [Yarn](https://yarnpkg.com), [NPM](https://npmjs.com),\nor [PNPM](https://pnpm.io):\n\n```bash\n  yarn add @payloadcms/plugin-nested-docs\n```\n\n## Basic Usage\n\nIn the `plugins` array of your [Payload config](../configuration/overview), call the plugin\nwith [options](#options):\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport nestedDocs from '@payloadcms/plugin-nested-docs'\n\nconst config = buildConfig({\n  collections: [\n    {\n      slug: 'pages',\n      fields: [\n        {\n          name: 'title',\n          type: 'text',\n        },\n        {\n          name: 'slug',\n          type: 'text',\n        },\n      ],\n    },\n  ],\n  plugins: [\n    nestedDocs({\n      collections: ['pages'],\n      generateLabel: (_, doc) => doc.title,\n      generateURL: (docs) => docs.reduce((url, doc) => `${url}/${doc.slug}`, ''),\n    }),\n  ],\n})\n\nexport default config\n```\n\n### Fields\n\n#### Parent\n\nThe `parent` relationship field is automatically added to every document which allows editors to choose another document\nfrom the same collection to act as the direct parent.\n\n#### Breadcrumbs\n\nThe `breadcrumbs` field is an array which dynamically populates all parent relationships of a document up to the top\nlevel and stores the following fields.\n\n| Field   | Description                                                                                                                                                                                                                                                                                  |\n|---------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `label` | The label of the breadcrumb. This field is automatically set to either the `collection.admin.useAsTitle` (if defined) or is set to the `ID` of the document. You can also dynamically define the `label` by passing a function to the options property of [`generateLabel`](#generateLabel). |\n| `url`   | The URL of the breadcrumb. By default, this field is undefined. You can manually define this field by passing a property called function to the plugin options property of [`generateURL`](#generateURL).                                                                                    |\n\n### Options\n\n#### `collections`\n\nAn array of collections slugs to enable nested docs.\n\n#### `generateLabel`\n\nEach `breadcrumb` has a required `label` field. By default, its value will be set to the collection's `admin.useAsTitle`\nor fallback the the `ID` of the document.\n\nYou can also pass a function to dynamically set the `label` of your breadcrumb.\n\n```ts\n// payload.config.ts\nnestedDocs({\n  //...\n  generateLabel: (_, doc) => doc.title // NOTE: 'title' is a hypothetical field\n})\n```\n\nThe function takes two arguments and returns a string:\n\n| Argument | Type     | Description                                  |\n|----------|----------|----------------------------------------------|\n| `docs`   | `Array`  | An array of the breadcrumbs up to that point |\n| `doc`    | `Object` | The current document being edited            |\n\n#### `generateURL`\n\nA function that allows you to dynamically generate each breadcrumb `url`. Each `breadcrumb` has an optional `url` field\nwhich is undefined by default. For example, you might want to format a full URL to contain all breadcrumbs up to\nthat point, like `/about-us/company/our-team`.\n\n```ts\n// payload.config.ts\nnestedDocs({\n  //...\n  generateURL: (docs) => docs.reduce((url, doc) => `${url}/${doc.slug}`, ''), // NOTE: 'slug' is a hypothetical field\n})\n```\n\n| Argument | Type     | Description                                  |\n|----------|----------|----------------------------------------------|\n| `docs`   | `Array`  | An array of the breadcrumbs up to that point |\n| `doc`    | `Object` | The current document being edited            |\n\n#### `parentFieldSlug`\n\nWhen defined, the `parent` field will not be provided for you automatically, and instead, expects you to add your\nown `parent` field to each collection manually. This gives you complete control over where you put the field in your\nadmin dashboard, etc. Set this property to the `name` of your custom field.\n\n#### `breadcrumbsFieldSlug`\n\nWhen defined, the `breadcrumbs` field will not be provided for you, and instead, expects you to add your\nown `breadcrumbs` field to each collection manually. Set this property to the `name` of your custom field.\n\n<Banner type=\"info\">\n  <strong>Note:</strong>\n  <br />\n  If you opt out of automatically being provided a `parent` or `breadcrumbs` field, you need to make sure that both fields are placed at the top-level of your document. They cannot exist within any nested data structures like a `group`, `array`, or `blocks`.\n</Banner>\n\n## Overrides\n\nYou can also extend the built-in `parent` and `breadcrumbs` fields per collection by using the `createParentField`\nand `createBreadcrumbField` methods. They will merge your customizations overtop the plugin's base field configurations.\n\n```ts\nimport { CollectionConfig } from \"payload/types\";\nimport { createParentField } from \"@payloadcms/plugin-nested-docs/fields\";\nimport { createBreadcrumbsField } from \"@payloadcms/plugin-nested-docs/fields\";\n\nconst examplePageConfig: CollectionConfig = {\n  slug: \"pages\",\n  fields: [\n    createParentField(\n      // First argument is equal to the slug of the collection\n      // that the field references\n      \"pages\",\n\n      // Second argument is equal to field overrides that you specify,\n      // which will be merged into the base parent field config\n      {\n        admin: {\n          position: \"sidebar\",\n        },\n        // Note: if you override the `filterOptions` of the `parent` field,\n        // be sure to continue to prevent the document from referencing itself as the parent like this:\n        // filterOptions: ({ id }) => ({ id: {not_equals: id }})`\n      }\n    ),\n    createBreadcrumbsField(\n      // First argument is equal to the slug of the collection\n      // that the field references\n      \"pages\",\n\n      // Argument equal to field overrides that you specify,\n      // which will be merged into the base `breadcrumbs` field config\n      {\n        label: \"Page Breadcrumbs\",\n      }\n    ),\n  ],\n};\n```\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  If overriding the `name` of either `breadcrumbs` or `parent` fields, you must specify the `breadcrumbsFieldSlug` or `parentFieldSlug` respectively.\n</Banner>\n\n## Localization\n\nThis plugin supports localization by default. If the `localization` property is set in your Payload config,\nthe `breadcrumbs` field is automatically localized. For more details on how localization works in Payload, see\nthe [Localization](../configuration/localization) docs.\n\n## TypeScript\n\nAll types can be directly imported:\n\n```ts\nimport { PluginConfig, GenerateURL, GenerateLabel } from '@payloadcms/plugin-nested-docs/types'\n```\n\n## Examples\n\nThe [Examples Directory](https://github.com/payloadcms/payload/tree/main/examples) contains an\nofficial [Nested Docs Plugin Example](https://github.com/payloadcms/payload/tree/main/examples/nested-docs) which\ndemonstrates exactly how to configure this plugin in Payload and implement it on your front-end.\nThe [Templates Directory](https://github.com/payloadcms/payload/tree/main/templates) also contains an\nofficial [Website Template](https://github.com/payloadcms/payload/tree/main/templates/website)\nand [E-commerce Template](https://github.com/payloadcms/payload/tree/main/templates/ecommerce), both of which use this\nplugin.\n",
            "desc": "Nested documents in a parent, child, and sibling relationship.",
            "headings": [
              {
                "id": "installation",
                "level": 2,
                "text": "Installation"
              },
              {
                "id": "basic-usage",
                "level": 2,
                "text": "Basic Usage"
              },
              {
                "id": "fields",
                "level": 3,
                "text": "Fields"
              },
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "overrides",
                "level": 2,
                "text": "Overrides"
              },
              {
                "id": "localization",
                "level": 2,
                "text": "Localization"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              },
              {
                "id": "examples",
                "level": 2,
                "text": "Examples"
              }
            ],
            "keywords": "plugins, nested, documents, parent, child, sibling, relationship",
            "label": "Nested Docs",
            "order": 20,
            "title": "Nested Docs Plugin"
          },
          {
            "slug": "redirects",
            "content": "\n[![NPM](https://img.shields.io/npm/v/@payloadcms/plugin-redirects)](https://www.npmjs.com/package/@payloadcms/plugin-redirects)\n\nThis plugin allows you to easily manage redirects for your application from within your admin panel. It does so by adding a `redirects` collection to your config that allows you specify a redirect from one URL to another. Your front-end application can use this data to automatically redirect users to the correct page using proper HTTP status codes. This is useful for SEO, indexing, and search engine ranking when re-platforming or when changing your URL structure.\n\nFor example, if you have a page at `/about` and you want to change it to `/about-us`, you can create a redirect from the old page to the new one, then you can use this data to write HTTP redirects into your front-end application. This will ensure that users are redirected to the correct page without penalty because search engines are notified of the change at the request level. This is a very lightweight plugin that will allow you to integrate managed redirects for any front-end framework.\n\n<Banner type=\"info\">\n  This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-redirects). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%25redirects&template=bug_report.md&title=plugin-redirects%3A) with as much detail as possible.\n</Banner>\n\n##### Core features\n\n- Adds a `redirects` collection to your config that:\n  - includes a `from` and `to` fields\n  - allows `to` to be a document reference\n\n## Installation\n\nInstall the plugin using any JavaScript package manager like [Yarn](https://yarnpkg.com), [NPM](https://npmjs.com), or [PNPM](https://pnpm.io):\n\n```bash\n  yarn add @payloadcms/plugin-redirects\n```\n\n## Basic Usage\n\nIn the `plugins` array of your [Payload config](../configuration/overview), call the plugin with [options](#options):\n\n```ts\nimport { buildConfig } from \"payload/config\";\nimport redirects from \"@payloadcms/plugin-redirects\";\n\nconst config = buildConfig({\n  collections: [\n    {\n      slug: \"pages\",\n      fields: [],\n    },\n  ],\n  plugins: [\n    redirects({\n      collections: [\"pages\"],\n    }),\n  ],\n});\n\nexport default config;\n```\n\n### Options\n\n| Option | Type | Description |\n| --- | --- | --- |\n| `collections` | `string[]` | An array of collection slugs to populate in the `to` field of each redirect. |\n| `overrides` | `object` | A partial collection config that allows you to override anything on the `redirects` collection. |\n\n## TypeScript\n\nAll types can be directly imported:\n\n```ts\nimport { PluginConfig } from \"@payloadcms/plugin-redirects/types\";\n```\n\n## Examples\n\nThe [Examples Directory](https://github.com/payloadcms/payload/tree/main/examples) contains an official [Redirects Plugin Example](https://github.com/payloadcms/payload/tree/main/examples/redirects) which demonstrates exactly how to configure this plugin in Payload and implement it on your front-end. The [Templates Directory](https://github.com/payloadcms/payload/tree/main/templates) also contains an official [Website Template](https://github.com/payloadcms/payload/tree/main/templates/website) and [E-commerce Template](https://github.com/payloadcms/payload/tree/main/templates/ecommere), both of which use this plugin.\n",
            "desc": "Automatically create redirects for your Payload application",
            "headings": [
              {
                "id": "installation",
                "level": 2,
                "text": "Installation"
              },
              {
                "id": "basic-usage",
                "level": 2,
                "text": "Basic Usage"
              },
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              },
              {
                "id": "examples",
                "level": 2,
                "text": "Examples"
              }
            ],
            "keywords": "plugins, redirects, redirect, plugin, payload, cms, seo, indexing, search, search engine",
            "label": "Redirects",
            "order": 20,
            "title": "Redirects Plugin"
          },
          {
            "slug": "search",
            "content": "\n[![NPM](https://img.shields.io/npm/v/@payloadcms/plugin-search)](https://www.npmjs.com/package/@payloadcms/plugin-search)\n\nThis plugin generates records of your documents that are extremely fast to search on. It does so by creating a new `search` collection that is indexed in the database then saving a static copy of each of your documents using only search-critical data. Search records are automatically created, synced, and deleted behind-the-scenes as you manage your application's documents.\n\nFor example, if you have a posts collection that is extremely large and complex, this would allow you to sync just the title, excerpt, and slug of each post so you can query on _that_ instead of the original post directly. Search records are static, so querying them also has the significant advantage of bypassing any hooks that may present be on the original documents. You define exactly what data is synced, and you can even modify or fallback this data before it is saved on a per-document basis.\n\nTo query search results, use all the existing Payload APIs that you are already familiar with. You can also prioritize search results by setting a custom priority for each collection. For example, you may want to list blog posts before pages. Or you may want one specific post to always take appear first. Search records are given a `priority` field that can be used as the `?sort=` parameter in your queries.\n\nThis plugin is a great way to implement a fast, immersive search experience such as a search bar in a front-end application. Many applications may not need the power and complexity of a third-party service like Algolia or ElasticSearch. This plugin provides a first-party alternative that is easy to set up and runs entirely on your own database.\n\n<Banner type=\"info\">\n  This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-search). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20search&template=bug_report.md&title=plugin-search%3A) with as much detail as possible.\n</Banner>\n\n##### Core Features\n\n- Automatically adds an indexed `search` collection to your database\n- Automatically creates, syncs, and deletes search records as you manage your documents\n- Saves only search-critical data that you define (e.g. title, excerpt, etc.)\n- Allows you to query search results using first-party Payload APIs\n- Allows you to query documents without triggering any of their underlying hooks\n- Allows you to easily prioritize search results by collection or document\n\n## Installation\n\nInstall the plugin using any JavaScript package manager like [Yarn](https://yarnpkg.com), [NPM](https://npmjs.com), or [PNPM](https://pnpm.io):\n\n```bash\n  yarn add @payloadcms/plugin-search\n```\n\n## Basic Usage\n\nIn the `plugins` array of your [Payload config](../configuration/overview), call the plugin with [options](#options):\n\n```js\nimport { buildConfig } from 'payload/config'\nimport search from '@payloadcms/plugin-search'\n\nconst config = buildConfig({\n  collections: [\n    {\n      slug: 'pages',\n      fields: [],\n    },\n    {\n      slug: 'posts',\n      fields: [],\n    },\n  ],\n  plugins: [\n    search({\n      collections: ['pages', 'posts'],\n      defaultPriorities: {\n        pages: 10,\n        posts: 20,\n      },\n    }),\n  ],\n})\n\nexport default config\n```\n\n### Options\n\n#### `collections`\n\nThe `collections` property is an array of collection slugs to enable syncing to search. Enabled collections receive a `beforeChange` and `afterDelete` hook that creates, updates, and deletes its respective search record as it changes over time.\n\n#### `defaultPriorities`\n\nThis plugin automatically adds a `priority` field to the `search` collection that can be used as the `?sort=` parameter in your queries. For example, you may want to list blog posts before pages. Or you may want one specific post to always take appear first.\n\nThe `defaultPriorities` property is used to set a fallback `priority` on search records during the `create` operation. It accepts an object with keys that are your collection slugs and values that can either be a number or a function that returns a number. The function receives the `doc` as an argument, which is the document being created.\n\n```ts\n// payload.config.ts\n{\n  // ...\n  searchPlugin({\n    defaultPriorities: {\n      pages: ({ doc }) => (doc.title.startsWith('Hello, world!') ? 1 : 10),\n      posts: 20,\n    },\n  }),\n}\n```\n\n#### `searchOverrides`\n\nThis plugin automatically creates the `search` collection, but you can override anything on this collection via the `searchOverrides` property. It accepts anything from the [Payload Collection Config](../configuration/collections) and merges it in with the default `search` collection config provided by the plugin.\n\n```ts\n// payload.config.ts\n{\n  // ...\n  searchPlugin({\n    searchOverrides: {\n      slug: 'search-results',\n    },\n  }),\n}\n```\n\n#### `beforeSync`\n\nBefore creating or updating a search record, the `beforeSync` function runs. This is an [afterChange](../hooks/globals#afterchange) hook that allows you to modify the data or provide fallbacks before its search record is created or updated.\n\n```ts\n// payload.config.ts\n{\n  // ...\n  searchPlugin({\n    beforeSync: ({ originalDoc, searchDoc }) => ({\n      ...searchDoc,\n      // Modify your docs in any way here, this can be async\n      excerpt: originalDoc?.excerpt || 'This is a fallback excerpt',\n    }),\n  }),\n}\n```\n\n#### `syncDrafts`\n\nWhen `syncDrafts` is true, draft documents will be synced to search. This is false by default. You must have [Payload Drafts](../versions/drafts) enabled for this to apply.\n\n#### `deleteDrafts`\n\nIf true, will delete documents from search whose status changes to draft. This is true by default. You must have [Payload Drafts](../versions/drafts) enabled for this to apply.\n\n## TypeScript\n\nAll types can be directly imported:\n\n```ts\nimport type { SearchConfig, BeforeSync } from '@payloadcms/plugin-search/types'\n```\n",
            "desc": "Generates records of your documents that are extremely fast to search on.",
            "headings": [
              {
                "id": "installation",
                "level": 2,
                "text": "Installation"
              },
              {
                "id": "basic-usage",
                "level": 2,
                "text": "Basic Usage"
              },
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              }
            ],
            "keywords": "plugins, search, search plugin, search engine, search index, search results, search bar, search box, search field, search form, search input",
            "label": "Search",
            "order": 20,
            "title": "Search Plugin"
          },
          {
            "slug": "sentry",
            "content": "\n[![NPM](https://img.shields.io/npm/v/@payloadcms/plugin-sentry)](https://www.npmjs.com/package/@payloadcms/plugin-sentry)\n\nThis plugin allows you to integrate [Sentry](https://sentry.io/) seamlessly with your [Payload](https://github.com/payloadcms/payload) application.\n\n### What is Sentry?\n\nSentry is a powerful error tracking and performance monitoring tool that helps developers identify, diagnose, and resolve issues in their applications.\n\n<Banner type=\"success\">\n  Sentry does smart stuff with error data to make bugs easier to find and fix. - [sentry.io](https://sentry.io/)\n</Banner>\n\nThis multi-faceted software offers a range of features that will help you manage errors with greater ease and ultimately ensure your application is running smoothly:\n\n#### Core Features\n\n- **Error Tracking**: Instantly captures and logs errors as they occur in your application\n- **Performance Monitoring**: Tracks application performance to identify slowdowns and bottlenecks\n- **Detailed Reports**: Provides comprehensive insights into errors, including stack traces and context\n- **Alerts and Notifications**: Send and customize event-triggered notifications\n- **Issue Grouping, Filtering and Search**: Automatically groups similar errors, and allows filtering and searching issues by custom criteria\n- **Breadcrumbs**: Records user actions and events leading up to an error\n- **Integrations**: Connects with various tools and services for enhanced workflow and issue management\n\n<Banner type=\"info\">\n  This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-sentry). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20seo&template=bug_report.md&title=plugin-seo%3A) with as much detail as possible.\n</Banner>\n\n## Installation\n\nInstall the plugin using any JavaScript package manager like [Yarn](https://yarnpkg.com), [NPM](https://npmjs.com), or [PNPM](https://pnpm.io):\n\n```bash\n  yarn add @payloadcms/plugin-sentry\n```\n\n## Basic Usage\n\nIn the `plugins` array of your [Payload config](../configuration/overview), call the plugin and pass in your Sentry DSN as an option.\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport { sentry } from '@payloadcms/plugin-sentry'\nimport { Pages, Media } from './collections'\n\nconst config = buildConfig({\n  collections: [Pages, Media],\n  plugins: [\n    sentry({\n      dsn: 'https://61edebas776889984d323d777@o4505289711681536.ingest.sentry.io/4505357433352176',\n    }),\n  ],\n})\n\nexport default config\n```\n\n## Options\n\n- `dsn` : string | **required**\n\n  Sentry automatically assigns a DSN when you create a project, the unique DSN informs Sentry where to send events so they are associated with the correct project.\n\n<Banner type=\"warning\">\n  You can find your project DSN (Data Source Name) by visiting [sentry.io](sentry.io) and navigating to your [Project] > Settings > Client Keys (DSN).\n</Banner>\n\n- `enabled`: boolean | optional\n\n  Set to false to disable the plugin. Defaults to true.\n\n- `init` : ClientOptions | optional\n\n  Sentry allows a variety of options to be passed into the Sentry.init() function, see the full list of options [here](https://docs.sentry.io/platforms/node/guides/express/configuration/options).\n\n- `requestHandler` : RequestHandlerOptions | optional\n\n  Accepts options that let you decide what data should be included in the event sent to Sentry, checkout the options [here](https://docs.sentry.io/platforms/node/guides/express/configuration/options).\n\n- `captureErrors`: number[] | optional\n\n  By default, `Sentry.errorHandler` will capture only errors with a status code of 500 or higher. To capture additional error codes, pass the values as numbers in an array.\n\nTo see all options available, visit the [Sentry Docs](https://docs.sentry.io/platforms/node/guides/express/configuration/options).\n\n### Example\n\nConfigure any of these options by passing them to the plugin:\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport { sentry } from '@payloadcms/plugin-sentry'\nimport { Pages, Media } from './collections'\n\nconst config = buildConfig({\n  collections: [Pages, Media],\n  plugins: [\n    sentry({\n      dsn: 'https://61edebas777689984d323d777@o4505289711681536.ingest.sentry.io/4505357433352176',\n      options: {\n        init: {\n          debug: true,\n          environment: 'development',\n          tracesSampleRate: 1.0,\n        },\n        requestHandler: {\n          serverName: false,\n          user: ['email'],\n        },\n        captureErrors: [400, 403, 404],\n      },\n    }),\n  ],\n})\n\nexport default config\n```\n\n## TypeScript\n\nAll types can be directly imported:\n\n```ts\nimport { PluginOptions } from '@payloadcms/plugin-sentry/types'\n```\n",
            "desc": "Integrate Sentry error tracking into your Payload application",
            "headings": [
              {
                "id": "what-is-sentry",
                "level": 3,
                "text": "What is Sentry?"
              },
              {
                "id": "installation",
                "level": 2,
                "text": "Installation"
              },
              {
                "id": "basic-usage",
                "level": 2,
                "text": "Basic Usage"
              },
              {
                "id": "options",
                "level": 2,
                "text": "Options"
              },
              {
                "id": "example",
                "level": 3,
                "text": "Example"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              }
            ],
            "keywords": "plugins, sentry, error, tracking, monitoring, logging, bug, reporting, performance",
            "label": "Sentry",
            "order": 20,
            "title": "Sentry Plugin"
          },
          {
            "slug": "seo",
            "content": "\n[![NPM](https://img.shields.io/npm/v/@payloadcms/plugin-seo)](https://www.npmjs.com/package/@payloadcms/plugin-seo)\n\nThis plugin allows you to easily manage SEO metadata for your application from within your admin panel. When enabled on your collections and globals, it adds a new `meta` field group containing `title`, `description`, and `image` by default. Your front-end application can then use this data to render meta tags however your application requires. For example, you would inject a `title` tag into the `<head>` of your page using `meta.title` as its content.\n\nAs users are editing documents within the admin panel, they have the option to \"auto-generate\" these fields. When clicked, this plugin will execute your own custom functions that re-generate the title, description, and image. This way you can build your own SEO writing assistance directly into your application. For example, you could append your site name onto the page title, or use the document's excerpt field as the description, or even integrate with some third-party API to generate the image using AI.\n\nTo help you visualize what your page might look like in a search engine, a preview is rendered on page just beneath the meta fields. This preview is updated in real-time as you edit your metadata. There are also visual indicators to help you write effective meta, such as a character counter for the title and description fields. You can even inject your own custom fields into the `meta` field group as your application requires, like `og:title` or `json-ld`. If you've ever used something like Yoast SEO, this plugin might feel very familiar.\n\n<Banner type=\"info\">\n  This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-seo). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20seo&template=bug_report.md&title=plugin-seo%3A) with as much detail as possible.\n</Banner>\n\n##### Core features\n\n- Adds a `meta` field group to every SEO-enabled collection or global\n- Allows you to define custom functions to auto-generate metadata\n- Displays hints and indicators to help content editor write effective meta\n- Renders a snippet of what a search engine might display\n- Extendable so you can define custom fields like `og:title` or `json-ld`\n- Soon will support dynamic variable injection\n\n## Installation\n\nInstall the plugin using any JavaScript package manager like [Yarn](https://yarnpkg.com), [NPM](https://npmjs.com), or [PNPM](https://pnpm.io):\n\n```bash\n  yarn add @payloadcms/plugin-seo\n```\n\n## Basic Usage\n\nIn the `plugins` array of your [Payload config](../configuration/overview), call the plugin with [options](#options):\n\n```ts\nimport { buildConfig } from 'payload/config';\nimport seoPlugin from '@payloadcms/plugin-seo';\n\nconst config = buildConfig({\n  collections: [\n    {\n      slug: 'pages',\n      fields: []\n    },\n    {\n      slug: 'media',\n      upload: {\n        staticDir: // path to your static directory,\n      },\n      fields: []\n    }\n  ],\n  plugins: [\n    seoPlugin({\n      collections: [\n        'pages',\n      ],\n      uploadsCollection: 'media',\n      generateTitle: ({ doc }) => `Website.com — ${doc.title.value}`,\n      generateDescription: ({ doc }) => doc.excerpt\n    })\n  ]\n});\n\nexport default config;\n```\n\n### Options\n\n##### `collections`\n\nAn array of collections slugs to enable SEO. Enabled collections receive a `meta` field which is an object of title, description, and image subfields.\n\n##### `globals`\n\nAn array of global slugs to enable SEO. Enabled globals receive a `meta` field which is an object of title, description, and image subfields.\n\n##### `fields`\n\nAn array of fields that allows you to inject your own custom fields onto the `meta` field group. The following fields are provided by default:\n\n  - `title`: text\n  - `description`: textarea\n  - `image`: upload (if an `uploadsCollection` is provided)\n  - `preview`: ui\n\n##### `uploadsCollection`\n\nSet the `uploadsCollection` to your application's upload-enabled collection slug. This is used to provide an `image` field on the `meta` field group.\n\n##### `tabbedUI`\n\nWhen the `tabbedUI` property is `true`, it appends an `SEO` tab onto your config using Payload's [Tabs Field](../fields/tabs). If your collection is not already tab-enabled, meaning the first field in your config is not of type `tabs`, then one will be created for you called `Content`. Defaults to `false`.\n\n<Banner type=\"info\">\n  If you wish to continue to use top-level or sidebar fields with `tabbedUI`, you must not let the default `Content` tab get created for you (see the note above). Instead, you must define the first field of your config with type `tabs` and place all other fields adjacent to this one.\n</Banner>\n\n##### `generateTitle`\n\nA function that allows you to return any meta title, including from document's content.\n\n```ts\n// payload.config.ts\n{\n  // ...\n  seoPlugin({\n    generateTitle: ({ ...docInfo, doc, locale }) => `Website.com — ${doc?.title?.value}`,\n  })\n}\n```\n\n##### `generateDescription`\n\nA function that allows you to return any meta description, including from document's content.\n\n```ts\n// payload.config.ts\n{\n  // ...\n  seoPlugin({\n    generateDescription: ({ ...docInfo, doc, locale }) => doc?.excerpt?.value\n  })\n}\n```\n\n##### `generateImage`\n\nA function that allows you to return any meta image, including from document's content.\n\n```ts\n// payload.config.ts\n{\n  // ...\n  seoPlugin({\n    generateImage: ({ ...docInfo, doc, locale }) => doc?.featuredImage?.value\n  })\n}\n```\n\n##### `generateURL`\n\nA function called by the search preview component to display the actual URL of your page.\n\n```ts\n// payload.config.ts\n{\n  // ...\n  seoPlugin({\n    generateURL: ({ ...docInfo, doc, locale }) => `https://yoursite.com/${collection?.slug}/${doc?.slug?.value}`\n  })\n}\n```\n\n#### `interfaceName`\n\nRename the meta group interface name that is generated for TypeScript and GraphQL.\n\n```ts\n// payload.config.ts\n{\n  // ...\n  seoPlugin({\n    interfaceName: 'customInterfaceNameSEO'\n  })\n}\n```\n\n#### `fieldOverrides`\n\nPass any valid field props to the base fields: Title, Description or Image.\n\n```ts\n// payload.config.ts\nseoPlugin({\n  // ...\n  fieldOverrides: {\n    title: {\n      required: true,\n    },\n    description: {\n      localized: true,\n    },\n  },\n})\n```\n\n## TypeScript\n\nAll types can be directly imported:\n\n```ts\nimport {\n  PluginConfig,\n  GenerateTitle,\n  GenerateDescription\n  GenerateURL\n} from '@payloadcms/plugin-seo/types';\n```\n\n## Examples\n\nThe [Templates Directory](https://github.com/payloadcms/payload/tree/main/templates) contains an official [Website Template](https://github.com/payloadcms/payload/tree/main/templates/website) and [E-commerce Template](https://github.com/payloadcms/payload/tree/main/templates/ecommerce) which demonstrates exactly how to configure this plugin in Payload and implement it on your front-end.\n\n## Screenshots\n\n![image](https://user-images.githubusercontent.com/70709113/163850633-f3da5f8e-2527-4688-bc79-17233307a883.png)\n",
            "desc": "Manage SEO metadata from your Payload admin",
            "headings": [
              {
                "id": "installation",
                "level": 2,
                "text": "Installation"
              },
              {
                "id": "basic-usage",
                "level": 2,
                "text": "Basic Usage"
              },
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              },
              {
                "id": "examples",
                "level": 2,
                "text": "Examples"
              },
              {
                "id": "screenshots",
                "level": 2,
                "text": "Screenshots"
              }
            ],
            "keywords": "plugins, seo, meta, search, engine, ranking, google",
            "label": "SEO",
            "order": 20,
            "title": "SEO Plugin"
          },
          {
            "slug": "stripe",
            "content": "\n[![NPM](https://img.shields.io/npm/v/@payloadcms/plugin-stripe)](https://www.npmjs.com/package/@payloadcms/plugin-stripe)\n\nWith this plugin you can easily integrate [Stripe](https://stripe.com) into Payload. Simply provide your Stripe credentials and this plugin will open up a two-way communication channel between the two platforms. This enables you to easily sync data back and forth, as well as proxy the Stripe REST API through Payload's access control. Use this plugin to completely offload billing to Stripe and retain full control over your application's data.\n\nFor example, you might be building an e-commerce or SaaS application, where you have a `products` or a `plans` collection that requires either a one-time payment or a subscription. You can to tie each of these products to Stripe, then easily subscribe to billing-related events to perform your application's business logic, such as active purchases or subscription cancellations.\n\nTo build a checkout flow on your front-end you can either use [Stripe Checkout](https://stripe.com/payments/checkout), or you can also build a completely custom checkout experience from scratch using [Stripe Web Elements](https://stripe.com/docs/payments/elements). Then to build fully custom, secure customer dashboards, you can leverage Payload's access control to restrict access to your Stripe resources so your users never have to leave your site to manage their accounts.\n\nThe beauty of this plugin is the entirety of your application's content and business logic can be handled in Payload while Stripe handles solely the billing and payment processing. You can build a completely proprietary application that is endlessly customizable and extendable, on APIs and databases that you own. Hosted services like Shopify or BigCommerce might fracture your application's content then charge you for access.\n\n<Banner type=\"info\">\n  This plugin is completely open-source and the [source code can be found here](https://github.com/payloadcms/payload/tree/main/packages/plugin-stripe). If you need help, check out our [Community Help](https://payloadcms.com/community-help). If you think you've found a bug, please [open a new issue](https://github.com/payloadcms/payload/issues/new?assignees=&labels=plugin%3A%20stripe&template=bug_report.md&title=plugin-stripe%3A) with as much detail as possible.\n</Banner>\n\n##### Core features\n\n- Hides your Stripe credentials when shipping SaaS applications\n- Allows restricted keys through [Payload access control](../access-control/overview)\n- Enables a two-way communication channel between Stripe and Payload\n- Proxies the [Stripe REST API](https://stripe.com/docs/api)\n- Proxies [Stripe webhooks](https://stripe.com/docs/webhooks)\n- Automatically syncs data between the two platforms\n\n## Installation\n\nInstall the plugin using any JavaScript package manager like [Yarn](https://yarnpkg.com), [NPM](https://npmjs.com), or [PNPM](https://pnpm.io):\n\n```bash\n  yarn add @payloadcms/plugin-stripe\n```\n\n## Basic Usage\n\nIn the `plugins` array of your [Payload config](../configuration/overview), call the plugin with [options](#options):\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport stripePlugin from '@payloadcms/plugin-stripe'\n\nconst config = buildConfig({\n  plugins: [\n    stripePlugin({\n      stripeSecretKey: process.env.STRIPE_SECRET_KEY,\n    }),\n  ],\n})\n\nexport default config\n```\n\n### Options\n\n| Option | Type | Default | Description |\n| --- | --- | --- | --- |\n| `stripeSecretKey` \\* | string | `undefined` | Your Stripe secret key |\n| `stripeWebhooksEndpointSecret` | string | `undefined` | Your Stripe webhook endpoint secret |\n| `rest` | boolean | `false` | When `true`, opens the `/api/stripe/rest` endpoint |\n| `webhooks` | object \\| function | `undefined` | Either a function to handle all webhooks events, or an object of Stripe webhook handlers, keyed to the name of the event |\n| `sync` | array | `undefined` | An array of sync configs |\n| `logs` | boolean | `false` | When `true`, logs sync events to the console as they happen |\n\n_\\* An asterisk denotes that a property is required._\n\n## Endpoints\n\nThe following custom endpoints are automatically opened for you:\n\n| Endpoint | Method | Description |\n| --- | --- | --- |\n| `/api/stripe/rest` | `POST` | Proxies the [Stripe REST API](https://stripe.com/docs/api) behind [Payload access control](../access-control/overview) and returns the result. See the [REST Proxy](#stripe-rest-proxy) section for more details. |\n| `/stripe/webhooks` | `POST` | Handles all Stripe webhook events |\n\n##### Stripe REST Proxy\n\nIf `rest` is true, proxies the [Stripe REST API](https://stripe.com/docs/api) behind [Payload access control](../access-control/overview) and returns the result. If you need to proxy the API server-side, use the [stripeProxy](#node) function.\n\n```ts\nconst res = await fetch(`/api/stripe/rest`, {\n  method: 'POST',\n  credentials: 'include',\n  headers: {\n    'Content-Type': 'application/json',\n    // Authorization: `JWT ${token}` // NOTE: do this if not in a browser (i.e. curl or Postman)\n  },\n  body: JSON.stringify({\n    stripeMethod: 'stripe.subscriptions.list',\n    stripeArgs: [\n      {\n        customer: 'abc',\n      },\n    ],\n  }),\n})\n```\n\n<Banner type=\"info\">\n  <strong>Note:</strong>\n  <br />\n  The `/api` part of these routes may be different based on the settings defined in your Payload config.\n</Banner>\n\n## Webhooks\n\n[Stripe webhooks](https://stripe.com/docs/webhooks) are used to sync from Stripe to Payload. Webhooks listen for events on your Stripe account so you can trigger reactions to them. Follow the steps below to enable webhooks.\n\nDevelopment:\n\n1. Login using Stripe cli `stripe login`\n1. Forward events to localhost `stripe listen --forward-to localhost:3000/stripe/webhooks`\n1. Paste the given secret into your `.env` file as `STRIPE_WEBHOOKS_ENDPOINT_SECRET`\n\nProduction:\n\n1. Login and [create a new webhook](https://dashboard.stripe.com/test/webhooks/create) from the Stripe dashboard\n1. Paste `YOUR_DOMAIN_NAME/stripe/webhooks` as the \"Webhook Endpoint URL\"\n1. Select which events to broadcast\n1. Paste the given secret into your `.env` file as `STRIPE_WEBHOOKS_ENDPOINT_SECRET`\n1. Then, handle these events using the `webhooks` portion of this plugin's config:\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport stripePlugin from '@payloadcms/plugin-stripe'\n\nconst config = buildConfig({\n  plugins: [\n    stripePlugin({\n      stripeSecretKey: process.env.STRIPE_SECRET_KEY,\n      stripeWebhooksEndpointSecret: process.env.STRIPE_WEBHOOKS_ENDPOINT_SECRET,\n      webhooks: {\n        'customer.subscription.updated': ({ event, stripe, stripeConfig }) => {\n          // do something...\n        },\n      },\n      // NOTE: you can also catch all Stripe webhook events and handle the event types yourself\n      // webhooks: (event, stripe, stripeConfig) => {\n      //   switch (event.type): {\n      //     case 'customer.subscription.updated': {\n      //       // do something...\n      //       break;\n      //     }\n      //     default: {\n      //       break;\n      //     }\n      //   }\n      // }\n    }),\n  ],\n})\n\nexport default config\n```\n\nFor a full list of available webhooks, see [here](https://stripe.com/docs/cli/trigger#trigger-event).\n\n## Node\n\nOn the server you should interface with Stripe directly using the [stripe](https://www.npmjs.com/package/stripe) npm module. That might look something like this:\n\n```ts\nimport Stripe from 'stripe'\n\nconst stripeSecretKey = process.env.STRIPE_SECRET_KEY\nconst stripe = new Stripe(stripeSecretKey, { apiVersion: '2022-08-01' })\n\nexport const MyFunction = async () => {\n  try {\n    const customer = await stripe.customers.create({\n      email: data.email,\n    })\n\n    // do something...\n  } catch (error) {\n    console.error(error.message)\n  }\n}\n```\n\nAlternatively, you can interface with the Stripe using the `stripeProxy`, which is exactly what the `/api/stripe/rest` endpoint does behind-the-scenes. Here's the same example as above, but piped through the proxy:\n\n```ts\nimport { stripeProxy } from '@payloadcms/plugin-stripe'\n\nexport const MyFunction = async () => {\n  try {\n    const customer = await stripeProxy({\n      stripeSecretKey: process.env.STRIPE_SECRET_KEY,\n      stripeMethod: 'customers.create',\n      stripeArgs: [\n        {\n          email: data.email,\n        },\n      ],\n    })\n\n    if (customer.status === 200) {\n      // do something...\n    }\n\n    if (customer.status >= 400) {\n      throw new Error(customer.message)\n    }\n  } catch (error) {\n    console.error(error.message)\n  }\n}\n```\n\n## Sync\n\nThis option will setup a basic sync between Payload collections and Stripe resources for you automatically. It will create all the necessary hooks and webhooks handlers, so the only thing you have to do is map your Payload fields to their corresponding Stripe properties. As documents are created, updated, and deleted from either Stripe or Payload, the changes are reflected on either side.\n\n<Banner type=\"info\">\n  <strong>Note:</strong>\n  <br />\n  If you wish to enable a _two-way_ sync, be sure to setup [`webhooks`](#webhooks) and pass the `stripeWebhooksEndpointSecret` through your config.\n</Banner>\n\n```ts\nimport { buildConfig } from 'payload/config'\nimport stripePlugin from '@payloadcms/plugin-stripe'\n\nconst config = buildConfig({\n  plugins: [\n    stripePlugin({\n      stripeSecretKey: process.env.STRIPE_SECRET_KEY,\n      stripeWebhooksEndpointSecret: process.env.STRIPE_WEBHOOKS_ENDPOINT_SECRET,\n      sync: [\n        {\n          collection: 'customers',\n          stripeResourceType: 'customers',\n          stripeResourceTypeSingular: 'customer',\n          fields: [\n            {\n              fieldPath: 'name', // this is a field on your own Payload config\n              stripeProperty: 'name', // use dot notation, if applicable\n            },\n          ],\n        },\n      ],\n    }),\n  ],\n})\n\nexport default config\n```\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  Due to limitations in the Stripe API, this currently only works with top-level fields. This is because every Stripe object is a separate entity, making it difficult to abstract into a simple reusable library. In the future, we may find a pattern around this. But for now, cases like that will need to be hard-coded.\n</Banner>\n\nUsing `sync` will do the following:\n\n- Adds and maintains a `stripeID` read-only field on each collection, this is a field generated _by Stripe_ and used as a cross-reference\n- Adds a direct link to the resource on Stripe.com\n- Adds and maintains an `skipSync` read-only flag on each collection to prevent infinite syncs when hooks trigger webhooks\n- Adds the following hooks to each collection:\n  - `beforeValidate`: `createNewInStripe`\n  - `beforeChange`: `syncExistingWithStripe`\n  - `afterDelete`: `deleteFromStripe`\n- Handles the following Stripe webhooks\n  - `STRIPE_TYPE.created`: `handleCreatedOrUpdated`\n  - `STRIPE_TYPE.updated`: `handleCreatedOrUpdated`\n  - `STRIPE_TYPE.deleted`: `handleDeleted`\n\n## TypeScript\n\nAll types can be directly imported:\n\n```ts\nimport {\n  StripeConfig,\n  StripeWebhookHandler,\n  StripeProxy,\n  ...\n} from '@payloadcms/plugin-stripe/types';\n```\n\n## Examples\n\nThe [Templates Directory](https://github.com/payloadcms/payload/tree/main/templates) contains an official [E-commerce Template](https://github.com/payloadcms/payload/tree/main/templates/ecommerce) which demonstrates exactly how to configure this plugin in Payload and implement it on your front-end. You can also check out [How to Build An E-Commerce Site With Next.js](https://payloadcms.com/blog/how-to-build-an-e-commerce-site-with-nextjs) post for a bit more context around this template.\n\n",
            "desc": "Easily accept payments with Stripe",
            "headings": [
              {
                "id": "installation",
                "level": 2,
                "text": "Installation"
              },
              {
                "id": "basic-usage",
                "level": 2,
                "text": "Basic Usage"
              },
              {
                "id": "options",
                "level": 3,
                "text": "Options"
              },
              {
                "id": "endpoints",
                "level": 2,
                "text": "Endpoints"
              },
              {
                "id": "webhooks",
                "level": 2,
                "text": "Webhooks"
              },
              {
                "id": "node",
                "level": 2,
                "text": "Node"
              },
              {
                "id": "sync",
                "level": 2,
                "text": "Sync"
              },
              {
                "id": "typescript",
                "level": 2,
                "text": "TypeScript"
              },
              {
                "id": "examples",
                "level": 2,
                "text": "Examples"
              }
            ],
            "keywords": "plugins, stripe, payments, ecommerce",
            "label": "Stripe",
            "order": 20,
            "title": "Stripe Plugin"
          },
          {
            "slug": "build-your-own",
            "content": "\nBuilding your own plugin is easy, and if you&apos;re already familiar with Payload then you&apos;ll have everything you need to get started. You can either start from scratch or use the Payload plugin template to get up and running quickly.\n\n<Banner type=\"success\">\n  To use the template, run `npx create-payload-app@latest -t plugin -n my-new-plugin` directly in your terminal or [clone the template directly from GitHub](https://github.com/payloadcms/payload-plugin-template).\n</Banner>\n\nOur plugin template includes everything you need to build a full life-cycle plugin:\n\n* Example files and functions for extending the payload config\n* A local dev environment to develop the plugin\n* Test suite with integrated GitHub workflow\n\nBy abstracting your code into a plugin, you&apos;ll be able to reuse your feature across multiple projects and make it available for other developers to use.\n\n### Plugins Recap\n\nHere is a brief recap of how to integrate plugins with Payload, to learn more head back to the [plugin overview page](../plugins/overview).\n\n\n#### How to install a plugin\n\nTo install any plugin, simply add it to your Payload config in the plugins array.\n\n```\nimport samplePlugin from 'sample-plugin';\n\nconst config = buildConfig({\n  plugins: [\n    // Add plugins here\n    samplePlugin({\n\t\tenabled: true,\n    }),\n  ],\n});\n\nexport default config;\n```\n\n\n#### Initialization\n\nThe initialization process goes in the following order:\n\n1. Incoming config is validated\n2. Plugins execute\n3. Default options are integrated\n4. Sanitization cleans and validates data\n5. Final config gets initialized\n\n\n### Plugin Template\n\nIn the [Payload plugin template](https://github.com/payloadcms/payload-plugin-template), you will see a common file structure that is used across plugins:\n\n1. root folder - general configuration\n2. /src folder - everything related to the plugin\n3. /dev folder - sanitized test project for development\n\n\n#### Root\n\nIn the root folder, you will see various files related to the configuration of the plugin. We set up our environment in a similar manner in Payload core and across other projects. The only two files you need to modify are:\n\n* **README**.md - This contains instructions on how to use the template. When you are ready, update this to contain instructions on how to use your Plugin.\n* **package**.json - Contains necessary scripts and dependencies. Overwrite the metadata in this file to describe your Plugin.\n\n\n#### Dev\n\nThe purpose of the **dev** folder is to provide a sanitized local Payload project. so you can run and test your plugin while you are actively developing it.\n\nDo **not** store any of the plugin functionality in this folder - it is purely an environment to _assist_ you with developing the plugin.\n\nIf you&apos;re starting from scratch, you can easily setup a dev environment like this:\n\n```\nmkdir dev\ncd dev\nnpx create-payload-app@latest\n```\n\nIf you&apos;re using the plugin template, the dev folder is built out for you and the `samplePlugin` has already been installed in `dev/payload.config()`.\n\n```\n  plugins: [\n    // when you rename the plugin or add options, make sure to update it here\n    samplePlugin({\n      enabled: false,\n    })\n  ]\n```\n\nYou can add to the `dev/payload.config` and build out the dev project as needed to test your plugin.\n\nWhen you&apos;re ready to start development, navigate into this folder with `cd dev`\n\nAnd then start the project with `yarn dev` and pull up `http://localhost:3000` in your browser.\n\n\n### Testing\n\nAnother benefit of the dev folder is that you have the perfect environment established for testing.\n\nA good test suite is essential to ensure quality and stability in your plugin. Payload typically uses [Jest](https://jestjs.io/); a popular testing framework, widely used for testing JavaScript and particularly for applications built with React.\n\nJest organizes tests into test suites and cases. We recommend creating tests based on the expected behavior of your plugin from start to finish. Read more about tests in the [Jest documentation.](https://jestjs.io/)\n\nThe plugin template provides a stubbed out test suite at `dev/plugin.spec.ts` which is ready to go - just add in your own test conditions and you&apos;re all set!\n\n```\nimport payload from 'payload'\n\ndescribe('Plugin tests', () => {\n  // Example test to check for seeded data\n  it('seeds data accordingly', async () => {\n    const newCollectionQuery = await payload.find({\n      collection: 'newCollection',\n      sort: 'createdAt',\n    })\n\n    newCollection = newCollectionQuery.docs\n\n    expect(newCollectionQuery.totalDocs).toEqual(1)\n  })\n})\n```\n\n\n### Seeding data\n\nFor development and testing, you will likely need some data to work with. You can streamline this process by seeding and dropping your database - instead of manually entering data.\n\nIn the plugin template, you can navigate to `dev/src/server.ts` and see an example seed function.\n\n```\nif (process.env.PAYLOAD_SEED === 'true') {\n    await seed(payload)\n}\n```\n\nA sample seed function has been created for you at `dev/src/seed`, update this file with additional data as needed.\n\n```\nexport const seed = async (payload: Payload): Promise<void> => {\n  payload.logger.info('Seeding data...')\n\n  await payload.create({\n    collection: 'new-collection',\n    data: {\n      title: 'Seeded title',\n    },\n  })\n\n  // Add additional seed data here\n}\n\n```\n\n\n#### Src\n\nNow that we have our environment setup and dev project ready to go - it&apos;s time to build the plugin!\n\n\n**index.ts**\n\nFirst up, the `src/index.ts` file - this is where the plugin should be imported from. It is best practice not to build the plugin directly in this file, instead we use this to export the plugin and types from their respective files.\n\n\n**Plugin.ts**\n\nTo reiterate, the essence of a payload plugin is simply to extend the Payload config - and that is exactly what we are doing in this file.\n\n```\nexport const samplePlugin =\n  (pluginOptions: PluginTypes) =>\n  (incomingConfig: Config): Config => {\n    let config = { ...incomingConfig }\n\n   // do something cool with the config here\n\n    return config\n }\n```\n\n1. First, you need to receive the existing Payload config along with any plugin options.\n2. Then set the variable `config` to be equal to a copy of the existing config.\n3. From here, you can extend the config however you like!\n4. Finally, return the config and you&apos;re all set.\n\n\n### Spread Syntax\n\n[Spread syntax](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax) (or the spread operator) is a feature in JavaScript that uses the dot notation **(...)** to spread elements from arrays, strings, or objects into various contexts.\n\nWe are going to use spread syntax to allow us to add data to existing arrays without losing the existing data. It is crucial to spread the existing data correctly, else this can cause adverse behavior and conflicts with Payload config and other plugins.\n\nLet&apos;s say you want to build a plugin that adds a new collection:\n\n```\nconfig.collections = [\n  ...(config.collections || []),\n newCollection,\n  // Add additional collections here\n]\n```\n\nFirst, you need to spread the `config.collections` to ensure that we don&apos;t lose the existing collections. Then you can add any additional collections, just as you would in a regular payload config.\n\nThis same logic is applied to other properties like admin, globals, hooks:\n\n```\nconfig.globals = [\n  ...(config.globals || []),\n  // Add additional globals here\n]\n\nconfig.hooks = {\n  ...(config.hooks || {}),\n  // Add additional hooks here\n}\n```\n\nSome properties will be slightly different to extend, for instance the `onInit` property:\n\n```\nconfig.onInit = async payload => {\n  if (incomingConfig.onInit) await incomingConfig.onInit(payload)\n\n  // Add additional onInit code by using the onInitExtension function\n  onInitExtension(pluginOptions, payload)\n}\n```\n\nIf you wish to add to the `onInit`, you must include the async/await. We don&apos;t use spread syntax in this case, instead you must await the existing `onInit` before running additional functionality.\n\nIn the template, we have stubbed out a basic `onInitExtension` file that you can use, if not needed feel free to delete it.\n\n\n### Webpack\n\nIf any of your files use server only packages such as fs, stripe, nodemailer, etc, they will need to be removed from the browser bundle. To do that, you can [alias the file imports with webpack](../admin/excluding-server-code#aliasing-server-only-modules).\n\nWhen files are bundled for the browser, the import paths are essentially crawled to determine what files to include in the bundle. To prevent the server only files from making it into the bundle, we can alias their import paths to a file that can be included in the browser. This will short-circuit the import path crawling and ensure browser only code is bundled.\n\nWebpack is another part of the Payload config that can be a little more tricky to extend. To help here, the template includes a helper function `extendWebpackConfig()` which takes care of spreading the existing webpack, so you can just add your new stuff:\n\n```\nconfig.admin = {\n  ...(config.admin || {}),\n  // Add your aliases to the helper function below\n  webpack: extendWebpackConfig(incomingConfig)\n}\n```\n\n### Types\n\nIf your plugin has options, you should define and provide types for these options in a separate file which gets exported from the main `index.ts`.\n\n```\nexport interface PluginTypes {\n  /**\n   * Enable or disable plugin\n   * @default false\n   */\n  enabled?: boolean\n}\n\n```\n\nIf possible, include [JSDoc comments](https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html#types-1) to describe the options and their types. This allows a developer to see details about the options in their editor.\n\n### Best practices\n\nIn addition to the setup covered above, here are other best practices to follow:\n\n##### Providing an enable / disable option:\nFor a better user experience, provide a way to disable the plugin without uninstalling it. This is especially important if your plugin adds additional webpack aliases, this will allow you to still let the webpack run to prevent errors.\n##### Include tests in your GitHub CI workflow:\nIf you&apos;ve configured tests for your package, integrate them into your workflow to run the tests each time you commit to the plugin repository. Learn more about [how to configure tests into your GitHub CI workflow.](https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs)\n##### Publish your finished plugin to NPM:\nThe best way to share and allow others to use your plugin once it is complete is to publish an NPM package. This process is straightforward and well documented, find out more about [creating and publishing a NPM package here](https://docs.npmjs.com/creating-and-publishing-scoped-public-packages/).\n##### Add payload-plugin topic tag:\nApply the tag **payload-plugin** to your GitHub repository. This will boost the visibility of your plugin and ensure it gets listed with [existing payload plugins](https://github.com/topics/payload-plugin).\n##### Use [Semantic Versioning](https://semver.org/) (SemVer):\nWith the SemVer system you release version numbers that reflect the nature of changes (major, minor, patch). Ensure all major versions reference their Payload compatibility.\n",
            "desc": "Starting to build your own plugin? Find everything you need and learn best practices with the Payload plugin template.",
            "headings": [
              {
                "id": "plugins-recap",
                "level": 3,
                "text": "Plugins Recap"
              },
              {
                "id": "plugin-template",
                "level": 3,
                "text": "Plugin Template"
              },
              {
                "id": "testing",
                "level": 3,
                "text": "Testing"
              },
              {
                "id": "seeding-data",
                "level": 3,
                "text": "Seeding data"
              },
              {
                "id": "spread-syntax",
                "level": 3,
                "text": "Spread Syntax"
              },
              {
                "id": "webpack",
                "level": 3,
                "text": "Webpack"
              },
              {
                "id": "types",
                "level": 3,
                "text": "Types"
              },
              {
                "id": "best-practices",
                "level": 3,
                "text": "Best practices"
              }
            ],
            "keywords": "plugins, template, config, configuration, extensions, custom, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Build Your Own",
            "order": 50,
            "title": "Building Your Own Plugin"
          }
        ]
      },
      {
        "slug": "Examples",
        "docs": [
          {
            "slug": "overview",
            "content": "\nPayload provides a vast array of examples to help you get started with your project no matter what you are working on. These examples are designed to be easy to get up and running, and to be easy to understand. They showcase nothing more than the specific features being demonstrated, so you can easily decipher what is going on.\n\nExamples are changing every day, so be sure to check back often to see what new examples have been added. If you have a specific example you would like to see, please feel free to start a new [Discussion](https://github.com/payloadcms/payload/discussions) or open a new [PR](https://github.com/payloadcms/payload/pulls) to add it yourself.\n\n- [Auth](https://github.com/payloadcms/payload/tree/main/examples/auth)\n- [Custom Server](https://github.com/payloadcms/payload/tree/main/examples/custom-server)\n- [Draft Preview](https://github.com/payloadcms/payload/tree/main/examples/draft-preview)\n- [Email](https://github.com/payloadcms/payload/tree/main/examples/email)\n- [Form Builder](https://github.com/payloadcms/payload/tree/main/examples/form-builder)\n- [Hierarchy](https://github.com/payloadcms/payload/tree/main/examples/hierarchy)\n- [Live Preview](https://github.com/payloadcms/payload/tree/main/examples/live-preview)\n- [Multi-tenant](https://github.com/payloadcms/payload/tree/main/examples/multi-tenant)\n- [Nested Docs](https://github.com/payloadcms/payload/tree/main/examples/nested-docs)\n- [Redirects](https://github.com/payloadcms/payload/tree/main/examples/redirects)\n- [Tests](https://github.com/payloadcms/payload/tree/main/examples/testing)\n- [Virtual Fields](https://github.com/payloadcms/payload/tree/main/examples/virtual-fields)\n- [White-label Admin UI](https://github.com/payloadcms/payload/tree/main/examples/whitelabel)\n\nWhere necessary, some examples include a front-end. Examples that require a front-end share this folder structure:\n\n```plaintext\nexample/\n├── payload/\n├── next-app/\n├── next-pages/\n├── react-router/\n├── vue/\n├── svelte/\n```\n\nWhere `payload` is your Payload project, and the other directories are dedicated to their respective front-end framework. We are adding new examples every day, so if your framework of choice is not yet supported in any particular example, please feel free to start a new [Discussion](https://github.com/payloadcms/payload/discussions) or open a new [PR](https://github.com/payloadcms/payload/pulls) to add it yourself.\n",
            "desc": "",
            "headings": [],
            "keywords": "example, examples, starter, boilerplate, template, templates",
            "label": "Overview",
            "order": 10,
            "title": "Examples"
          }
        ]
      },
      {
        "slug": "Integrations",
        "docs": [
          {
            "slug": "vercel-content-link",
            "content": "\n[Vercel Content Link](https://vercel.com/docs/workflow-collaboration/edit-mode#content-link) will allow your editors to navigate directly from the content rendered on your front-end to the fields in Payload that control it. This requires no changes to your front-end code and very few changes to your Payload config.\n\n![Versions](/images/docs/vercel-visual-editing.jpg)\n\n<Banner type=\"warning\">\n  Vercel Content Link is an enterprise-only feature and only available for deployments hosted on\n  Vercel. If you are an existing enterprise customer, [contact our sales\n  team](https://payloadcms.com/for-enterprise) for help with your integration.\n</Banner>\n\n### How it works\n\nTo power Vercel Content Link, Payload embeds Content Source Maps into its API responses. Content Source Maps are invisible, encoded JSON values that include a link back to the field in the CMS that generated the content. When rendered on the page, Vercel detects and decodes these values to display the Content Link interface.\n\nFor full details on how the encoding and decoding algorithm works, check out [`@vercel/stega`](https://www.npmjs.com/package/@vercel/stega).\n\n### Getting Started\n\nSetting up Payload with Vercel Content Link is easy. First, install the `@payloadcms/plugin-csm` plugin into your project. This plugin requires an API key to install, [contact our sales team](https://payloadcms.com/for-enterprise) if you don't already have one.\n\n```bash\nnpm i @payloadcms/plugin-csm\n```\n\nThen in the `plugins` array of your Payload config, call the plugin and enable any collections that require Content Source Maps.\n\n```ts\nimport { buildConfig } from \"payload/config\"\nimport contentSourceMaps from \"@payloadcms/plugin-csm\"\n\nconst config = buildConfig({\n  collections: [\n    {\n      slug: \"pages\",\n      fields: [\n        {\n          name: 'slug',\n          type: 'text',\n        },\n        {\n          name: 'title,'\n          type: 'text',\n        },\n      ],\n    },\n  ],\n  plugins: [\n    contentSourceMaps({\n      collections: [\"pages\"],\n    }),\n  ],\n})\n\nexport default config\n```\n\nNow in your Next.js app, include the `?encodeSourceMaps=true` parameter in any of your API requests. For performance reasons, this should only be done when in draft mode or on preview deployments.\n\n```ts\nif (isDraftMode || process.env.VERCEL_ENV === 'preview') {\n  const res = await fetch(\n    `${process.env.NEXT_PUBLIC_PAYLOAD_CMS_URL}/api/pages?where[slug][equals]=${slug}&encodeSourceMaps=true`,\n  )\n}\n```\n\nAnd that's it! You are now ready to enter Edit Mode and begin visually editing your content.\n\n##### Edit Mode\n\nTo see Content Link on your site, you first need to visit any preview deployment on Vercel and login using the Vercel Toolbar. When Content Source Maps are detected on the page, a pencil icon will appear in the toolbar. Clicking this icon will enable Edit Mode, highlighting all editable fields on the page in blue.\n\n![Versions](/images/docs/vercel-toolbar.jpg)\n\n### Troubleshooting\n\n##### Dates\n\nThe plugin does not encode `date` fields by default, but for some cases like text that uses negative CSS letter-spacing, it may be necessary to split the encoded data out from the rendered text. This way you can safely use the cleaned data as expected.\n\n```ts\nimport { vercelStegaSplit } from '@vercel/stega'\nconst { cleaned, encoded } = vercelStegaSplit(text)\n```\n\n##### Blocks\n\nAll `blocks` fields by definition do not have plain text strings to encode. For this reason, blocks are given an additional `encodedSourceMap` key, which you can use to enable Content Link on entire sections of your site. You can then specify the editing container by adding the `data-vercel-edit-target` HTML attribute to any top-level element of your block.\n\n```ts\n<div data-vercel-edit-target>\n  <span style={{ display: \"none\" }}>{encodedSourceMap}</span>\n  {children}\n</div>\n```\n",
            "desc": "Payload + Vercel Content Link allows yours editors to navigate directly from the content rendered on your front-end to the fields in Payload that control it.",
            "headings": [
              {
                "id": "how-it-works",
                "level": 3,
                "text": "How it works"
              },
              {
                "id": "getting-started",
                "level": 3,
                "text": "Getting Started"
              },
              {
                "id": "troubleshooting",
                "level": 3,
                "text": "Troubleshooting"
              }
            ],
            "keywords": "vercel, vercel content link, visual editing, content source maps, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Vercel Content Link",
            "order": 10,
            "title": "Vercel Content Link"
          }
        ]
      }
    ]
  },
  {
    "groupLabel": "",
    "topics": [
      {
        "slug": "Cloud",
        "docs": [
          {
            "slug": "creating-a-project",
            "content": "\nA deployment solution specifically designed for Node.js + MongoDB applications, offering seamless deployment of your entire stack in one place. You can get started in minutes with a one-click template or bring your own codebase with you.\n\nPayload Cloud offers various plans tailored to meet your specific needs, including a MongoDB Atlas database, S3 file storage, and email delivery powered by [Resend](https://resend.com). To see a full breakdown of features and plans, see our [Cloud Pricing page](https://payloadcms.com/cloud-pricing).\n\nTo get started, you first need to create an account. Head over to [the login screen](https://payloadcms.com/login) and **Register for Free**.\n\n<Banner type=\"success\">\n  To create your first project, you can either select [a template](#starting-from-a-template) or\n  [import an existing project](#importing-from-an-existing-codebase) from GitHub.\n</Banner>\n\n## Starting from a Template\n\nTemplates come preconfigured and provide a one-click solution to quickly deploy a new application.\n\n![Screen for creating a new project from a template](https://payloadcms.com/images/docs/cloud/create-from-template.jpg)\n_Creating a new project from a template._\n\nAfter creating an account, select your desired template from the Projects page. At this point, you need to connect to authorize the Payload Cloud application with your GitHub account. Click Continue with GitHub and follow the prompts to authorize the app.\n\nNext, select your `GitHub Scope`. If you belong to multiple organizations, they will show up here. If you do not see the organization you are looking for, you may need to adjust your GitHub app permissions.\n\nAfter selecting your scope, create a unique `repository name` and select whether you want your repository to be public or private on GitHub.\n\n<Banner type=\"warning\">\n  <strong>Note:</strong> Public repositories can be accessed by anyone online, while private\n  repositories grant access only to you and anyone you explicitly authorize.\n</Banner>\n\nOnce you are ready, click **Create Project**. This will clone the selected template to a new repository in your GitHub account, and take you to the configuration page to set up your project for deployment.\n\n## Importing from an Existing Codebase\n\nPayload Cloud works for any Node.js + MongoDB app. From the New Project page, select **import an existing Git codebase**. Choose the organization and select the repository you want to import. From here, you will be taken to the configuration page to set up your project for deployment.\n\n![Screen for creating a new project from an existing repository](https://payloadcms.com/images/docs/cloud/create-from-existing.jpg)\n_Creating a new project from an existing repository._\n\n<Banner type=\"warning\">\n  <strong>Note:</strong> In order to make use of the features of Payload Cloud in your own codebase,\n  you will need to add the [Cloud Plugin](https://github.com/payloadcms/plugin-cloud) to your\n  Payload app.\n</Banner>\n",
            "desc": "Get started with Payload Cloud, a deployment solution specifically designed for Node + MongoDB applications.",
            "headings": [
              {
                "id": "starting-from-a-template",
                "level": 2,
                "text": "Starting from a Template"
              },
              {
                "id": "importing-from-an-existing-codebase",
                "level": 2,
                "text": "Importing from an Existing Codebase"
              }
            ],
            "keywords": "cloud, hosted, database, storage, email, deployment, serverless, node, mongodb, s3, aws, cloudflare, atlas, resend, payload, cms",
            "label": "Getting Started",
            "order": 10,
            "title": "Getting Started"
          },
          {
            "slug": "configuration",
            "content": "\n### Select your plan\n\nOnce you have created a project, you will need to select your plan. This will determine the resources that are allocated to your project and the features that are available to you.\n\n<Banner type=\"success\">\n  Note: All Payload Cloud teams that deploy a project require a card on file. This helps us prevent\n  fraud and abuse on our platform. If you select a plan with a free trial, you will not be charged\n  until your trial period is over. We’ll remind you 7 days before your trial ends and you can cancel\n  anytime.\n</Banner>\n\n### Project Details\n\n| Option           | Description                                                                                                                                                                                                                                   |\n| ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Region**       | Select the region closest to your audience. This will ensure the fastest communication between your data and your client.                                                                                                                     |\n| **Project Name** | A name for your project. You can change this at any time.                                                                                                                                                                                     |\n| **Project Slug** | Choose a unique slug to identify your project. This needs to be unique for your team and you can change it any time.                                                                                                                          |\n| **Team**         | Select the team you want to create the project under. If this is your first project, a personal team will be created for you automatically. You can modify your team settings and invite new members at any time from the Team Settings page. |\n\n### Build Settings\n\nIf you are deploying a new project from a template, the following settings will be automatically configured for you. If you are using your own repository, you need to make sure your build settings are accurate for your project to deploy correctly.\n\n| Option               | Description                                                                                                                                                       |\n| -------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **Root Directory**   | The folder where your `package.json` file lives.                                                                                                                  |\n| **Install Command**  | The command used to install your modules, for example: `yarn install` or `npm install`                                                                            |\n| **Build Command**    | The command used to build your application, for example: `yarn build` or `npm run build`                                                                          |\n| **Serve Command**    | The command used to serve your application, for example: `yarn serve` or `npm run serve`                                                                          |\n| **Branch to Deploy** | Select the branch of your repository that you want to deploy from. This is the branch that will be used to build your project when you commit new changes.        |\n| **Default Domain**   | Set a default domain for your project. This must be unique and you will not able to change it. You can always add a custom domain later in your project settings. |\n\n### Environment Variables\n\nAny of the features in Payload Cloud that require environment variables will automatically be provided to your application. If your app requires any custom environment variables, you can set them here.\n\n<Banner type=\"warning\">\n  Note: For security reasons, any variables you wish to provide to the Admin panel must be prefixed\n  with `PAYLOAD_PUBLIC_`.  Learn more\n  [here](../admin/webpack#admin-environment-vars).\n</Banner>\n\n### Payment\n\nPayment methods can be set per project and can be updated any time. You can use team’s default payment method, or add a new one. Modify your payment methods in your Project settings / Team settings.\n\n<Banner type=\"success\">\n  <strong>Note:</strong> All Payload Cloud teams that deploy a project require a card on file. This\n  helps us prevent fraud and abuse on our platform. If you select a plan with a free trial, you will\n  not be charged until your trial period is over. We’ll remind you 7 days before your trial ends and\n  you can cancel anytime.\n</Banner>\n",
            "desc": "Quickly configure and deploy your Payload Cloud project in a few simple steps.",
            "headings": [
              {
                "id": "select-your-plan",
                "level": 3,
                "text": "Select your plan"
              },
              {
                "id": "project-details",
                "level": 3,
                "text": "Project Details"
              },
              {
                "id": "build-settings",
                "level": 3,
                "text": "Build Settings"
              },
              {
                "id": "environment-variables",
                "level": 3,
                "text": "Environment Variables"
              },
              {
                "id": "payment",
                "level": 3,
                "text": "Payment"
              }
            ],
            "keywords": "configuration, config, settings, project, cloud, payload cloud, deploy, deployment",
            "label": "Configuration",
            "order": 20,
            "title": "Project Configuration"
          },
          {
            "slug": "teams",
            "content": "\n<Banner>\n  Within Payload Cloud, the team management feature offers you the ability to manage your\n  organization, team members, billing, and subscription settings.\n</Banner>\n\n![Payload Cloud Team Settings](https://payloadcms.com/images/docs/cloud/team-settings.jpg)\n_A screenshot of the Team Settings page._\n\n### Members\n\nEach team has members that can interact with your projects. You can invite multiple people to your team and each individual can belong to more than one team. You can assign them either `owner` or `user` permissions. Owners are able to make admin-only changes, such as deleting projects, and editing billing information.\n\n### Adding Members\n\nTo add a new member to your team, visit your Team’s Settings page, and click “Invite Teammate”. You can then add their email address, and assign their role. Press “Save” to send the invitations, which will send an email to the invited team member where they can create a new account.\n\n### Billing\n\nUsers can update billing settings and subscriptions for any teams where they are designated as an `owner`. To make updates to the team’s payment methods, visit the Billing page under the Team Settings tab. You can add new cards, delete cards, and set a payment method as a default. The default payment method will be used in the event that another payment method fails.\n\n### Subscriptions\n\nFrom the Subscriptions page, a team owner can see all current plans for their team. From here, you can see the price of each plan, if there is an active trial, and when you will be billed next.\n\n### Invoices\n\nThe Invoices page will you show you the invoices for your account, as well as the status on their payment.\n",
            "desc": "Manage your Payload Cloud team and billing settings.",
            "headings": [
              {
                "id": "members",
                "level": 3,
                "text": "Members"
              },
              {
                "id": "adding-members",
                "level": 3,
                "text": "Adding Members"
              },
              {
                "id": "billing",
                "level": 3,
                "text": "Billing"
              },
              {
                "id": "subscriptions",
                "level": 3,
                "text": "Subscriptions"
              },
              {
                "id": "invoices",
                "level": 3,
                "text": "Invoices"
              }
            ],
            "keywords": "team, teams, billing, subscription, payment, plan, plans, cloud, payload cloud",
            "label": "Teams",
            "order": 30,
            "title": "Cloud Teams"
          },
          {
            "slug": "projects",
            "content": "\n### Overview\n\n<Banner>\n  The overview tab shows your most recent deployment, along with build and deployment logs. From\n  here, you can see your live URL, deployment details like timestamps and commit hash, as well as\n  the status of your deployment. You can also trigger a redeployment manually, which will rebuild\n  your project using the current configuration.\n</Banner>\n\n![Payload Cloud Overview Page](https://payloadcms.com/images/docs/cloud/overview-page.jpg)\n_A screenshot of the Overview page for a Cloud project._\n\n### Database\n\nYour Payload Cloud project comes with a MongoDB serverless Atlas DB instance or a Dedicated Atlas cluster, depending on your plan. To interact with your cloud database, you will be provided with a MongoDB connection string. This can be found under the **Database** tab of your project.\n\n`mongodb+srv://your_connection_string`\n\n### File Storage\n\nPayload Cloud gives you S3 file storage backed by Cloudflare as a CDN, and this plugin extends Payload so that all of your media will be stored in S3 rather than locally.\n\nAWS Cognito is used for authentication to your S3 bucket. The [Payload Cloud Plugin](https://github.com/payloadcms/plugin-cloud) will automatically pick up these values. These values are only if you'd like to access your files directly, outside of Payload Cloud.\n\n#### Accessing Files Outside of Payload Cloud\n\nIf you'd like to access your files outside of Payload Cloud, you'll need to retrieve some values from your project's settings and put them into your environment variables. In Payload Cloud, navigate to the File Storage tab and copy the values using the copy button. Put these values in your .env file. Also copy the Cognito Password value separately and put into your .env file as well.\n\nWhen you are done, you should have the following values in your .env file:\n\n```env\nPAYLOAD_CLOUD=true\nPAYLOAD_CLOUD_ENVIRONMENT=prod\nPAYLOAD_CLOUD_COGNITO_USER_POOL_CLIENT_ID=\nPAYLOAD_CLOUD_COGNITO_USER_POOL_ID=\nPAYLOAD_CLOUD_COGNITO_IDENTITY_POOL_ID=\nPAYLOAD_CLOUD_PROJECT_ID=\nPAYLOAD_CLOUD_BUCKET=\nPAYLOAD_CLOUD_BUCKET_REGION=\nPAYLOAD_CLOUD_COGNITO_PASSWORD=\n```\n\nThe plugin will pick up these values and use them to access your files.\n\n### Build Settings\n\nYou can update settings from your Project’s Settings tab. Changes to your build settings will trigger a redeployment of your project.\n\n### Environment Variables\n\nFrom the Environment Variables page of the Settings tab, you can add, update and delete variables for use in your project. Like build settings, these changes will trigger a redeployment of your project.\n\n<Banner>\n  Note: For security reasons, any variables you wish to provide to the Admin panel must be prefixed\n  with `PAYLOAD_PUBLIC_`.  Learn more\n  [here](../admin/webpack#admin-environment-vars).\n</Banner>\n\n### Custom Domains\n\nWith Payload Cloud, you can add custom domain names to your project. To do so, first go to the Domains page of the Settings tab of your project. Here you can see your default domain. To add a new domain, type in the domain name you wish to use.\n\n<Banner>\n  Note: do not include the protocol (http:// or https://) or any paths (/page). Only include the\n  domain name and extension, and optionally a subdomain. - your-domain.com - backend.your-domain.com\n</Banner>\n\nOnce you click save, a DNS record will be generated for your domain name to point to your live project. Add this record into your DNS provider’s records, and once the records are resolving properly (this can take 1hr to 48hrs in some cases), your domain will now to point to your live project.\n\nYou will also need to configure your Payload project to use your specified domain. In your `payload.config.ts` file, specify your `serverURL` with your domain:\n\n```ts\nexport default buildConfig({\n  serverURL: 'https://example.com',\n  // the rest of your config,\n})\n```\n\n### Email\n\nPowered by [Resend](https://resend.com), Payload Cloud comes with integrated email support out of the box. No configuration is needed, and you can use `payload.sendEmail()` to send email right from your Payload app. To learn more about sending email with Payload, checkout the [Email Configuration](../email/overview) overview.\n\nIf you are on the Pro or Enterprise plan, you can add your own custom Email domain name. From the Email page of your project’s Settings, add the domain you wish to use for email delivery. This will generate a set of DNS records. Add these records to your DNS provider and click verify to check that your records are resolving properly. Once verified, your emails will now be sent from your custom domain name.\n\n### Developing Locally\n\nTo make changes to your project, you will need to clone the repository defined in your project settings to your local machine. In order to run your project locally, you will need configure your local environment first. Refer to your repository’s `README.md` file to see the steps needed for your specific template.\n\nFrom there, you are ready to make updates to your project. When you are ready to make your changes live, commit your changes to the branch you specified in your Project settings, and your application will automatically trigger a redeploy and build from your latest commit.\n\n### Cloud Plugin\n\nProjects generated from a template will come pre-configured with the official Cloud Plugin, but if you are using your own repository you will need to add this into your project. To do so, add the plugin to your Payload config:\n\n`yarn add @payloadcms/plugin-cloud`\n\n```js\nimport { payloadCloud } from '@payloadcms/plugin-cloud'\nimport { buildConfig } from 'payload/config'\n\nexport default buildConfig({\n  plugins: [payloadCloud()],\n  // rest of config\n})\n```\n\n<Banner type=\"warning\">\n  **Note:** If your Payload config already has an email with transport, this will take precedence\n  over Payload Cloud's email service.\n</Banner>\n\n##### **Optional configuration**\n\nIf you wish to opt-out of any Payload cloud features, the plugin also accepts options to do so.\n\n```js\npayloadCloud({\n  storage: false, // Disable file storage\n  email: false, // Disable email delivery\n})\n```\n",
            "desc": "Manage your Payload Cloud projects.",
            "headings": [
              {
                "id": "overview",
                "level": 3,
                "text": "Overview"
              },
              {
                "id": "database",
                "level": 3,
                "text": "Database"
              },
              {
                "id": "file-storage",
                "level": 3,
                "text": "File Storage"
              },
              {
                "id": "build-settings",
                "level": 3,
                "text": "Build Settings"
              },
              {
                "id": "environment-variables",
                "level": 3,
                "text": "Environment Variables"
              },
              {
                "id": "custom-domains",
                "level": 3,
                "text": "Custom Domains"
              },
              {
                "id": "email",
                "level": 3,
                "text": "Email"
              },
              {
                "id": "developing-locally",
                "level": 3,
                "text": "Developing Locally"
              },
              {
                "id": "cloud-plugin",
                "level": 3,
                "text": "Cloud Plugin"
              }
            ],
            "keywords": "cloud, payload cloud, projects, project, overview, database, file storage, build settings, environment variables, custom domains, email, developing locally",
            "label": "Projects",
            "order": 40,
            "title": "Cloud Projects"
          }
        ]
      },
      {
        "slug": "Production",
        "docs": [
          {
            "slug": "deployment",
            "content": "\n<Banner type=\"success\">\n  So you've developed a Payload app, it's fully tested, and running great locally. Now it's time to\n  launch. <strong>Awesome! Great work!</strong> Now, what's next?\n</Banner>\n\nThere are many ways to deploy Payload to a production environment. When evaluating how you will deploy Payload, you need\nto consider these main aspects:\n\n1. [Basics](#basics)\n1. [Security](#security)\n1. [Your MongoDB](#mongodb)\n1. [Permanent File Storage](#file-storage)\n1. [Docker](#docker)\n\n## Basics\n\nIn order for Payload to run, it requires both the server code and the built admin panel. These will be the `dist`\nand `build` directories by default. If you've used `create-payload-app` to create your project, executing the `build`\nnpm script will build both and output these directories.\n\n## Security\n\nPayload features a suite of security features that you can rely on to strengthen your application's security. When\ndeploying to Production, it's a good idea to double-check that you are making proper use of each of them.\n\n##### The Secret Key\n\nWhen you initialize Payload, you provide it with a `secret` property. This property should be impossible to guess and\nextremely difficult for brute-force attacks to crack. Make sure your Production `secret` is a long, complex string. It's\noften best practice to store it in an `env` file which is not checked into your Git repository, using `dotenv` to supply\nit to your `payload.init` call.\n\n##### Double-check and thoroughly test all Access Control\n\nBecause _**you**_ are in complete control of who can do what with your data, you should double and triple-check that you\nwield that power responsibly before deploying to Production.\n\n<Banner type=\"error\">\n  <strong>By default, all Access Control functions require that a user is successfully logged in to Payload to create, read, update, or delete data.</strong>{' '}\n  But, if you allow public user registration, for example, you will want to make sure that your\n  access control functions are more strict - permitting <strong>only appropriate users</strong> to\n  perform appropriate actions.\n</Banner>\n\n##### Building the Admin panel\n\nBefore running in Production, you need to have built a production-ready copy of the Payload Admin panel. To do this,\nPayload provides the `build` NPM script. You can use it by adding a `script` to your `package.json` file like this:\n\n`package.json`:\n\n```json\n{\n  \"name\": \"project-name-here\",\n  \"scripts\": {\n    \"build\": \"payload build\"\n  },\n  \"dependencies\": {\n    // your dependencies\n  }\n}\n```\n\nThen, to build Payload, you would run `npm run build` in your project folder. A production-ready Admin bundle will be\ncreated in the `build` directory.\n\n##### Setting Node to Production\n\nMake sure you set the environment variable `NODE_ENV` to `production`. Based on this variable, many Node packages\nautomatically optimize themselves. In production, Payload automatically disables\nthe [GraphQL Playground](../graphql/overview#graphql-playground), serves a production-ready version of the Admin\npanel, and other changes.\n\n##### Secure Cookie Settings\n\nYou should be using an SSL certificate for production Payload instances, which means you\ncan [enable secure cookies](../authentication/config) in your Authentication-enabled Collection configs.\n\n##### Preventing API Abuse\n\nPayload comes with a robust set of built-in anti-abuse measures, such as locking out users after X amount of failed\nlogin attempts, request rate limiting, GraphQL query complexity limits, max `depth` settings, and\nmore. [Click here to learn more](../production/preventing-abuse).\n\n## MongoDB\n\nPayload can be used with any MongoDB compatible database including AWS DocumentDB or Azure Cosmos DB.\n\n##### Managing MongoDB yourself\n\nIf you are using a [persistent filesystem-based cloud host](#persistent-vs-ephemeral-filesystems) such as\na [DigitalOcean Droplet](https://www.digitalocean.com/products/droplets/) or\nan [Amazon EC2](https://aws.amazon.com/ec2/?ec2-whats-new.sort-by=item.additionalFields.postDateTime&ec2-whats-new.sort-order=desc)\nserver, you might opt to install MongoDB directly on that server itself so that Node can communicate with it locally.\nWith this approach, you can benefit from faster response times, but scaling can become more involved as your app's user\nbase grows.\n\n##### Letting someone else do it\n\nAlternatively, you can rely on a third-party MongoDB host such as [MongoDB Atlas](https://www.mongodb.com/). With Atlas\nor a similar cloud provider, you can trust them to take care of your database's availability, security, redundancy, and\nbackups.\n\n<Banner type=\"warning\">\n  <strong>Note:</strong>\n  <br />\n  If versions are enabled and a collection has many documents you may need a minimum of an m10\n  mongoDB atlas cluster if you reach a sorting `exceeded memory limit` error to view a collection\n  list in the admin UI. The limitations of the m2 and m5 tier clusters are here: [Atlas M0 (Free\n  Cluster), M2, and M5\n  Limitations](https://www.mongodb.com/docs/atlas/reference/free-shared-limitations/?_ga=2.176267877.1329169847.1677683154-860992573.1647438381#operational-limitations).\n</Banner>\n\n##### DocumentDB\n\nWhen using AWS DocumentDB, you will need to configure connection options for authentication in the `connectOptions`\npassed to the `mongooseAdapter` . You also need to set `connectOptions.useFacet` to `false` to disable use of the\nunsupported `$facet` aggregation.\n\n##### CosmosDB\n\nWhen using Azure Cosmos DB, an index is needed for any field you may want to sort on. To add the sort index for all\nfields that may be sorted in the admin UI use the <a href=\"../configuration/overview\">indexSortableFields</a>\nconfiguration option.\n\n## File storage\n\nIf you are using Payload to [manage file uploads](../upload/overview), you need to consider where your uploaded files\nwill be permanently stored. If you do not use Payload for file uploads, then this section does not impact your app\nwhatsoever.\n\n#### Persistent vs Ephemeral Filesystems\n\nSome cloud app hosts such as [Heroku](https://heroku.com) use `ephemeral` file systems, which means that any files\nuploaded to your server only last until the server restarts or shuts down. Heroku and similar providers schedule\nrestarts and shutdowns without your control, meaning your uploads will accidentally disappear without any way to get\nthem back.\n\nAlternatively, persistent filesystems will never delete your files and can be trusted to reliably host uploads\nperpetually.\n\n**Popular cloud providers with ephemeral filesystems:**\n\n- Heroku\n- DigitalOcean Apps\n\n**Popular cloud providers with persistent filesystems:**\n\n- DigitalOcean Droplets\n- Amazon EC2\n- GoDaddy\n- Many other more traditional web hosts\n\n<Banner type=\"error\">\n  <strong>Warning:</strong>\n  <br />\n  If you rely on Payload's <strong>Upload</strong> functionality, make sure you either use a host\n  with a persistent filesystem or have an integration with a third-party file host like Amazon S3.\n</Banner>\n\n##### Using ephemeral filesystem providers like Heroku\n\nIf you don't use Payload's `upload` functionality, you can go ahead and use Heroku or similar platform easily.\nEverything will work exactly as you want it to.\n\nBut, if you do, and you still want to use an ephemeral filesystem provider, you can write a hook-based solution to\n_copy_ the files your users upload to a more permanent storage solution like Amazon S3 or DigitalOcean Spaces.\n\n**To automatically send uploaded files to S3 or similar, you could:**\n\n- Write an asynchronous `beforeChange` hook for all Collections that support Uploads, which takes any uploaded `file`\n  from the Express `req` and sends it to an S3 bucket\n- Write an `afterRead` hook to save a `s3URL` field that automatically takes the `filename` stored and formats a full S3\n  URL\n- Write an `afterDelete` hook that automatically deletes files from the S3 bucket\n\nWith the above configuration, deploying to Heroku or similar becomes no problem.\n\n## DigitalOcean Tutorials\n\nDigitalOcean provides extremely helpful documentation that can walk you through the entire process of creating a\nproduction-ready Droplet to host your Payload app:\n\n1. Create a new Ubuntu 20.04 droplet on [DigitalOcean](https://digitalocean.com)\n1. [Initial server setup](https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04)\n1. [Install nginx](https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04)\n1. [Install and secure MongoDB](https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-20-04)\n1. [Create a new MongoDB and user](https://medium.com/@mhagemann/how-to-add-a-new-user-to-a-mongodb-database-d896776b5362)\n1. [Set up Node for production](https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-20-04)\n\n### Swap Space\n\nSwap refers to a section of storage on the hard drive that is reserved to temporarily store data that can no longer fit\nwithin RAM. This allows for the expansion of your server's working memory, with some limitations. Swap space comes into\nplay when available RAM can no longer accommodate actively used application data, enabling the system to continue\nfunctioning.\n\nInsufficient space can lead to deployment errors and memory-related issues, resulting in application crashes, sluggish\nperformance, or an unresponsive server.\n\nCommon deployment error due to **space limitations** (as reported by users):\n\n- `Error: Command failed with exit code 1`\n\nTo configure swap, we recommend following this tutorial\non [How To Add Swap Space](https://www.digitalocean.com/community/tutorials/how-to-add-swap-space-on-ubuntu-22-04).\n\n## Docker\n\nThis is an example of a multi-stage docker build of Payload for production. Ensure you are setting your environment\nvariables on deployment, like `PAYLOAD_SECRET`, `PAYLOAD_CONFIG_PATH`, and `DATABASE_URI` if needed.\n\n```dockerfile\nFROM node:18-alpine as base\n\nFROM base as builder\n\nWORKDIR /home/node\nCOPY package*.json ./\n\nCOPY . .\nRUN yarn install\nRUN yarn build\n\nFROM base as runtime\n\nENV NODE_ENV=production\n\nWORKDIR /home/node\nCOPY package*.json  ./\n\nRUN yarn install --production\nCOPY --from=builder /home/node/dist ./dist\nCOPY --from=builder /home/node/build ./build\n\nEXPOSE 3000\n\nCMD [\"node\", \"dist/server.js\"]\n```\n\n## Docker Compose\n\nHere is an example of a docker-compose.yml file that can be used for development\n\n```yml\nversion: '3'\n\nservices:\n  payload:\n    image: node:18-alpine\n    ports:\n      - '3000:3000'\n    volumes:\n      - .:/home/node/app\n      - node_modules:/home/node/app/node_modules\n    working_dir: /home/node/app/\n    command: sh -c \"yarn install && yarn dev\"\n    depends_on:\n      - mongo\n    environment:\n      DATABASE_URI: mongodb://mongo:27017/payload\n      PORT: 3000\n      NODE_ENV: development\n      PAYLOAD_SECRET: TESTING\n\n  mongo:\n    image: mongo:latest\n    ports:\n      - '27017:27017'\n    command:\n      - --storageEngine=wiredTiger\n    volumes:\n      - data:/data/db\n    logging:\n      driver: none\n\nvolumes:\n  data:\n  node_modules:\n```\n",
            "desc": "When your Payload based app is ready, tested, looking great, it is time to deploy. Learn how to deploy your app and what to consider before deployment.",
            "headings": [
              {
                "id": "basics",
                "level": 2,
                "text": "Basics"
              },
              {
                "id": "security",
                "level": 2,
                "text": "Security"
              },
              {
                "id": "mongodb",
                "level": 2,
                "text": "MongoDB"
              },
              {
                "id": "file-storage",
                "level": 2,
                "text": "File storage"
              },
              {
                "id": "digitalocean-tutorials",
                "level": 2,
                "text": "DigitalOcean Tutorials"
              },
              {
                "id": "swap-space",
                "level": 3,
                "text": "Swap Space"
              },
              {
                "id": "docker",
                "level": 2,
                "text": "Docker"
              },
              {
                "id": "docker-compose",
                "level": 2,
                "text": "Docker Compose"
              }
            ],
            "keywords": "deployment, production, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Deployment",
            "order": 10,
            "title": "Production Deployment"
          },
          {
            "slug": "preventing-abuse",
            "content": "\n## Introduction\n\nPayload has built-in security best practices that can be configured to your application-specific needs.\n\n### Limit Failed Login Attempts\n\nSet the max number of failed login attempts before a user account is locked out for a period of time. Set the `maxLoginAttempts` on the collections that feature Authentication to a reasonable but low number for your users to get in. Use the `lockTime` to set a number in milliseconds from the time a user fails their last allowed attempt that a user must wait to try again.\n\n### Rate Limiting Requests\n\nTo prevent DDoS, brute-force, and similar attacks, you can set IP-based rate limits so that once a certain threshold of requests has been hit by a single IP, further requests from the same IP will be ignored. The Payload config `rateLimit` property accepts an object with the following properties:\n\n| Option           | Description                                                                                                             |\n| ---------------- | ----------------------------------------------------------------------------------------------------------------------- |\n| **`window`**     | Time in milliseconds to track requests per IP. Defaults to `900000` (15 minutes).                                        |\n| **`max`**        | Number of requests served from a single IP before limiting. Defaults to `500`.                                          |\n| **`skip`**       | Express middleware function that can return true (or promise resulting in true) that will bypass limit.                 |\n| **`trustProxy`** | True or false, to enable to allow requests to pass through a proxy such as a load balancer or an `nginx` reverse proxy. |\n\n<Banner type=\"warning\">\n  <strong>Warning:</strong>\n  <br />\n  Very commonly, NodeJS apps are served behind `nginx` reverse proxies and similar. If you use\n  rate-limiting while you're behind a proxy, <strong>all</strong> IP addresses from everyone that\n  uses your API will appear as if they are from a local origin (127.0.0.1), and your users will get\n  rate-limited very quickly without cause. If you plan to host your app behind a proxy, make sure\n  you set <strong>trustProxy</strong> to <strong>true</strong>.\n</Banner>\n\n### Max Depth\n\nQuerying a collection and automatically including related documents via `depth` incurs a performance cost. Also, it's possible that your configs may have circular relationships, meaning scenarios where an infinite amount of relationships might populate back and forth until your server times out and crashes. You can prevent any potential of depth-related issues by setting a `maxDepth` property on your Payload config.. The maximum allowed depth should be as small as possible without interrupting dev experience, and it defaults to `10`.\n\n### Cross-Site Request Forgery (CSRF)\n\nCSRF prevention will verify the authenticity of each request to your API to prevent a malicious action from another site from authorized users. See how to configure CSRF [here](../authentication/overview#csrf-protection).\n\n### Cross Origin Resource Sharing (CORS)\n\nTo securely allow headless operation you will need to configure the allowed origins for requests to be able to use the Payload API. You can see how to set CORS as well as other payload configuration settings [here](../configuration/overview)\n\n### Limiting GraphQL Complexity\n\nBecause GraphQL gives the power of query writing outside a server's control, someone with bad intentions might write a maliciously complex query and bog down your server. To prevent resource-intensive GraphQL requests, Payload provides a way specify complexity limits which are based on a complexity score that is calculated for each request.\n\nAny GraphQL request that is calculated to be too expensive is rejected. On the Payload config, in `graphQL` you can set the `maxComplexity` value as an integer. For reference, the default complexity value for each added field is 1, and all `relationship` and `upload` fields are assigned a value of 10.\n\nIf you do not need GraphQL it is advised that you disable it altogether with the Payload config by setting `graphQL.disable: true`. Should you wish to enable GraphQL again, you can remove this property or set it `false`, any time. By turning it off, Payload will bypass creating schemas from your collections and will not register the express route.\n\n### Malicious File Uploads\n\nPayload does not execute uploaded files on the server, but depending on your setup it may be used to transmit and store potentially dangerous files. If your configuration allows file uploads there is the potential that a bad actor uploads a malicious file that is then served to other users. Consider the following ways to mitigate the risks.\n\nFirst, enable email [verification](../authentication/config#email-verification) when users are allowed to register new accounts and add other bot prevention services.\n\nReview that `create` and `update` access on file upload collections are as restrictive as your application needs allow. Consider limiting `read` access of uploaded user's files and how you might limit user uploaded files from being served outside of Payload.\n\nYou can also add a [3rd party library](https://github.com/Cisco-Talos/clamav) to scan files in a [hook](../hooks/collections) or have antivirus software in place.\n",
            "desc": "Payload has built-in security that can be configured to combat production API abuse such as limiting login attempts and IP requests.",
            "headings": [
              {
                "id": "introduction",
                "level": 2,
                "text": "Introduction"
              },
              {
                "id": "limit-failed-login-attempts",
                "level": 3,
                "text": "Limit Failed Login Attempts"
              },
              {
                "id": "rate-limiting-requests",
                "level": 3,
                "text": "Rate Limiting Requests"
              },
              {
                "id": "max-depth",
                "level": 3,
                "text": "Max Depth"
              },
              {
                "id": "cross-site-request-forgery-csrf",
                "level": 3,
                "text": "Cross-Site Request Forgery (CSRF)"
              },
              {
                "id": "cross-origin-resource-sharing-cors",
                "level": 3,
                "text": "Cross Origin Resource Sharing (CORS)"
              },
              {
                "id": "limiting-graphql-complexity",
                "level": 3,
                "text": "Limiting GraphQL Complexity"
              },
              {
                "id": "malicious-file-uploads",
                "level": 3,
                "text": "Malicious File Uploads"
              }
            ],
            "keywords": "abuse, production, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
            "label": "Preventing Abuse",
            "order": 20,
            "title": "Preventing Production API Abuse"
          }
        ]
      }
    ]
  }
]