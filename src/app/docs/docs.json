[
  {
    "slug": "Getting-Started",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    a: \"a\",\n    h3: \"h3\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {YouTube, Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  if (!YouTube) _missingMdxReference(\"YouTube\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(YouTube, {\n      id: \"In_lFhzmbME\",\n      title: \"Payload CMS Introduction - Closing the Gap Between Headless CMS and Application Frameworks\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsx(_components.p, {\n        children: \"Payload is a headless CMS and application framework. It’s meant to provide a\\nmassive boost to your development process, but importantly, stay out of your\\nway as your apps get more complex.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Out of the box, Payload gives you a lot of the things that you often need when developing a new website, web app, or native app:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A Mongo database to store your data\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A way to store, retrieve, and manipulate data of any shape via full REST and GraphQL APIs\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Authentication—complete with commonly required functionality like registration, email verification, login, & password reset\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Deep access control to your data, based on document or field-level functions\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"File storage and access control\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A beautiful admin UI that’s generated specifically to suit your data\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"What does \\\"headless\\\" mean?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A headless CMS is a system that sticks to what it's good at—managing content. It concentrates solely on granting administrators an effective way to author and maintain content, but doesn't control how and where that content is used.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this way, the CMS can ensure that its content editing experience is highly polished and effective while avoiding placing creative constraints on designers or restricting development teams. In contrast, traditional content management systems bind the presentation of your content to the storage of your content and severely limit the creativity, development and usability of the content that they manage.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"At this point this concept is \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Headless_content_management_system\",\n        children: \"widely\"\n      }), \" \", _jsx(_components.a, {\n        href: \"https://css-tricks.com/what-is-a-headless-cms/\",\n        children: \"discussed\"\n      }), \" online, and for good reason. The web has become more complicated and with complexity comes the demand for developers to better structure their code. The rise of interface libraries like React and Vue are now the de-facto standard for building modern applications and traditional content management systems are often not designed to make use of them.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Why Payload?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The team behind Payload has been building websites and apps with existing content management systems and application frameworks for over a decade. We know what works and what doesn't about each of the existing solutions, and to this day have found no silver bullet solution.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"We believe that a CMS should be:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Cost-effective and should save time and effort\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Intuitive for developers and content authors alike\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Self-hosted however and wherever the application specifies\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Designed in code but used with no coding experience\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Blazing fast\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Secure\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Fully flexible and extensible\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload is our silver bullet solution. We've blended the best parts of our experience with other CMS and app frameworks into Payload, and we finally have everything we need when we build new apps and websites:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A beautiful, dynamic, customizable admin UI\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Extensible and reusable authentication\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Content localization\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Local file storage\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Extremely flexible access control\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Field conditional logic\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Block-based layout building\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Array field type(s)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Security\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"and much more\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "What is Payload?",
        "slug": "what-is-payload",
        "label": "What is Payload?",
        "order": 10,
        "desc": "Payload is a next-gen headless Content Management System (CMS) and application framework.",
        "keywords": "documentation, getting started, guide, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "What does \"headless\" mean?",
            "level": 2,
            "id": "what-does-headless-mean"
          },
          {
            "text": "Why Payload?",
            "level": 3,
            "id": "why-payload"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    code: \"code\",\n    strong: \"strong\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload is based around a small and intuitive set of concepts. Before starting to work with Payload, it's a good idea to familiarize yourself with the following:\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"The Payload config is where you configure everything that Payload does.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the Payload config lives in the root folder of your code and is named \", _jsx(_components.code, {\n        children: \"payload.config.js\"\n      }), \" (\", _jsx(_components.code, {\n        children: \"payload.config.ts\"\n      }), \" if you're using TypeScript), but you can customize its name and where you store it. You can write full functions and even full React components right into your config.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Collections\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"A Collection represents a type of content that Payload will store and can contain many documents.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Collections define the shape of your data as well as all functionalities attached to that data. They will contain one or many \\\"documents\\\", all corresponding with the same fields and functionalities that you define.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"They can represent anything you can store in a database - for example - pages, posts, users, people, orders, categories, events, customers, transactions, and anything else your app needs.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Globals\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"A Global is a \\\"one-off\\\" piece of content that is perfect for storing navigational structures, themes, top-level meta data, and more.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Globals are in many ways similar to Collections, but there is only ever \", _jsx(_components.strong, {\n        children: \"one\"\n      }), \" instance of a Global, whereas Collections can contain many documents.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Fields\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"Fields are the building blocks of Payload. Collections and Globals both use Fields to define the shape of the data that they store.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload comes with \", _jsx(_components.a, {\n        href: \"../fields/overview\",\n        children: \"many different field types\"\n      }), \" that give you a ton of flexibility while designing your API. Each Field type has its own potential properties that allow you to customize how they work.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hooks\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"Hooks are where you can \\\"tie in\\\" to existing Payload actions to perform your own additional logic or modify how Payload operates altogether.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Hooks are an extremely powerful concept and are central to extending and customizing your app. Payload provides a wide variety of hooks which you can utilize. For example, imagine if you'd like to send an email every time a document is created in your Orders collection. To do so, you can add an \", _jsx(_components.code, {\n        children: \"afterChange\"\n      }), \" hook function to your Orders collection that receives the Order data and allows you to send an email accordingly.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are many more potential reasons to use Hooks. For more, visit the \", _jsx(_components.a, {\n        href: \"/docs/hooks/overview\",\n        children: \"Hooks documentation\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Access Control\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"Access Control refers to Payload's system of defining who can do what to your API.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Access Control is extremely powerful but easy and intuitive to manage. You can easily define your own full-blown RBAC (role-based access control) or any other access control pattern that your scenario requires. No conventions or structure is forced on you whatsoever.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more, visit the \", _jsx(_components.a, {\n        href: \"/docs/access-control/overview\",\n        children: \"Access Control documentation\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Depth\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"\\\"Depth\\\" gives you control over how many levels down related documents should be automatically populated when retrieved.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can specify population \", _jsx(_components.code, {\n        children: \"depth\"\n      }), \" via query parameter in the REST API and by an option in the local API. \", _jsx(_components.em, {\n        children: \"Depth has no effect in the GraphQL API, because there, depth is based on the shape of your queries.\"\n      }), \"\\nIt is also possible to limit the depth for specific \", _jsx(_components.code, {\n        children: \"relation\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" fields using the \", _jsx(_components.code, {\n        children: \"maxDepth\"\n      }), \" property in your configuration.\\n\", _jsx(_components.strong, {\n        children: \"For example, let's look at the following Collections:\"\n      }), \" \", _jsx(_components.code, {\n        children: \"departments\"\n      }), \", \", _jsx(_components.code, {\n        children: \"users\"\n      }), \", \", _jsx(_components.code, {\n        children: \"posts\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"// type: 'relationship' fields are equal to 1 depth level\\n\\n{\\n\\tslug: 'posts',\\n\\tfields: [\\n\\t\\t{\\n\\t\\t\\tname: 'title',\\n\\t\\t\\ttype: 'text',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'author',\\n\\t\\t\\tlabel: 'Post Author',\\n\\t\\t\\ttype: 'relationship',\\n\\t\\t\\trelationTo: 'users',\\n\\t\\t}\\n\\t]\\n}\\n\\n{\\n\\tslug: 'users',\\n\\tfields: [\\n\\t\\t{\\n\\t\\t\\tname: 'email',\\n\\t\\t\\ttype: 'email',\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'department'\\n\\t\\t\\ttype: 'relationship',\\n\\t\\t\\trelationTo: 'departments'\\n\\t\\t}\\n\\t]\\n}\\n\\n{\\n\\tslug: 'departments',\\n\\tfields: [\\n\\t\\t{\\n\\t\\t\\tname: 'name'\\n\\t\\t\\ttype: 'text',\\n\\t\\t}\\n\\t]\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you were to query the Posts endpoint at, say, \", _jsx(_components.code, {\n        children: \"http://localhost:3000/api/posts?depth=1\"\n      }), \", you will retrieve Posts with populations one level deep. A returned result may look like the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"// ?depth=1\\n\\n{\\n  id: '5ae8f9bde69e394e717c8832',\\n  title: 'This post sucks',\\n  author: {\\n    id: '5f7dd05cd50d4005f8bcab17',\\n    email: 'spiderman@superheroes.gov',\\n    department: '5e3ca05cd50d4005f8bdab15'\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Notice how the \", _jsx(_components.code, {\n        children: \"user.author\"\n      }), \" is fully populated, but \", _jsx(_components.code, {\n        children: \"user.author.department\"\n      }), \" is left as a document ID? That's because the User collection counted as the first level of \", _jsx(_components.code, {\n        children: \"depth\"\n      }), \" and got populated—but then prevented any further populations from taking place.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To populate \", _jsx(_components.code, {\n        children: \"user.author.department\"\n      }), \" in it's entirety you could specify \", _jsx(_components.code, {\n        children: \"?depth=2\"\n      }), \" or \", _jsx(_components.em, {\n        children: \"higher\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"// ?depth=2\\n\\n{\\n  id: '5ae8f9bde69e394e717c8832',\\n  title: 'This post sucks',\\n  author: {\\n    id: '5f7dd05cd50d4005f8bcab17',\\n    email: 'spiderman@superheroes.gov',\\n    department: {\\n      id: '5e3ca05cd50d4005f8bdab15',\\n      name: 'Marvel'\\n    }\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nWhen access control on collections prevents relationship fields from populating, the API response will contain the relationship id instead of the full document.\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Payload Concepts",
        "slug": "concepts",
        "label": "Concepts",
        "order": 20,
        "desc": "Payload is based around a small and intuitive set of concepts. Key concepts include collections, globals, fields and more.",
        "keywords": "documentation, getting started, guide, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Collections",
            "level": 3,
            "id": "collections"
          },
          {
            "text": "Globals",
            "level": 3,
            "id": "globals"
          },
          {
            "text": "Fields",
            "level": 3,
            "id": "fields"
          },
          {
            "text": "Hooks",
            "level": 3,
            "id": "hooks"
          },
          {
            "text": "Access Control",
            "level": 3,
            "id": "access-control"
          },
          {
            "text": "Depth",
            "level": 3,
            "id": "depth"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h4: \"h4\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    em: \"em\",\n    h3: \"h3\",\n    ol: \"ol\",\n    h5: \"h5\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h4, {\n      children: \"Software Requirements\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload requires the following software:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Yarn or NPM\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"NodeJS version 10+\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A Mongo Database\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsx(_components.p, {\n        children: \"Before proceeding any further, please ensure that you have the above requirements met.\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Quickstart with create-payload-app\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To quickly scaffold a new Payload app in the fastest way possible, you can use \", _jsx(_components.a, {\n        href: \"https://npmjs.com/package/create-payload-app\",\n        children: \"create-payload-app\"\n      }), \". To do so, run the following command:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"npx create-payload-app\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then just follow the prompts! You can choose between a TypeScript project, which is fully supported by Payload, or a JavaScript project. You'll get set up with a new folder and a functioning Payload app inside.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"From scratch\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Adding Payload to either a new or existing app is super straightforward. To add to an existing Node + Express app, just run \", _jsx(_components.code, {\n        children: \"npm install --save --legacy-peer-deps payload\"\n      }), \". Or, to start a new project from scratch, run \", _jsx(_components.code, {\n        children: \"npm init\"\n      }), \" and then \", _jsx(_components.code, {\n        children: \"npm install --save --legacy-peer-deps payload express\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"From there, the first step is writing a baseline config. Create a new \", _jsx(_components.code, {\n        children: \"payload.config.js\"\n      }), \" in the root of your project. The simplest config contains the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"import { buildConfig } from 'payload/config';\\n\\nexport default buildConfig({\\n  // By default, Payload will boot up normally\\n  // and you will be provided with a base `User` collection.\\n  // But, here is where you define how you'd like Payload to work!\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Write the above code into your newly created config file. This baseline config will automatically provide you with a default \", _jsx(_components.code, {\n        children: \"User\"\n      }), \" collection. For more information about users and authentication, including how to provide your own user config, jump to the \", _jsx(_components.a, {\n        href: \"/docs/authentication/config\",\n        children: \"Authentication\"\n      }), \" section.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Although this is just the bare minimum config, there are \", _jsx(_components.em, {\n        children: \"many\"\n      }), \" more options that you can control here. To reference the full config and all of its options, \", _jsx(_components.a, {\n        href: \"/docs/configuration/overview\",\n        children: \"click here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Server\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now that you've got a baseline Payload config, it's time to initialize Payload. It requires an Express server that you provide, so if you're not familiar with how to set up a baseline Express server, please read up on exactly what Express is and why to use it. Express' own \", _jsx(_components.a, {\n        href: \"https://expressjs.com/en/starter/hello-world.html\",\n        children: \"Documentation\"\n      }), \" is a good place to start. Otherwise, follow along below for how to build your own Express server to use with Payload.\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Run \", _jsx(_components.code, {\n          children: \"npm install --save --legacy-peer-deps express\"\n        }), \" if you have not done so already\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Create a new \", _jsx(_components.code, {\n          children: \"server.js\"\n        }), \" file in the root folder of your app\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Add the following code to \", _jsx(_components.code, {\n          children: \"server.js\"\n        }), \":\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const express = require('express');\\n\\nconst app = express();\\n\\napp.listen(3000, async () => {\\n\\tconsole.log('Express is now listening for incoming connections on port 3000.')\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This server doesn't do anything just yet. But, after you have this in place, we can initialize Payload via its \", _jsx(_components.code, {\n        children: \"init()\"\n      }), \" method, which accepts a small set of arguments to tell it how to operate. For a full list of \", _jsx(_components.code, {\n        children: \"init\"\n      }), \" arguments, please consult the \", _jsx(_components.a, {\n        href: \"/docs/configuration/overview#init\",\n        children: \"main configuration\"\n      }), \" docs.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To initialize Payload, update your \", _jsx(_components.code, {\n        children: \"server.js\"\n      }), \" file to reflect the following code:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const express = require('express');\\nconst payload = require('payload');\\n\\nconst app = express();\\n\\npayload.init({\\n  secret: 'SECRET_KEY',\\n  mongoURL: 'mongodb://localhost/payload',\\n  express: app,\\n})\\n\\napp.listen(3000, async () => {\\n\\tconsole.log('Express is now listening for incoming connections on port 3000.')\\n});\\n\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is a list of all properties available to pass through \", _jsx(_components.code, {\n        children: \"payload.init\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: _jsx(_components.code, {\n        children: \"express\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Required\"\n      }), \". This is your Express app as shown above. Payload will tie into your existing \", _jsx(_components.code, {\n        children: \"app\"\n      }), \" and scope all of its functionalities to sub-routers. By default, Payload will add an \", _jsx(_components.code, {\n        children: \"/admin\"\n      }), \" router and an \", _jsx(_components.code, {\n        children: \"/api\"\n      }), \" router, but you can customize these paths.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: _jsx(_components.code, {\n        children: \"secret\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Required\"\n      }), \". This is a secure string that will be used to authenticate with Payload. It can be random but should be at least 14 characters and be very difficult to guess. Often, it's smart to store this value in an \", _jsx(_components.code, {\n        children: \"env\"\n      }), \" and set different values for each of your environments (local, stage, prod, etc). The \", _jsx(_components.code, {\n        children: \"dotenv\"\n      }), \" package is very handy and works well alongside of Payload.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: _jsx(_components.code, {\n        children: \"mongoURL\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Required\"\n      }), \". This is a fully qualified MongoDB connection string that points to your Mongo database. If you don't have Mongo installed locally, you can \", _jsx(_components.a, {\n        href: \"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\",\n        children: \"follow these steps for Mac OSX\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-windows/\",\n        children: \"these steps\"\n      }), \" for Windows 10. If you want to use a local database and you know you have MongoDB installed locally, a typical connection string will look like this:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"mongodb://localhost/payload\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In contrast to running Mongo locally, a popular option is to sign up for a free \", _jsx(_components.a, {\n        href: \"https://www.mongodb.com/cloud/atlas\",\n        children: \"MongoDB Atlas account\"\n      }), \", which is a fully hosted and cloud-based installation of Mongo that you don't need to ever worry about.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: _jsx(_components.code, {\n        children: \"mongoOptions\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Customize Mongo connection options. Payload will connect to your MongoDB database using default options which you can override and extend to include all the \", _jsx(_components.a, {\n        href: \"https://mongoosejs.com/docs/connections.html#options\",\n        children: \"options\"\n      }), \" available to mongoose.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: _jsx(_components.code, {\n        children: \"email\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An object used to configure SMTP. \", _jsx(_components.a, {\n        href: \"/docs/email/overview\",\n        children: \"Read more\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: _jsx(_components.code, {\n        children: \"local\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A boolean that when set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" tells Payload to start in local-only mode which will bypass setting up API routes. When set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", \", _jsx(_components.code, {\n        children: \"express\"\n      }), \" is not required. This is useful when running scripts that need to use Payload's \", _jsx(_components.a, {\n        href: \"/docs/local-api/overview\",\n        children: \"local-api\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: _jsx(_components.code, {\n        children: \"loggerOptions\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Specify options for the built-in Pino logger that Payload uses for internal logging. See \", _jsx(_components.a, {\n        href: \"https://getpino.io/#/docs/api?id=options\",\n        children: \"Pino Docs\"\n      }), \" for more info on what is available.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: _jsx(_components.code, {\n        children: \"onInit\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A function that is called immediately following startup that receives the Payload instance as it's only argument.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Test it out\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"After you've gotten this far, it's time to boot up Payload. At the command line, run \", _jsx(_components.code, {\n        children: \"npm install\"\n      }), \" and then \", _jsx(_components.code, {\n        children: \"node server.js\"\n      }), \" in your application's folder to start up your app and initialize Payload.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"After it starts, you can go to \", _jsx(_components.code, {\n        children: \"http://localhost:3000/admin\"\n      }), \" to create your first Payload user!\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Docker\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Looking to deploy Payload with Docker? New projects with \", _jsx(_components.code, {\n        children: \"create-payload-app\"\n      }), \" come with a Dockerfile and docker-compose.yml file ready to go. Examples of these files can be seen in our \", _jsx(_components.a, {\n        href: \"/docs/deployment#Docker\",\n        children: \"Deployment docs\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Installation",
        "slug": "installation",
        "label": "Installation",
        "order": 30,
        "desc": "To quickly get started with Payload, simply run npx create-payload-app or install from scratch.",
        "keywords": "documentation, getting started, guide, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Quickstart with create-payload-app",
            "level": 2,
            "id": "quickstart-with-create-payload-app"
          },
          {
            "text": "From scratch",
            "level": 2,
            "id": "from-scratch"
          },
          {
            "text": "Server",
            "level": 3,
            "id": "server"
          },
          {
            "text": "Test it out",
            "level": 3,
            "id": "test-it-out"
          },
          {
            "text": "Docker",
            "level": 3,
            "id": "docker"
          }
        ]
      }
    ]
  },
  {
    "slug": "Configuration",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    strong: \"strong\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    code: \"code\",\n    a: \"a\",\n    h4: \"h4\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Payload is a \", _jsx(_components.em, {\n        children: \"config-based\"\n      }), \", code-first CMS and application framework. The Payload config is central to everything that Payload does. It scaffolds the data that Payload stores as well as maintains custom React components, hook logic, custom validations, and much more. The config itself and all of its dependencies are run through Babel, so you can take full advantage of newer JavaScript features and even directly import React components containing JSX.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Also, because the Payload source code is fully written in TypeScript, its configs are strongly typed—meaning that even if you aren't using TypeScript to build your project, your IDE (such as VSCode) may still provide helpful information like type-ahead suggestions while you write your config.\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important:\"\n        }), _jsx(\"br\", {}), \"This file is included in the Payload admin bundle, so make sure you do not embed any sensitive information.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"serverURL\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A string used to define the absolute URL of your app including the protocol, for example \", _jsx(_components.code, {\n              children: \"https://example.com\"\n            }), \". No paths allowed, only protocol, domain and (optionally) port\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"collections\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of all Collections that Payload will manage. To read more about how to define your collection configs, \", _jsx(_components.a, {\n              href: \"/docs/configuration/collections\",\n              children: \"click here\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"cors\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Either a whitelist array of URLS to allow CORS requests from, or a wildcard string (\", _jsx(_components.code, {\n              children: \"'*'\"\n            }), \") to accept incoming requests from any domain.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"globals\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of all Globals that Payload will manage. For more on Globals and their configs, \", _jsx(_components.a, {\n              href: \"/docs/configuration/globals\",\n              children: \"click here\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"admin\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Base Payload admin configuration. Specify custom components, control metadata, set the Admin user collection, and \", _jsx(_components.a, {\n              href: \"/docs/admin/overview#admin-options\",\n              children: \"more\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"localization\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Opt-in and control how Payload handles the translation of your content into multiple locales. \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"graphQL\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Manage GraphQL-specific functionality here. Define your own queries and mutations, manage query complexity limits, and \", _jsx(_components.a, {\n              href: \"/docs/graphql/overview#graphql-options\",\n              children: \"more\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"cookiePrefix\"\n            })\n          }), _jsx(_components.td, {\n            children: \"A string that will be prefixed to all cookies that Payload sets.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"csrf\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A whitelist array of URLs to allow Payload cookies to be accepted from as a form of CSRF protection. \", _jsx(_components.a, {\n              href: \"/docs/authentication/overview#csrf-protection\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultDepth\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If a user does not specify \", _jsx(_components.code, {\n              children: \"depth\"\n            }), \" while requesting a resource, this depth will be used. \", _jsx(_components.a, {\n              href: \"/docs/getting-started/concepts#depth\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"maxDepth\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The maximum allowed depth to be permitted application-wide. This setting helps prevent against malicious queries. Defaults to \", _jsx(_components.code, {\n              children: \"10\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"indexSortableFields\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Automatically index all sortable top-level fields in the database to improve sort performance and add database compatibility for Azure Cosmos and similar.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"upload\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Base Payload upload configuration. \", _jsx(_components.a, {\n              href: \"/docs/upload/overview#payload-wide-upload-options\",\n              children: \"More\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"routes\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Control the routing structure that Payload binds itself to. Specify \", _jsx(_components.code, {\n              children: \"admin\"\n            }), \", \", _jsx(_components.code, {\n              children: \"api\"\n            }), \", \", _jsx(_components.code, {\n              children: \"graphQL\"\n            }), \", and \", _jsx(_components.code, {\n              children: \"graphQLPlayground\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"email\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Base email settings to allow Payload to generate email such as Forgot Password requests and other requirements. \", _jsx(_components.a, {\n              href: \"/docs/email/overview#configuration\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"express\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Express-specific middleware options such as compression and JSON parsing. \", _jsx(_components.a, {\n              href: \"/docs/configuration/express\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"debug\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Enable to expose more detailed error information.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"telemetry\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Disable Payload telemetry by passing \", _jsx(_components.code, {\n              children: \"false\"\n            }), \". \", _jsx(_components.a, {\n              href: \"/docs/configuration/overview#telemetry\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"rateLimit\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Control IP-based rate limiting for all Payload resources. Used to prevent DDoS attacks and \", _jsx(_components.a, {\n              href: \"/docs/production/preventing-abuse#rate-limiting-requests\",\n              children: \"more\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"hooks\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Tap into Payload-wide hooks. \", _jsx(_components.a, {\n              href: \"/docs/hooks/overview\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"plugins\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of Payload plugins. \", _jsx(_components.a, {\n              href: \"/docs/plugins/overview\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"endpoints\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An array of custom API endpoints added to the Payload router. \", _jsx(_components.a, {\n              href: \"/docs/rest-api/overview#custom-endpoints\",\n              children: \"More\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Simple example\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload/config';\\n\\nexport default buildConfig({\\n\\tcollections: [\\n\\t\\t{\\n\\t\\t\\tslug: 'pages',\\n\\t\\t\\tfields: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tname: 'title',\\n\\t\\t\\t\\t\\ttype: 'text',\\n\\t\\t\\t\\t\\trequired: true,\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tname: 'content',\\n\\t\\t\\t\\t\\ttype: 'richText',\\n\\t\\t\\t\\t\\trequired: true,\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t}\\n\\t],\\n\\tglobals: [\\n\\t\\t{\\n\\t\\t\\tslug: 'header',\\n\\t\\t\\tfields: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tname: 'nav',\\n\\t\\t\\t\\t\\ttype: 'array',\\n\\t\\t\\t\\t\\tfields: [\\n\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\tname: 'page',\\n\\t\\t\\t\\t\\t\\t\\ttype: 'relationship',\\n\\t\\t\\t\\t\\t\\t\\trelationTo: 'pages',\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t}\\n\\t]\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Full example config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can see a full \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/public-demo/blob/master/src/payload.config.ts\",\n        children: \"example config\"\n      }), \" in the Public Demo source code on GitHub.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Using environment variables in your config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"We suggest using the \", _jsx(_components.code, {\n        children: \"dotenv\"\n      }), \" package to handle environment variables alongside of Payload. All that's necessary to do is to require the package as high up in your application as possible (for example, at the top of your \", _jsx(_components.code, {\n        children: \"server.js\"\n      }), \" file), and ensure that it can find an \", _jsx(_components.code, {\n        children: \".env\"\n      }), \" file that you create.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Add this line to the top of your server:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"require('dotenv').config()\\n// ...\\n// the rest of your `server.js` file goes here\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [\"Here is an example project structure w/ \", _jsx(_components.code, {\n          children: \"dotenv\"\n        }), \" and an \", _jsx(_components.code, {\n          children: \".env\"\n        }), \" file:\"]\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"project-name\\n---- .env\\n---- package.json\\n---- payload.config.js\\n---- server.js\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important:\"\n        }), _jsx(\"br\", {}), \"\\nIf you use an environment variable to configure any properties that are required for the Admin panel to function (ex. serverURL or any routes), you need to make sure that your Admin panel code can access it. \", _jsx(\"a\", {\n          href: \"/docs/admin/webpack#admin-environment-vars\",\n          children: \"Click here\"\n        }), \" for more info.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Customizing & overriding the config location\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the Payload config must be in the root of your current working directory and named either \", _jsx(_components.code, {\n        children: \"payload.config.js\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"payload.config.ts\"\n      }), \" if you're using TypeScript.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"But, you can specify where your Payload config is located as well as what it's named by using the environment variable \", _jsx(_components.code, {\n        children: \"PAYLOAD_CONFIG_PATH\"\n      }), \". The path you provide via this environment variable can either be absolute or relative to your current working directory.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example in package.json:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"{\\n\\t\\\"scripts\\\": {\\n\\t\\t\\\"dev\\\": \\\"PAYLOAD_CONFIG_PATH=path/to/custom-config.js node server.js\\\",\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Developing within the Config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Payload config itself, as well as all files that it requires or imports, are run through Babel. TypeScript and all common ES6 features are fully supported. To see the Babel config that is used to parse Payload configs, check out the Payload source code \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/blob/master/src/babel.config.js\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload comes with \", _jsx(_components.code, {\n        children: \"isomorphic-fetch\"\n      }), \" installed which means that even in Node, you can use the \", _jsx(_components.code, {\n        children: \"fetch\"\n      }), \" API just as you would within the browser. No need to import \", _jsx(_components.code, {\n        children: \"axios\"\n      }), \" or similar, unless you want to!\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Payload Config and Babel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The entire Payload config is transpiled automatically by Payload via \", _jsx(_components.code, {\n        children: \"babel\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If for any reason you need to re-use the built-in Payload \", _jsx(_components.code, {\n        children: \"babel.config.js\"\n      }), \", you can do so by importing it as follows:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"import { config } from 'payload/babel';\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nBecause the Payload config is transpiled internally, if you want to import it to share or reuse any of its properties within your own Node server's code, you need to make sure that \", _jsx(\"em\", {\n          children: \"you manually transpile it\"\n        }), \" using \", _jsx(\"strong\", {\n          children: \"babel-register\"\n        }), \" or similar. For example, if you try to import your config directly into your server, your Node process will likely crash because the Payload config supports React components, TypeScript, and new ES6+ features.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"However, you can share code, like for example your config's \", _jsx(_components.code, {\n        children: \"serverURL\"\n      }), \" property by \\\"hoisting\\\" your shared properties above your config and writing any \\\"shared\\\" code in a module that is compatible with your Node environment.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, to share your \", _jsx(_components.code, {\n        children: \"serverURL\"\n      }), \", you could create a file like the following:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"serverURL.js\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const serverURL = 'http://localhost:3000';\\n\\nmodule.exports = serverURL;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Then, you could import this file into both your Payload config and your server, in an effort to avoid importing your full Payload config directly into your server.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can import config types as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Config } from 'payload/config';\\n\\n// This is the type used for an incoming Payload config.\\n// Only the bare minimum properties are marked as required.\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { SanitizedConfig } from 'payload/config';\\n\\n// This is the type used after an incoming Payload config is fully sanitized.\\n// Generally, this is only used internally by Payload.\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Telemetry\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload collects \", _jsx(_components.strong, {\n        children: \"completely anonymous\"\n      }), \" telemetry data about general usage. This data is super important to us and helps us accurately understand how we're growing and what we can do to build the software into everything that it can possibly be. The telemetry that we collect also help us demonstrate our growth in an accurate manner, which helps us as we seek investment to build and scale our team. If we can accurately demonstrate our growth, we can more effectively continue to support Payload as free and open-source software. To opt out of telemetry, you can pass \", _jsx(_components.code, {\n        children: \"telemetry: false\"\n      }), \" within your Payload config.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more information about what we track, take a look at our \", _jsx(_components.a, {\n        href: \"/privacy\",\n        children: \"privacy policy\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "The Payload Config",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "The Payload config is central to everything that Payload does, from adding custom React components, to modifying collections, controlling localization and much more.",
        "keywords": "overview, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Options",
            "level": 2,
            "id": "options"
          },
          {
            "text": "Using environment variables in your config",
            "level": 3,
            "id": "using-environment-variables-in-your-config"
          },
          {
            "text": "Customizing & overriding the config location",
            "level": 3,
            "id": "customizing-and-overriding-the-config-location"
          },
          {
            "text": "Developing within the Config",
            "level": 3,
            "id": "developing-within-the-config"
          },
          {
            "text": "TypeScript",
            "level": 3,
            "id": "typescript"
          },
          {
            "text": "Telemetry",
            "level": 3,
            "id": "telemetry"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    h4: \"h4\",\n    pre: \"pre\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload Collections are defined through configs of their own, and you can define as many as your application needs. Each Collection will scaffold a MongoDB collection automatically based on fields that you define.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It's often best practice to write your Collections in separate files and then import them into the main Payload config.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"slug\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Unique, URL-friendly string that will act as an identifier for this Collection.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Array of field types that will determine the structure and functionality of the data stored within this Collection. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview\",\n              children: \"Click here\"\n            }), \" for a full list of field types as well as how to configure them.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"labels\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Singular and plural labels for use in identifying this Collection throughout Payload. Auto-generated from slug if not defined.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-options\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Entry points to \\\"tie in\\\" to Collection actions at specific points. \", _jsx(_components.a, {\n              href: \"/docs/hooks/overview#collection-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide access control functions to define exactly who should be able to do what with Documents in this Collection. \", _jsx(_components.a, {\n              href: \"/docs/access-control/overview/#collections\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"auth\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Specify options if you would like this Collection to feature authentication. For more, consult the \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \" documentation.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"upload\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Specify options if you would like this Collection to support file uploads. For more, consult the \", _jsx(_components.a, {\n              href: \"/docs/upload/overview\",\n              children: \"Uploads\"\n            }), \" documentation.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"timestamps\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to false to disable documents' automatically generated \", _jsx(_components.code, {\n              children: \"createdAt\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"updatedAt\"\n            }), \" timestamps.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"versions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to true to enable default options, or configure with object properties. \", _jsx(_components.a, {\n              href: \"/docs/versions/overview#collection-config\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"endpoints\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Add custom routes to the REST API. \", _jsx(_components.a, {\n              href: \"/docs/rest-api/overview#custom-endpoints\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"graphQL\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object with \", _jsx(_components.code, {\n              children: \"singularName\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"pluralName\"\n            }), \" strings used in schema generation. Auto-generated from slug if not defined.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"typescript\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object with property \", _jsx(_components.code, {\n              children: \"interface\"\n            }), \" as the text used in schema generation. Auto-generated from slug if not defined.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Simple collection example\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Orders: CollectionConfig = {\\n\\tslug: 'orders',\\n\\tfields: [\\n\\t\\t{\\n\\t\\t\\tname: 'total',\\n\\t\\t\\ttype: 'number',\\n\\t\\t\\trequired: true,\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'placedBy',\\n\\t\\t\\ttype: 'relationship',\\n\\t\\t\\trelationTo: 'customers',\\n\\t\\t\\trequired: true,\\n\\t\\t}\\n\\t]\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"More collection config examples\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find an assortment of \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/public-demo/tree/master/src/collections\",\n        children: \"example collection configs\"\n      }), \" in the Public Demo source code on GitHub.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can customize the way that the Admin panel behaves on a collection-by-collection basis by defining the \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" property on a collection's config.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"group\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a label for grouping collection links together in the navigation.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"hooks\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific hooks for this collection. \", _jsx(_components.a, {\n              href: \"#admin-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"useAsTitle\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Specify a top-level field to use for a document title throughout the Admin panel. If no field is defined, the ID of the document is used as the title.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"description\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Text or React component to display below the Collection label in the List view to give editors more information.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"defaultColumns\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Array of field names that correspond to which columns to show by default in this collection's List view.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"disableDuplicate \"\n            })\n          }), _jsx(_components.td, {\n            children: \"Disables the \\\"Duplicate\\\" button while editing documents within this collection.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"enableRichTextRelationship\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.a, {\n              href: \"/docs/fields/rich-text\",\n              children: \"Rich Text\"\n            }), \" field features a \", _jsx(_components.code, {\n              children: \"Relationship\"\n            }), \" element which allows for users to automatically reference related documents within their rich text. Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" by default.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"preview\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Function to generate preview URLS within the Admin panel that can point to your app. \", _jsx(_components.a, {\n              href: \"#preview\",\n              children: \"More\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"components\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Swap in your own React components to be used within this collection. \", _jsx(_components.a, {\n              href: \"/docs/admin/components#collections\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"listSearchableFields\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Specify which fields should be searched in the List search view. \", _jsx(_components.a, {\n              href: \"#list-searchable-fields\",\n              children: \"More\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Preview\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Collection \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" options can accept a \", _jsx(_components.code, {\n        children: \"preview\"\n      }), \" function that will be used to generate a link pointing to the frontend of your app to preview data.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the function is specified, a Preview button will automatically appear in the corresponding collection's Edit view. Clicking the Preview button will link to the URL that is generated by the function.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"The preview function accepts two arguments:\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"The document being edited\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"An \", _jsx(_components.code, {\n          children: \"options\"\n        }), \" object, containing \", _jsx(_components.code, {\n          children: \"locale\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"token\"\n        }), \" properties. The \", _jsx(_components.code, {\n          children: \"token\"\n        }), \" is the currently logged-in user's JWT.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example collection with preview function:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Posts: CollectionConfig = {\\n\\tslug: 'posts',\\n\\tfields: [\\n\\t\\t{\\n\\t\\t\\tname: 'slug',\\n\\t\\t\\ttype: 'text',\\n\\t\\t\\trequired: true,\\n\\t\\t},\\n\\t],\\n\\tadmin: {\\n\\t\\tpreview: (doc, { locale }) => {\\n\\t\\t\\tif (doc?.slug) {\\n\\t\\t\\t\\treturn `https://bigbird.com/preview/posts/${doc.slug}?locale=${locale}`;\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn null;\\n\\t\\t},\\n\\t},\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Access control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can specify extremely granular access control (what users can do with documents in a collection) on a collection by collection basis. To learn more, go to the \", _jsx(_components.a, {\n        href: \"/docs/access-control/overview\",\n        children: \"Access Control\"\n      }), \" docs.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hooks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Hooks are a powerful way to extend collection functionality and execute your own logic, and can be defined on a collection by collection basis. To learn more, go to the \", _jsx(_components.a, {\n        href: \"/docs/hooks/overview\",\n        children: \"Hooks\"\n      }), \" documentation.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field types\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Collections support all field types that Payload has to offer—including simple fields like text and checkboxes all the way to more complicated layout-building field groups like Blocks. \", _jsx(_components.a, {\n        href: \"/docs/fields/overview\",\n        children: \"Click here\"\n      }), \" to learn more about field types.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"List Searchable Fields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the List view, there is a \\\"search\\\" box that allows you to quickly find a document with a search. By default, it searches on the ID field. If you have \", _jsx(_components.code, {\n        children: \"admin.useAsTitle\"\n      }), \" defined, the list search will use that field. However, you can define more than one field to search to make it easier on your admin editors to find the data they need.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, let's say you have a Posts collection with \", _jsx(_components.code, {\n        children: \"title\"\n      }), \", \", _jsx(_components.code, {\n        children: \"metaDescription\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"tags\"\n      }), \" fields - and you want all three of those fields to be searchable in the List view. You can simply add \", _jsx(_components.code, {\n        children: \"admin.listSearchableFields: ['title', 'metaDescription', 'tags']\"\n      }), \" - and the admin UI will automatically search on those three fields plus the ID field.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nIf you are adding \", _jsx(\"strong\", {\n          children: \"listSearchableFields\"\n        }), \", make sure you index each of these fields so your admin queries can remain performant.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin Hooks\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to collection hooks themselves, Payload provides for admin UI-specific hooks that you can leverage.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"beforeDuplicate\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"beforeDuplicate\"\n      }), \" hook is an async function that accepts an object containing the data to duplicate, as well as the locale of the doc to duplicate. Within this hook, you can modify the data to be duplicated, which is useful in cases where you have unique fields that need to be incremented or similar, as well as if you want to automatically modify a document's \", _jsx(_components.code, {\n        children: \"title\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { BeforeDuplicate, CollectionConfig } from 'payload/types';\\n// Your auto-generated Page type\\nimport { Page } from '../payload-types.ts';\\n\\nconst beforeDuplicate: BeforeDuplicate<Page> = ({ data }) => {\\n  return {\\n    ...data,\\n    title: `${data.title} Copy`,\\n    uniqueField: data.uniqueField ? `${data.uniqueField}-copy` : '',\\n  };\\n};\\n\\nexport const Page: CollectionConfig = {\\n  slug: 'pages',\\n  admin: {\\n    hooks: {\\n      beforeDuplicate,\\n    }\\n  },\\n  fields: [\\n    {\\n      name: 'title',\\n      type: 'text',\\n    },\\n    {\\n      name: 'uniqueField',\\n      type: 'text',\\n      unique: true,\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can import collection types as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\n// This is the type used for incoming collection configs.\\n// Only the bare minimum properties are marked as required.\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { SanitizedCollectionConfig } from 'payload/types';\\n\\n// This is the type used after an incoming collection config is fully sanitized.\\n// Generally, this is only used internally by Payload.\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Collection Configs",
        "slug": "collections",
        "label": "Collections",
        "order": 20,
        "desc": "Structure your Collections for your needs by defining fields, adding slugs and labels, establishing access control, tying in hooks, setting timestamps and more.",
        "keywords": "collections, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Options",
            "level": 2,
            "id": "options"
          },
          {
            "text": "Admin options",
            "level": 3,
            "id": "admin-options"
          },
          {
            "text": "Preview",
            "level": 3,
            "id": "preview"
          },
          {
            "text": "Access control",
            "level": 3,
            "id": "access-control"
          },
          {
            "text": "Hooks",
            "level": 3,
            "id": "hooks"
          },
          {
            "text": "Field types",
            "level": 3,
            "id": "field-types"
          },
          {
            "text": "List Searchable Fields",
            "level": 3,
            "id": "list-searchable-fields"
          },
          {
            "text": "Admin Hooks",
            "level": 3,
            "id": "admin-hooks"
          },
          {
            "text": "TypeScript",
            "level": 3,
            "id": "typescript"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    em: \"em\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    h4: \"h4\",\n    pre: \"pre\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Global configs are in many ways similar to \", _jsx(_components.a, {\n        href: \"/docs/configuration/collections\",\n        children: \"Collections\"\n      }), \". The big difference is that Collections will potentially contain \", _jsx(_components.em, {\n        children: \"many\"\n      }), \" documents, while a Global is a \\\"one-off\\\". Globals are perfect for things like header nav, site-wide banner alerts, app-wide localized strings, and other \\\"global\\\" data that your site or app might rely on.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As with Collection configs, it's often best practice to write your Globals in separate files and then import them into the main Payload config.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"slug\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Unique, URL-friendly string that will act as an identifier for this Global.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Array of field types that will determine the structure and functionality of the data stored within this Global. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview\",\n              children: \"Click here\"\n            }), \" for a full list of field types as well as how to configure them.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text for the name in the Admin panel or an object with keys for each language. Auto-generated from slug if not defined.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"description\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text or React component to display below the Global header to give editors more information.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"/docs/configuration/globals#admin-options\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Entry points to \\\"tie in\\\" to collection actions at specific points. \", _jsx(_components.a, {\n              href: \"/docs/hooks/overview#global-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide access control functions to define exactly who should be able to do what with this Global. \", _jsx(_components.a, {\n              href: \"/docs/access-control/overview/#globals\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"versions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to true to enable default options, or configure with object properties. \", _jsx(_components.a, {\n              href: \"/docs/versions/overview#globals-config\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"endpoints\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Add custom routes to the REST API. \", _jsx(_components.a, {\n              href: \"/docs/rest-api/overview#custom-endpoints\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"graphQL.name\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used in schema generation. Auto-generated from slug if not defined.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"typescript\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object with property \", _jsx(_components.code, {\n              children: \"interface\"\n            }), \" as the text used in schema generation. Auto-generated from slug if not defined.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Simple Global example\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalConfig } from \\\"payload/types\\\";\\n\\nconst Nav: GlobalConfig = {\\n  slug: \\\"nav\\\",\\n  fields: [\\n    {\\n      name: \\\"items\\\",\\n      type: \\\"array\\\",\\n      required: true,\\n      maxRows: 8,\\n      fields: [\\n        {\\n          name: \\\"page\\\",\\n          type: \\\"relationship\\\",\\n          relationTo: \\\"pages\\\", // \\\"pages\\\" is the slug of an existing collection\\n          required: true,\\n        },\\n      ],\\n    },\\n  ],\\n};\\n\\nexport default Nav;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Global config example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find an \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/public-demo/blob/master/src/globals/MainMenu.ts\",\n        children: \"example Global config\"\n      }), \" in the Public Demo source code on GitHub.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can customize the way that the Admin panel behaves on a Global-by-Global basis by defining the \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" property on a Global's config.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"components\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Swap in your own React components to be used within this Global. \", _jsx(_components.a, {\n              href: \"/docs/admin/components#globals\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"preview\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Function to generate a preview URL within the Admin panel for this global that can point to your app. \", _jsx(_components.a, {\n              href: \"#preview\",\n              children: \"More\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Preview\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Global \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" options can accept a \", _jsx(_components.code, {\n        children: \"preview\"\n      }), \" function that will be used to generate a link pointing to the frontend of your app to preview data.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the function is specified, a Preview button will automatically appear in the corresponding global's Edit view. Clicking the Preview button will link to the URL that is generated by the function.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"The preview function accepts two arguments:\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"The document being edited\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"An \", _jsx(_components.code, {\n          children: \"options\"\n        }), \" object, containing \", _jsx(_components.code, {\n          children: \"locale\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"token\"\n        }), \" properties. The \", _jsx(_components.code, {\n          children: \"token\"\n        }), \" is the currently logged-in user's JWT.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example global with preview function:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalConfig } from \\\"payload/types\\\";\\n\\nconst MyGlobal: GlobalConfig = {\\n  slug: \\\"my-global\\\",\\n  fields: [\\n    {\\n      name: \\\"slug\\\",\\n      type: \\\"text\\\",\\n      required: true,\\n    },\\n  ],\\n  admin: {\\n    preview: (doc, { locale }) => {\\n      if (doc?.slug) {\\n        return `https://bigbird.com/preview/${doc.slug}?locale=${locale}`;\\n      }\\n\\n      return null;\\n    },\\n  },\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Access control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As with Collections, you can specify extremely granular access control (what users can do with this Global) on a Global-by-Global basis. However, Globals only have \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"read\"\n      }), \" access control due to their nature of only having one document. To learn more, go to the \", _jsx(_components.a, {\n        href: \"/docs/access-control/overview\",\n        children: \"Access Control\"\n      }), \" docs.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Hooks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Globals also fully support a smaller subset of Hooks. To learn more, go to the \", _jsx(_components.a, {\n        href: \"/docs/hooks/overview\",\n        children: \"Hooks\"\n      }), \" documentation.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field types\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Globals support all field types that Payload has to offer—including simple fields like text and checkboxes all the way to more complicated layout-building field groups like Blocks. \", _jsx(_components.a, {\n        href: \"/docs/fields/overview\",\n        children: \"Click here\"\n      }), \" to learn more about field types.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can import global types as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalConfig } from \\\"payload/types\\\";\\n\\n// This is the type used for incoming global configs.\\n// Only the bare minimum properties are marked as required.\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { SanitizedGlobalConfig } from \\\"payload/types\\\";\\n\\n// This is the type used after an incoming global config is fully sanitized.\\n// Generally, this is only used internally by Payload.\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Global Configs",
        "slug": "globals",
        "label": "Globals",
        "order": 30,
        "desc": "Set up your Global config for your needs by defining fields, adding slugs and labels, establishing access control, tying in hooks and more.",
        "keywords": "globals, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Options",
            "level": 2,
            "id": "options"
          },
          {
            "text": "Admin options",
            "level": 3,
            "id": "admin-options"
          },
          {
            "text": "Preview",
            "level": 3,
            "id": "preview"
          },
          {
            "text": "Access control",
            "level": 3,
            "id": "access-control"
          },
          {
            "text": "Hooks",
            "level": 3,
            "id": "hooks"
          },
          {
            "text": "Field types",
            "level": 3,
            "id": "field-types"
          },
          {
            "text": "TypeScript",
            "level": 3,
            "id": "typescript"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Not only does Payload support managing localized content, it also has internationalization support so that admin users can work in their preferred language. Payload's i18n support is built on top of \", _jsx(_components.a, {\n        href: \"https://www.i18next.com\",\n        children: \"i18next\"\n      }), \". It comes included by default and can be extended in your config.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While Payload's built-in features come translated, you may want to also translate parts of your project's configuration too. This is possible in places like collections and globals labels and groups, field labels, descriptions and input placeholder text. The admin UI will display all the correct translations you provide based on the user's language.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of a simple collection supporting both English and Spanish editors:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const Articles: CollectionConfig = {\\n  slug: 'articles',\\n  labels: {\\n    singular: {\\n      en: 'Article', es: 'Artículo',\\n    },\\n    plural: {\\n      en: 'Articles', es: 'Artículos',\\n    },\\n  },\\n  admin: {\\n    group: { en: 'Content', es: 'Contenido' },\\n  },\\n  fields: [\\n    {\\n      name: 'title',\\n      type: 'text',\\n      label: {\\n        en: 'Title', es: 'Título',\\n      },\\n      admin: {\\n        placeholder: { en: 'Enter title', es: 'Introduce el título' }\\n      }\\n    },\\n    {\\n      name: 'type',\\n      type: 'radio',\\n      options: [{\\n        value: 'news',\\n        label: { en: 'News', es: 'Noticias' },\\n      }, // etc...\\n      ],\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin UI\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Payload admin panel reads the language settings of a user's browser and display all text in that language, or will fall back to English if the user's language is not yet supported.\\nAfter a user logs in, they can change their language selection in the \", _jsx(_components.code, {\n        children: \"/account\"\n      }), \" view.\"]\n    }), \"\\n\", _jsx(Banner, {\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nIf there is a language that Payload does not yet support, we accept code \", _jsx(\"a\", {\n          href: \"https://github.com/payloadcms/payload/blob/master/contributing.md\",\n          children: \"contributions\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Node Express\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload's backend uses express middleware to set the language on incoming requests before they are handled. This allows backend validation to return error messages in the user's own language or system generated emails to be sent using the correct translation. You can make HTTP requests with the \", _jsx(_components.code, {\n        children: \"accept-language\"\n      }), \" header and Payload will use that language.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Anywhere in your Payload app that you have access to the \", _jsx(_components.code, {\n        children: \"req\"\n      }), \" object, you can access i18next's extensive internationalization features assigned to \", _jsx(_components.code, {\n        children: \"req.i18n\"\n      }), \". To access text translations you can use \", _jsx(_components.code, {\n        children: \"req.t('namespace:key')\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read the i18next \", _jsx(_components.a, {\n        href: \"https://www.i18next.com/overview/api\",\n        children: \"API documentation\"\n      }), \" to learn more.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Configuration Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In your Payload config, you can add translations and customize the settings in \", _jsx(_components.code, {\n        children: \"i18n\"\n      }), \". Payload will use your custom options and merge it with the default, allowing you to override the settings Payload provides.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example Payload config extending i18n:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload/config'\\n\\nexport default buildConfig({\\n  //...\\n  i18n: {\\n    fallbackLng: 'en', // default\\n    debug: false, // default\\n    resources: {\\n      en: {\\n        custom: { // namespace can be anything you want\\n          key1: 'Translation with {{variable}}', // translation\\n        },\\n        // override existing translation keys\\n        general: {\\n          dashboard: 'Home',\\n        },\\n      },\\n    },\\n  },\\n  //...\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See the i18next \", _jsx(_components.a, {\n        href: \"https://www.i18next.com/overview/configuration-options\",\n        children: \"configuration options\"\n      }), \" to learn more.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "I18n",
        "slug": "i18n",
        "label": "I18n",
        "order": 40,
        "desc": "Manage and customize internationalization support in your CMS editor experience",
        "keywords": "internationalization, i18n, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Admin UI",
            "level": 3,
            "id": "admin-ui"
          },
          {
            "text": "Node Express",
            "level": 3,
            "id": "node-express"
          },
          {
            "text": "Configuration Options",
            "level": 3,
            "id": "configuration-options"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    code: \"code\",\n    strong: \"strong\",\n    pre: \"pre\",\n    h5: \"h5\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload features deep field-based localization support. Maintaining as many locales as you need is easy. All localization support is opt-in by default. To do so, follow the two steps below.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Enabling in the Payload config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Add the \", _jsx(_components.code, {\n        children: \"localization\"\n      }), \" property to your Payload config to enable localization project-wide. You'll need to provide a list of all locales that you'd like to support as well as set a few other options.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example Payload config set up for localization:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload/config'\\n\\nexport default buildConfig({\\n  collections: [\\n    // collections go here\\n  ],\\n  localization: {\\n    locales: [\\n      'en',\\n      'es',\\n      'de',\\n    ],\\n    defaultLocale: 'en',\\n    fallback: true,\\n  },\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [\"Here is a brief explanation of each of the options available within the \", _jsx(_components.code, {\n          children: \"localization\"\n        }), \" property:\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"locales\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Array-based list of all locales that you would like to support. These strings do not need to be in any specific format. It's up to you to define how to represent your locales. Common patterns are to use two-letter ISO 639 language codes or four-letter language and country codes (ISO 3166‑1) such as \", _jsx(_components.code, {\n        children: \"en-US\"\n      }), \", \", _jsx(_components.code, {\n        children: \"en-UK\"\n      }), \", \", _jsx(_components.code, {\n        children: \"es-MX\"\n      }), \", etc.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"defaultLocale\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Required string that matches one of the locales from the array provided. By default, if no locale is specified, documents will be returned in this locale.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"fallback\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Boolean enabling \\\"fallback\\\" locale functionality. If a document is requested in a locale, but a field does not have a localized value corresponding to the requested locale, then if this property is enabled, the document will automatically fall back to the fallback locale value. If this property is not enabled, the value will not be populated.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field by field localization\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload localization works on a \", _jsx(_components.strong, {\n        children: \"field\"\n      }), \" level—not a document level. In addition to configuring the base Payload config to support localization, you need to specify each field that you would like to localize.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Here is an example of how to enable localization for a field:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  name: 'title',\\n  type: 'text',\\n  // highlight-start\\n  localized: true,\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With the above configuration, the \", _jsx(_components.code, {\n        children: \"title\"\n      }), \" field will now be saved in the database as an object of all locales instead of a single string.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All field types with a \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" property support the \", _jsx(_components.code, {\n        children: \"localized\"\n      }), \" property—even the more complex field types like \", _jsx(_components.code, {\n        children: \"array\"\n      }), \"s and \", _jsx(_components.code, {\n        children: \"block\"\n      }), \"s.\"]\n    }), \"\\n\", _jsx(Banner, {\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nEnabling localization for field types that support nested fields will automatically create localized \\\"sets\\\" of all fields contained within the field. For example, if you have a page layout using a blocks field type, you have the choice of either localizing the full layout, by enabling localization on the top-level blocks field, or only certain fields within the layout.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Retrieving localized docs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When retrieving documents, you can specify which locale you'd like to receive as well as which fallback locale should be used.\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"REST API\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"REST API locale functionality relies on URL query parameters.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"?locale=\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Specify your desired locale by providing the \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" query parameter directly in the endpoint URL.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"?fallback-locale=\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Specify fallback locale to be used by providing the \", _jsx(_components.code, {\n        children: \"fallback-locale\"\n      }), \" query parameter. This can be provided as either a valid locale as provided to your base Payload config, or \", _jsx(_components.code, {\n        children: \"'null'\"\n      }), \", \", _jsx(_components.code, {\n        children: \"'false'\"\n      }), \", or \", _jsx(_components.code, {\n        children: \"'none'\"\n      }), \" to disable falling back.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"fetch('https://localhost:3000/api/pages?locale=es&fallback-locale=none');\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"GraphQL API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In the GraphQL API, you can specify \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"fallbackLocale\"\n      }), \" args to all relevant queries and mutations.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" arg will only accept valid locales, but locales will be formatted automatically as valid GraphQL enum values (dashes or special characters will be converted to underscores, spaces will be removed, etc.). If you are curious to see how locales are auto-formatted, you can use the \", _jsx(_components.a, {\n        href: \"/docs/graphql/overview#graphql-playground\",\n        children: \"GraphQL playground\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"fallbackLocale\"\n      }), \" arg will accept valid locales as well as \", _jsx(_components.code, {\n        children: \"none\"\n      }), \" to disable falling back.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-graphql\",\n        children: \"query {\\n  Posts(locale: de, fallbackLocale: none) {\\n    docs {\\n      title\\n    }\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"In GraphQL, specifying the locale at the top level of a query will automatically apply it throughout all nested relationship fields. You can override this behavior by re-specifying locale arguments in nested related document queries.\"\n      })\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Local API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can specify \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" as well as \", _jsx(_components.code, {\n        children: \"fallbackLocale\"\n      }), \" within the Local API as well as properties on the \", _jsx(_components.code, {\n        children: \"options\"\n      }), \" argument. The \", _jsx(_components.code, {\n        children: \"locale\"\n      }), \" property will accept any valid locale, and the \", _jsx(_components.code, {\n        children: \"fallbackLocale\"\n      }), \" property will accept any valid locale as well as \", _jsx(_components.code, {\n        children: \"'null'\"\n      }), \", \", _jsx(_components.code, {\n        children: \"'false'\"\n      }), \", \", _jsx(_components.code, {\n        children: \"false\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"'none'\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const posts = await payload.find({\\n  collection: 'posts',\\n  locale: 'es',\\n  fallbackLocale: false,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"alert\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"The REST and Local APIs can return all localization data in one request by passing 'all' or '*' as the \", _jsx(\"strong\", {\n          children: \"locale\"\n        }), \" parameter. The response will be structured so that field values come back as the full objects keyed for each locale instead of the single, translated value.\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Localization",
        "slug": "localization",
        "label": "Localization",
        "order": 50,
        "desc": "Add and maintain as many locales as you need by adding Localization to your Payload config, set options for default locale, fallbacks, fields and more.",
        "keywords": "localization, internationalization, i18n, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Enabling in the Payload config",
            "level": 3,
            "id": "enabling-in-the-payload-config"
          },
          {
            "text": "Field by field localization",
            "level": 3,
            "id": "field-by-field-localization"
          },
          {
            "text": "Retrieving localized docs",
            "level": 3,
            "id": "retrieving-localized-docs"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    strong: \"strong\",\n    pre: \"pre\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Payload utilizes a few Express-specific middleware packages within its own routers. You can customize how they work by passing in configuration options to the main Payload config's \", _jsx(_components.code, {\n        children: \"express\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"JSON\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"express.json()\"\n      }), \" is used to parse JSON body content into JavaScript objects accessible on the Express \", _jsx(_components.code, {\n        children: \"req\"\n      }), \". Payload allows you to customize all of the \", _jsx(_components.code, {\n        children: \"json\"\n      }), \" method's options. Common examples of customization use-cases are increasing the max allowed JSON body size which defaults to \", _jsx(_components.code, {\n        children: \"2MB\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example payload.config.js for how to increase the max JSON size allowed to be sent to Payload endpoints:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n\\texpress: {\\n\\t\\tjson: {\\n\\t\\t\\tlimit: '4mb',\\n\\t\\t}\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find a list of all available options that are able to be passed to \", _jsx(_components.code, {\n        children: \"express.json()\"\n      }), \" \", _jsx(_components.a, {\n        href: \"https://expressjs.com/en/api.html\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Compression\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload uses the \", _jsx(_components.code, {\n        children: \"compression\"\n      }), \" package to optimize transfer size for all of the routes it opens, and you can pass customization options through the Payload config.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To customize compression options, pass an object to the Payload config's \", _jsx(_components.code, {\n        children: \"express\"\n      }), \" property.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example payload.config.js:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n\\texpress: {\\n\\t\\tcompression: {\\n\\t\\t\\t// settings go here\\n\\t\\t}\\n\\t}\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Typically, the default options for this package are suitable. However, for a list of all available customization options, \", _jsx(_components.a, {\n        href: \"http://expressjs.com/en/resources/middleware/compression.html\",\n        children: \"click here\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Express",
        "slug": "express",
        "label": "Express",
        "order": 60,
        "desc": "Payload utilizes Express middleware packages, you can customize how they work by passing in configuration options.",
        "keywords": "config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "JSON",
            "level": 3,
            "id": "json"
          },
          {
            "text": "Compression",
            "level": 3,
            "id": "compression"
          }
        ]
      }
    ]
  },
  {
    "slug": "Fields",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    pre: \"pre\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    ol: \"ol\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"Fields are the building blocks of Payload. Collections and Globals both use Fields to define the shape of the data\\nthat they store. Payload offers a wide variety of field types - both simple and complex.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fields are defined as an array on Collections and Globals via the \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \" key. They define the shape of the data that will be stored as well as automatically construct the corresponding Admin UI.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The required \", _jsx(_components.code, {\n        children: \"type\"\n      }), \" property on a field determines what values it can accept, how it is presented in the API, and how the field will be rendered in the admin interface.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Simple collection with two fields:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Page: CollectionConfig = {\\n\\tslug: 'pages',\\n\\tfields: [\\n\\t\\t{\\n\\t\\t\\tname: 'myField',\\n\\t\\t\\ttype: 'text', // highlight-line\\n\\t\\t},\\n\\t\\t{\\n\\t\\t\\tname: 'otherField',\\n\\t\\t\\ttype: 'checkbox', // highlight-line\\n\\t\\t},\\n\\t],\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field types\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/array\",\n          children: \"Array\"\n        }), \" - for repeating content, supports nested fields\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/blocks\",\n          children: \"Blocks\"\n        }), \" - block-based fields, allowing powerful layout creation\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/checkbox\",\n          children: \"Checkbox\"\n        }), \" - boolean true / false checkbox\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/code\",\n          children: \"Code\"\n        }), \" - code editor that saves a string to the database\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/collapsible\",\n          children: \"Collapsible\"\n        }), \" - used for admin layout, nest fields within a collapsible component\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/date\",\n          children: \"Date\"\n        }), \" - date / time field that saves a timestamp\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/email\",\n          children: \"Email\"\n        }), \" - validates the entry is a properly formatted email\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/group\",\n          children: \"Group\"\n        }), \" - nest fields within an object\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/number\",\n          children: \"Number\"\n        }), \" - field that enforces that its value be a number\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/point\",\n          children: \"Point\"\n        }), \" - geometric coordinates for location data\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/radio\",\n          children: \"Radio\"\n        }), \" - radio button group, allowing only one value to be selected\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/relationship\",\n          children: \"Relationship\"\n        }), \" - assign relationships to other collections\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/rich-text\",\n          children: \"Rich Text\"\n        }), \" - fully extensible Rich Text editor\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/row\",\n          children: \"Row\"\n        }), \" - used for admin field layout, no effect on data shape\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/select\",\n          children: \"Select\"\n        }), \" - dropdown / picklist style value selector\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/text\",\n          children: \"Text\"\n        }), \" - simple text input\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/textarea\",\n          children: \"Textarea\"\n        }), \" - allows a bit larger of a text editor\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/upload\",\n          children: \"Upload\"\n        }), \" - allows local file and image upload\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/fields/ui\",\n          children: \"UI\"\n        }), \" - inject your own custom components and do whatever you need\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-level hooks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"One of the most powerful parts about Payload is its ability for you to define field-level hooks that can control the logic of your fields to a fine-grained level. for more information about how to define field hooks, \", _jsx(_components.a, {\n        href: \"/docs/hooks/overview#field-hooks\",\n        children: \"click here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field-level access control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to being able to define access control on a document-level, you can define extremely granular permissions on a field by field level. For more information about field-level access control, \", _jsx(_components.a, {\n        href: \"/docs/access-control/overview#fields\",\n        children: \"click here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field names\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Some fields use their \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" property as a unique identifier to store and retrieve from the database. \", _jsx(_components.code, {\n        children: \"__v\"\n      }), \", \", _jsx(_components.code, {\n        children: \"salt\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"hash\"\n      }), \" are all reserved field names which are sanitized from Payload's config and cannot be used.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Validation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Field validation is enforced automatically based on the field type and other properties such as \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"min\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"max\"\n      }), \" value constraints on certain field types. This default behavior can be replaced by providing your own validate function for any field. It will be used on both the frontend and the backend, so it should not rely on any Node-specific packages. The validation function can be either synchronous or asynchronous and expects to return either \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" or a string error message to display in both API responses and within the Admin panel.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are two arguments available to custom validation functions.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"The value which is currently assigned to the field\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"An optional object with dynamic properties for more complex validation having the following:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"data\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object of the full collection or global document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"siblingData\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object of the document data limited to fields within the same parent to the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"operation\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Will be \\\"create\\\" or \\\"update\\\" depending on the UI action or API call.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"id\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The value of the collection \", _jsx(_components.code, {\n              children: \"id\"\n            }), \", will be \", _jsx(_components.code, {\n              children: \"undefined\"\n            }), \" on create request.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"t\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The function for translating text, \", _jsx(_components.a, {\n              href: \"/docs/configuration/i18n\",\n              children: \"more\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"user\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The currently authenticated user object.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"payload\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If the \", _jsx(_components.code, {\n              children: \"validate\"\n            }), \" function is being executed on the server, Payload will be exposed for easily running local operations.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Orders: CollectionConfig = {\\n  slug: 'orders',\\n  fields: [\\n    {\\n      name: 'customerNumber',\\n      type: 'text',\\n      validate: async (val, { operation }) => {\\n        if (operation !== 'create') {\\n          // skip validation on update\\n          return true;\\n        }\\n        const response = await fetch(`https://your-api.com/customers/${val}`);\\n        if (response.ok) {\\n          return true;\\n        }\\n\\n        return 'The customer number provided does not match any customers within our records.';\\n      },\\n    },\\n  ],\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When supplying a field \", _jsx(_components.code, {\n        children: \"validate\"\n      }), \" function, Payload will use yours in place of the default. To make use of the default field validation in your custom logic you can import, call and return the result as needed.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { text } from 'payload/fields/validations';\\n\\nconst field: Field = {\\n  name: 'notBad',\\n  type: 'text',\\n  validate: (val, args) => {\\n    if (val === 'bad') {\\n      return 'This cannot be \\\"bad\\\"';\\n    }\\n    // highlight-start\\n    return text(val, args);\\n    // highlight-end\\n  },\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Customizable ID\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Collections ID fields are generated automatically by default. An explicit \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" field can be declared in the \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \" array to override this behavior.\\nUsers are then required to provide a custom ID value when creating a record through the Admin UI or API.\\nValid ID types are \", _jsx(_components.code, {\n        children: \"number\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"text\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  fields: [\\n    {\\n      name: 'id',\\n      type: 'number',\\n    },\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to each field's base configuration, you can define specific traits and properties for fields that only have effect on how they are rendered in the Admin panel. The following properties are available for all fields within the \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" property:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"condition\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"You can programmatically show / hide fields based on what other fields are doing. \", _jsx(_components.a, {\n              href: \"#conditional-logic\",\n              children: \"Click here\"\n            }), \" for more info.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"components\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"All field components can be completely and easily swapped out for custom components that you define. \", _jsx(_components.a, {\n              href: \"#custom-components\",\n              children: \"Click here\"\n            }), \" for more info.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"description\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Helper text to display with the field to provide more information for the editor user. \", _jsx(_components.a, {\n              href: \"#description\",\n              children: \"Click here\"\n            }), \" for more info.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"position\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Specify if the field should be rendered in the sidebar by defining \", _jsx(_components.code, {\n              children: \"position: 'sidebar'\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"width\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Restrict the width of a field. you can pass any string-based value here, be it pixels, percentages, etc. This property is especially useful when fields are nested within a \", _jsx(_components.code, {\n              children: \"Row\"\n            }), \" type where they can be organized horizontally.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"style\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Attach raw CSS style properties to the root DOM element of a field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"className\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Attach a CSS class name to the root DOM element of a field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"readOnly\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Setting a field to \", _jsx(_components.code, {\n              children: \"readOnly\"\n            }), \" has no effect on the API whatsoever but disables the admin component's editability to prevent editors from modifying the field's value.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"disabled\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If a field is \", _jsx(_components.code, {\n              children: \"disabled\"\n            }), \", it is completely omitted from the Admin panel.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"hidden\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Setting a field's \", _jsx(_components.code, {\n              children: \"hidden\"\n            }), \" property on its \", _jsx(_components.code, {\n              children: \"admin\"\n            }), \" config will transform it into a \", _jsx(_components.code, {\n              children: \"hidden\"\n            }), \" input type. Its value will still submit with the Admin panel's requests, but the field itself will not be visible to editors.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Custom components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Payload fields support the ability to swap in your own React components with ease. For more information, including examples, \", _jsx(_components.a, {\n        href: \"/docs/admin/components#fields\",\n        children: \"click here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Conditional logic\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can show and hide fields based on what other fields are doing by utilizing conditional logic on a field by field basis. The \", _jsx(_components.code, {\n        children: \"condition\"\n      }), \" property on a field's admin config accepts a function which takes two arguments:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"data\"\n        }), \" - the entire document's data that is currently being edited\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"siblingData\"\n        }), \" - only the fields that are direct siblings to the field with the condition\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"condition\"\n      }), \" function should return a boolean that will control if the field should be displayed or not.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  fields: [\\n    {\\n      name: 'enableGreeting',\\n      type: 'checkbox',\\n      defaultValue: false,\\n    },\\n    {\\n      name: 'greeting',\\n      type: 'text',\\n      admin: {\\n        // highlight-start\\n        condition: (data, siblingData) => {\\n          if (data.enableGreeting) {\\n            return true;\\n          } else {\\n            return false;\\n          }\\n        }\\n        // highlight-end\\n      }\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Default values\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Fields can be prefilled with starting values using the \", _jsx(_components.code, {\n        children: \"defaultValue\"\n      }), \" property. This is used in the admin UI and also on the backend as API requests will be populated with missing or undefined field values. You can assign the defaultValue directly in the field configuration or supply a function for dynamic behavior. Values assigned during a create request on the server are added before validation occurs.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Functions are called with an optional argument object containing:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"user\"\n        }), \" - the authenticated user object\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"locale\"\n        }), \" - the currently selected locale string\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of a defaultValue function that uses both:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const translation: {\\n  en: 'Written by',\\n  es: 'Escrito por',\\n};\\n\\nconst field = {\\n  name: 'attribution',\\n  type: 'text',\\n  // highlight-start\\n  defaultValue: ({ user, locale }) => (`${translation[locale]} ${user.name}`)\\n  // highlight-end\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsx(_components.p, {\n        children: \"You can use async defaultValue functions to fill fields with data from API requests.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Description\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A description can be configured three ways.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"As a string\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"As a function that accepts an object containing the field's value, which returns a string\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"As a React component that accepts value as a prop\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As shown above, you can simply provide a string that will show by the field, but there are use cases where you may want to create some dynamic feedback. By using a function or a component for the \", _jsx(_components.code, {\n        children: \"description\"\n      }), \" property you can provide realtime feedback as the user interacts with the form.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Function Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  fields: [\\n    {\\n      name: 'message',\\n      type: 'text',\\n      maxLength: 20,\\n      admin: {\\n        description: ({ value }) =>\\n          (`${typeof value === 'string' ? 20 - value.length : '20'} characters left`)\\n      }\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This example will display the number of characters allowed as the user types.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Component Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  fields: [\\n    {\\n      name: 'message',\\n      type: 'text',\\n      maxLength: 20,\\n      admin: {\\n        description:\\n          ({ value }) => (\\n            <div>\\n              Character count:\\n              {' '}\\n              { value?.length || 0 }\\n            </div>\\n          )\\n      }\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This component will count the number of characters entered.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can import the internal Payload \", _jsx(_components.code, {\n        children: \"Field\"\n      }), \" type as well as other common field types as follows:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type {\\n  Field,\\n} from 'payload/types';\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Fields Overview",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Fields are the building blocks of Payload, find out how to add or remove a field, change field type, add hooks, define access control and validation.",
        "keywords": "overview, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Field types",
            "level": 3,
            "id": "field-types"
          },
          {
            "text": "Field-level hooks",
            "level": 3,
            "id": "field-level-hooks"
          },
          {
            "text": "Field-level access control",
            "level": 3,
            "id": "field-level-access-control"
          },
          {
            "text": "Field names",
            "level": 3,
            "id": "field-names"
          },
          {
            "text": "Validation",
            "level": 3,
            "id": "validation"
          },
          {
            "text": "Customizable ID",
            "level": 3,
            "id": "customizable-id"
          },
          {
            "text": "Admin config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Custom components",
            "level": 3,
            "id": "custom-components"
          },
          {
            "text": "Conditional logic",
            "level": 3,
            "id": "conditional-logic"
          },
          {
            "text": "Default values",
            "level": 3,
            "id": "default-values"
          },
          {
            "text": "Description",
            "level": 3,
            "id": "description"
          },
          {
            "text": "TypeScript",
            "level": 3,
            "id": "typescript"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    img: \"img\",\n    em: \"em\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Array field type is used when you need to have a set of \\\"repeating\\\" fields. It stores an array of objects containing the fields that you define. Its uses can be simple or highly complex.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example uses:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"A \\\"slider\\\" with an image (\", _jsx(_components.a, {\n          href: \"/docs/fields/upload\",\n          children: \"upload field\"\n        }), \") and a caption (\", _jsx(_components.a, {\n          href: \"/docs/fields/text\",\n          children: \"text field\"\n        }), \")\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Navigational structures where editors can specify nav items containing pages (\", _jsx(_components.a, {\n          href: \"/docs/fields/relationship\",\n          children: \"relationship field\"\n        }), \"), an \\\"open in new tab\\\" \", _jsx(_components.a, {\n          href: \"/docs/fields/checkbox\",\n          children: \"checkbox field\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Event agenda \\\"timeslots\\\" where you need to specify start & end time (\", _jsx(_components.a, {\n          href: \"/docs/fields/date\",\n          children: \"date field\"\n        }), \"), label (\", _jsx(_components.a, {\n          href: \"/docs/fields/text\",\n          children: \"text field\"\n        }), \"), and Learn More page \", _jsx(_components.a, {\n          href: \"/docs/fields/relationship\",\n          children: \"relationship\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"https://payloadcms.com/images/docs/fields/array.jpg\",\n        alt: \"Array field in Payload admin panel\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"Admin panel screenshot of an Array field with a Row containing two text fields, a read-only text field and a checkbox\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as the heading in the Admin panel or an object with keys for each language. Auto-generated from name if not defined.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Array of field types to correspond to each row of the Array.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide an array of row data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config. If enabled, a separate, localized set of all data within this Array will be kept, so there is no need to specify each nested field as \", _jsx(_components.code, {\n              children: \"localized\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"labels\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Customize the row labels appearing in the Admin dashboard.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin Config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", you can adjust the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"initCollapsed\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Set the initial collapsed state\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"components.RowLabel\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Function or React component to be rendered as the label on the array row. Receives \", _jsx(_components.code, {\n              children: \"({ data, index, path })\"\n            }), \" as args\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'slider', // required\\n      type: 'array', // required\\n      label: 'Image Slider',\\n      minRows: 2,\\n      maxRows: 10,\\n      labels: {\\n        singular: 'Slide',\\n        plural: 'Slides',\\n      },\\n      fields: [ // required\\n        {\\n          name: 'title',\\n          type: 'text',\\n        },\\n        {\\n          name: 'image',\\n          type: 'upload',\\n          relationTo: 'media',\\n          required: true,\\n        },\\n        {\\n          name: 'caption',\\n          type: 'text',\\n        }\\n      ],\\n      admin: {\\n        components: {\\n          RowLabel: ({ data, index }) => {\\n            return data?.title || `Slide ${String(index).padStart(2, '0')}`;\\n          },\\n        },\\n      },\\n    }\\n  ]\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Array Field",
        "slug": "array",
        "label": "Array",
        "order": 20,
        "desc": "Array fields are intended for sets of repeating fields, that you define. Learn how to use array fields, see examples and options.",
        "keywords": "array, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin Config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    img: \"img\",\n    em: \"em\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    h4: \"h4\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsxs(_components.p, {\n        children: [\"The Blocks field type is \", _jsx(\"strong\", {\n          children: \"incredibly powerful\"\n        }), \" and can be used as a \", _jsx(\"em\", {\n          children: \"layout builder\"\n        }), \" as well as to define any other flexible content model you can think of. It stores an array of objects, where each object must match the shape of one of your provided block configs.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example uses:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"A layout builder tool that grants editors to design highly customizable page or post layouts. Blocks could include configs such as \", _jsx(_components.code, {\n          children: \"Quote\"\n        }), \", \", _jsx(_components.code, {\n          children: \"CallToAction\"\n        }), \", \", _jsx(_components.code, {\n          children: \"Slider\"\n        }), \", \", _jsx(_components.code, {\n          children: \"Content\"\n        }), \", \", _jsx(_components.code, {\n          children: \"Gallery\"\n        }), \", or others.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"A form builder tool where available block configs might be \", _jsx(_components.code, {\n          children: \"Text\"\n        }), \", \", _jsx(_components.code, {\n          children: \"Select\"\n        }), \", or \", _jsx(_components.code, {\n          children: \"Checkbox\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Virtual event agenda \\\"timeslots\\\" where a timeslot could either be a \", _jsx(_components.code, {\n          children: \"Break\"\n        }), \", a \", _jsx(_components.code, {\n          children: \"Presentation\"\n        }), \", or a \", _jsx(_components.code, {\n          children: \"BreakoutSession\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"https://payloadcms.com/images/docs/fields/blocks.jpg\",\n        alt: \"Blocks field in Payload admin panel\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"Admin panel screenshot of a Blocks field type with Call to Action and Number block examples\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Field config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as the heading in the Admin panel or an object with keys for each language. Auto-generated from name if not defined.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"blocks\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Array of \", _jsx(_components.a, {\n              href: \"/docs/fields/blocks#block-configs\",\n              children: \"block configs\"\n            }), \" to be made available to this field.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-level hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-level access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API response or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide an array of block data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config. If enabled, a separate, localized set of all data within this field will be kept, so there is no need to specify each nested field as \", _jsx(_components.code, {\n              children: \"localized\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"labels\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Customize the block row labels appearing in the Admin dashboard.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin Config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", you can adjust the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"initCollapsed\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Set the initial collapsed state\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Block configs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Blocks are defined as separate configs of their own.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nBest practice is to define each block config in its own file, and then import them into your Blocks field as necessary. This way each block config can be easily shared between fields. For instance, using the \\\"layout builder\\\" example, you might want to feature a few of the same blocks in a Post collection as well as a Page collection. Abstracting into their own files trivializes their reusability.\"]\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"slug\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Identifier for this block type. Will be saved on each block as the \", _jsx(_components.code, {\n              children: \"blockType\"\n            }), \" property.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Array of fields to be stored in this block.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"labels\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Customize the block labels that appear in the Admin dashboard. Auto-generated from slug if not defined.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"imageURL\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Provide a custom image thumbnail to help editors identify this block in the Admin UI.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"imageAltText\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Customize this block's image thumbnail alt text.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"graphQL.singularName\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text to use for the GraphQL schema name. Auto-generated from slug if not defined\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Auto-generated data per block\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to the field data that you define on each block, Payload will store two additional properties on each block:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"blockType\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"blockType\"\n      }), \" is saved as the slug of the block that has been selected.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"blockName\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Admin panel provides each block with a \", _jsx(_components.code, {\n        children: \"blockName\"\n      }), \" field which optionally allows editors to label their blocks for better editability and readability.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.js\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Block, CollectionConfig } from 'payload/types';\\n\\nconst QuoteBlock: Block = {\\n  slug: 'Quote', // required\\n  imageURL: 'https://google.com/path/to/image.jpg',\\n  imageAltText: 'A nice thumbnail image to show what this block looks like',\\n  fields: [ // required\\n    {\\n      name: 'quoteHeader',\\n      type: 'text',\\n      required: true,\\n    },\\n    {\\n      name: 'quoteText',\\n      type: 'text',\\n    },\\n  ]\\n};\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'layout', // required\\n      type: 'blocks', // required\\n      minRows: 1,\\n      maxRows: 20,\\n      blocks: [ // required\\n       QuoteBlock\\n      ]\\n    }\\n  ]\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As you build your own Block configs, you might want to store them in separate files but retain typing accordingly. To do so, you can import and use Payload's \", _jsx(_components.code, {\n        children: \"Block\"\n      }), \" type:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { Block } from 'payload/types';\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Blocks Field",
        "slug": "blocks",
        "label": "Blocks",
        "order": 30,
        "desc": "The Blocks field type is a great layout build and can be used to construct any flexible content model. Learn how to use Block fields, see examples and options.",
        "keywords": "blocks, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Field config",
            "level": 3,
            "id": "field-config"
          },
          {
            "text": "Admin Config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Block configs",
            "level": 3,
            "id": "block-configs"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          },
          {
            "text": "TypeScript",
            "level": 3,
            "id": "typescript"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Checkbox field type saves a boolean in the database.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value, will default to false if field is also \", _jsx(_components.code, {\n              children: \"required\"\n            }), \". \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See the \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#admin-config\",\n              children: \"default field admin config\"\n            }), \" for more details.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'enableCoolStuff', // required\\n      type: 'checkbox', // required\\n      label: 'Click me to see fanciness',\\n      defaultValue: false,\\n    }\\n  ]\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Checkbox Field",
        "slug": "checkbox",
        "label": "Checkbox",
        "order": 40,
        "desc": "Checkbox field types allow the developer to save a boolean value in the database. Learn how to use Checkbox fields, see examples and options.",
        "keywords": "checkbox, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Code field type saves a string in the database, but provides the Admin panel with a code editor styled interface.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This field uses the \", _jsx(_components.code, {\n        children: \"monaco-react\"\n      }), \" editor syntax highlighting.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"minLength\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used by the default validation function to ensure values are of a minimum character length.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxLength\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used by the default validation function to ensure values are of a maximum character length.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin Config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", you can adjust the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"language\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"This property can be set to any language listed \", _jsx(_components.a, {\n              href: \"https://github.com/microsoft/monaco-editor/tree/main/src/basic-languages\",\n              children: \"here\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"editorOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Options that can be passed to the monaco editor, \", _jsx(_components.a, {\n              href: \"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.IDiffEditorConstructionOptions.html\",\n              children: \"view the full list\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"`collections/ExampleCollection.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'trackingCode', // required\\n      type: 'code', // required\\n      required: true,\\n      admin: {\\n        language: 'javascript'\\n      }\\n    }\\n  ]\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Code Field",
        "slug": "code",
        "label": "Code",
        "order": 50,
        "desc": "The Code field type will store any string in the Database. Learn how to use Code fields, see examples and options.",
        "keywords": "code, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin Config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The JSON field type saves actual JSON in the database, which differs from the Code field that saves the value as a string in the database.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This field uses the \", _jsx(_components.code, {\n        children: \"monaco-react\"\n      }), \" editor syntax highlighting.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin Config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", you can adjust the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"editorOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Options that can be passed to the monaco editor, \", _jsx(_components.a, {\n              href: \"https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.IDiffEditorConstructionOptions.html\",\n              children: \"view the full list\"\n            }), \".\"]\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"`collections/ExampleCollection.ts\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'customerJSON', // required\\n      type: 'json', // required\\n      required: true,\\n    }\\n  ]\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "JSON Field",
        "slug": "json",
        "label": "JSON",
        "order": 50,
        "desc": "The JSON field type will store any string in the Database. Learn how to use JSON fields, see examples and options.",
        "keywords": "json, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin Config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Collapsible field is presentational-only and only affects the Admin panel. By using it, you can place fields within a nice layout component that can be collapsed / expanded.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"A label to render within the header of the collapsible component. This can be a string, function or react component. Function/components receive \", _jsx(_components.code, {\n              children: \"({ data, path })\"\n            }), \" as args.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Array of field types to nest within this Collapsible.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin Config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", you can adjust the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"initCollapsed\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Set the initial collapsed state\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      label: ({ data }) => data?.title || 'Untitled',\\n      type: 'collapsible', // required\\n      fields: [ // required\\n        {\\n          name: 'title',\\n          type: 'text',\\n          required: true,\\n        },\\n        {\\n          name: 'someTextField',\\n          type: 'text',\\n          required: true,\\n        },\\n      ],\\n    }\\n  ]\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Collapsible Field",
        "slug": "collapsible",
        "label": "Collapsible",
        "order": 60,
        "desc": "With the Collapsible field, you can place fields within a collapsible layout component that can be collapsed / expanded.",
        "keywords": "row, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin Config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Date field type saves a Date in the database and provides the Admin panel\\nwith a customizable time picker interface.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This field uses \", _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/react-datepicker\",\n        children: _jsx(_components.code, {\n          children: \"react-datepicker\"\n        })\n      }), \" for the Admin panel component.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin Config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", you can customize the following fields that will adjust how the component displays in the admin panel via the \", _jsx(_components.code, {\n        children: \"date\"\n      }), \" property.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"pickerAppearance\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Determines the appearance of the datepicker: \", _jsx(_components.code, {\n              children: \"dayAndTime\"\n            }), \" \", _jsx(_components.code, {\n              children: \"timeOnly\"\n            }), \" \", _jsx(_components.code, {\n              children: \"dayOnly\"\n            }), \" \", _jsx(_components.code, {\n              children: \"monthOnly\"\n            }), \". Defaults to \", _jsx(_components.code, {\n              children: \"dayAndTime\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"displayFormat\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Determines how the date is presented. dayAndTime default to \", _jsx(_components.code, {\n              children: \"MMM d, yyy h:mm a\"\n            }), \" timeOnly defaults to \", _jsx(_components.code, {\n              children: \"h:mm a\"\n            }), \" dayOnly defaults to \", _jsx(_components.code, {\n              children: \"MMM d, yyy\"\n            }), \" and monthOnly defaults to \", _jsx(_components.code, {\n              children: \"MM/yyyy\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"placeholder\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Placeholder text for the field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"monthsToShow\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Number of months to display max is 2. Defaults to 1.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"minDate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Passed directly to \", _jsx(_components.a, {\n              href: \"https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\",\n              children: \"react-datepicker\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxDate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Passed directly to \", _jsx(_components.a, {\n              href: \"https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\",\n              children: \"react-datepicker\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"minTime\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Passed directly to \", _jsx(_components.a, {\n              href: \"https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\",\n              children: \"react-datepicker\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxTime\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Passed directly to \", _jsx(_components.a, {\n              href: \"https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\",\n              children: \"react-datepicker\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"timeIntervals\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Passed directly to \", _jsx(_components.a, {\n              href: \"https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\",\n              children: \"react-datepicker\"\n            }), \". Defaults to 30 minutes.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"timeFormat\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Passed directly to \", _jsx(_components.a, {\n              href: \"https://github.com/Hacker0x01/react-datepicker/blob/master/docs/datepicker.md\",\n              children: \"react-datepicker\"\n            }), \". Defaults to \", _jsx(_components.code, {\n              children: \"'h:mm aa'\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Common use cases for customizing the \", _jsx(_components.code, {\n        children: \"date\"\n      }), \" property are to restrict your field to only show time or day input—but lots more can be done.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'time', // required\\n      type: 'date', // required\\n      label: 'Event Start Time',\\n      defaultValue: '1988-11-05T8:00:00.000+05:00',\\n      admin: {\\n        date: {\\n          // All config options above should be placed here\\n          pickerAppearance: 'timeOnly',\\n        }\\n      }\\n    }\\n  ]\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Date Field",
        "slug": "date",
        "label": "Date",
        "order": 70,
        "desc": "The Date field type stores a Date in the database. Learn how to use and customize the Date field, see examples and options.",
        "keywords": "date, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin Config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Email field enforces that the value provided is a valid email address.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", this field type allows for the following \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" properties:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"placeholder\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set this property to define a placeholder string for the field.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"autoComplete\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set this property to a string that will be used for browser autocomplete.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'contact', // required\\n      type: 'email', // required\\n      label: 'Contact Email Address',\\n      required: true,\\n    }\\n  ]\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Email Field",
        "slug": "email",
        "label": "Email",
        "order": 80,
        "desc": "The Email field enforces that the value provided is a valid email address. Learn how to use Email fields, see examples and options.",
        "keywords": "email, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Group field allows fields to be nested under a common property name. It also groups fields together visually in the Admin panel.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Array of field types to nest within this Group.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used as a heading in the Admin panel and to name the generated GraphQL type.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide an object of data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config. If enabled, a separate, localized set of all data within this Group will be kept, so there is no need to specify each nested field as \", _jsx(_components.code, {\n              children: \"localized\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", the Group allows for the following admin property:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"hideGutter\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set this property to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" to hide this field's gutter within the admin panel. The field gutter is rendered as a vertical line and padding, but often if this field is nested within a Group, Block, or Array, you may want to hide the gutter.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'pageMeta', // required\\n      type: 'group', // required\\n      fields: [ // required\\n        {\\n          name: 'title',\\n          type: 'text',\\n          required: true,\\n          minLength: 20,\\n          maxLength: 100,\\n        },\\n        {\\n          name: 'description',\\n          type: 'textarea',\\n          required: true,\\n          minLength: 40,\\n          maxLength: 160,\\n        }\\n      ],\\n    }\\n  ]\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Group Field",
        "slug": "group",
        "label": "Group",
        "order": 90,
        "desc": "The Group field allows other fields to be nested under a common property. Learn how to use Group fields, see examples and options.",
        "keywords": "group, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Number field stores and validates numeric entry and supports additional numerical validation and formatting features.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"min\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Minimum value accepted. Used in the default \", _jsx(_components.code, {\n              children: \"validation\"\n            }), \" function.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"max\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Maximum value accepted. Used in the default \", _jsx(_components.code, {\n              children: \"validation\"\n            }), \" function.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", this field type allows for the following \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" properties:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"step\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set a value for the number field to increment / decrement using browser controls.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"placeholder\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set this property to define a placeholder string for the field.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"autoComplete\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set this property to a string that will be used for browser autocomplete.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'age', // required\\n      type: 'number', // required\\n      required: true,\\n      admin: {\\n        step: 1,\\n      }\\n    }\\n  ]\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Number Field",
        "slug": "number",
        "label": "Number",
        "order": 100,
        "desc": "Number fields store and validate numeric data. Learn how to use and format Number fields, see examples and Number field options.",
        "keywords": "number, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Point field type saves a pair of coordinates in the database and assigns an index for location related queries.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The data structure in the database matches the GeoJSON structure to represent point. The Payload APIs simplifies the object data to only the [longitude, latitude] location.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used as a field label in the Admin panel and to name the generated GraphQL type.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. To support location queries, point index defaults to \", _jsx(_components.code, {\n              children: \"2dsphere\"\n            }), \", to disable the index set to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'location',\\n      type: 'point',\\n      label: 'Location',\\n    },\\n  ]\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Querying\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In order to do query based on the distance to another point, you can use the \", _jsx(_components.code, {\n        children: \"near\"\n      }), \" operator. When querying using the near operator, the returned documents will be sorted by nearest first.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Point Field",
        "slug": "point",
        "label": "Point",
        "order": 110,
        "desc": "The Point field type stores coordinates in the database. Learn how to use Point field for geolocation and geometry.",
        "keywords": "point, geolocation, geospatial, geojson, 2dsphere, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          },
          {
            "text": "Querying",
            "level": 3,
            "id": "querying"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Radio field type allows for the selection of one value from a predefined set of possible values and presents a radio group-style set of inputs to the Admin panel.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"options\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Array of options to allow the field to store. Can either be an array of strings, or an array of objects containing an \", _jsx(_components.code, {\n              children: \"label\"\n            }), \" string and a \", _jsx(_components.code, {\n              children: \"value\"\n            }), \" string.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. The default value must exist within provided values in \", _jsx(_components.code, {\n              children: \"options\"\n            }), \". \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important:\"\n        }), _jsx(\"br\", {}), \"\\nOption values should be strings that do not contain hyphens or special characters due to GraphQL enumeration naming constraints. Underscores are allowed. If you determine you need your option values to be non-strings or contain special characters, they will be formatted accordingly before being used as a GraphQL enum.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", the Radio field type allows for the specification of the following \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" properties:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"layout\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"layout\"\n      }), \" property allows for the radio group to be styled as a horizonally or vertically distributed list. The default value is \", _jsx(_components.code, {\n        children: \"horizontal\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'color', // required\\n      type: 'radio', // required\\n      options: [ // required\\n        {\\n          label: 'Mint',\\n          value: 'mint',\\n        },\\n        {\\n          label: 'Dark Gray',\\n          value: 'dark_gray',\\n        },\\n      ],\\n      defaultValue: 'mint', // The first value in options.\\n      admin: {\\n        layout: 'horizontal',\\n      }\\n    }\\n  ]\\n}\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Radio Field",
        "slug": "radio",
        "label": "Radio Group",
        "order": 120,
        "desc": "The Radio field type allows for the selection of one value from a predefined set of possible values. Learn how to use Radio fields, see examples and options.",
        "keywords": "radio, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Relationship field is one of the most powerful fields Payload features. It provides for the ability to easily relate documents together.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example uses:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To add \", _jsx(_components.code, {\n          children: \"Product\"\n        }), \" documents to an \", _jsx(_components.code, {\n          children: \"Order\"\n        }), \" document\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To allow for an \", _jsx(_components.code, {\n          children: \"Order\"\n        }), \" to feature a \", _jsx(_components.code, {\n          children: \"placedBy\"\n        }), \" relationship to either an \", _jsx(_components.code, {\n          children: \"Organization\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"User\"\n        }), \" collection\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To assign \", _jsx(_components.code, {\n          children: \"Category\"\n        }), \" documents to \", _jsx(_components.code, {\n          children: \"Post\"\n        }), \" documents\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"relationTo\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Provide one or many collection \", _jsx(_components.code, {\n              children: \"slug\"\n            }), \"s to be able to assign relationships to.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"filterOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A query to filter which options appear in the UI and validate against. \", _jsx(_components.a, {\n              href: \"#filtering-relationship-options\",\n              children: \"More\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hasMany\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Boolean when, if set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \", allows this field to have many relations instead of only one.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxDepth\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Sets a number limit on iterations of related documents to populate when queried. \", _jsx(_components.a, {\n              href: \"/docs/getting-started/concepts#depth\",\n              children: \"Depth\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See the \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#admin-config\",\n              children: \"default field admin config\"\n            }), \" for more details.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nThe \", _jsx(\"a\", {\n          href: \"/docs/getting-started/concepts#depth\",\n          children: \"Depth\"\n        }), \" parameter can be used to automatically populate related documents that are returned by the API.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", the Relationship field type also allows for the following admin-specific properties:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"isSortable\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" if you'd like this field to be sortable within the Admin UI using drag and drop. (Only works when \", _jsx(_components.code, {\n        children: \"hasMany\"\n      }), \" is set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \")\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Filtering relationship options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Options can be dynamically limited by supplying a \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"query constraint\"\n      }), \", which will be used both for validating input and filtering available relationships in the UI.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"filterOptions\"\n      }), \" property can either be a \", _jsx(_components.code, {\n        children: \"Where\"\n      }), \" query directly, or a function that returns one. When using a function, it will be called with an argument object with the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"relationTo\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"relationTo\"\n            }), \" to filter against (as defined on the field)\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"data\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object of the full collection or global document currently being edited\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"siblingData\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object of the document data limited to fields within the same parent to the field\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"id\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The value of the collection \", _jsx(_components.code, {\n              children: \"id\"\n            }), \", will be \", _jsx(_components.code, {\n              children: \"undefined\"\n            }), \" on create request\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"user\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The currently authenticated user object\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const relationshipField = {\\n  name: 'purchase',\\n  type: 'relationship',\\n  relationTo: ['products', 'services'],\\n  filterOptions: ({ relationTo, siblingData }) => {\\n    // returns a Where query dynamically by the type of relationship\\n    if (relationTo === 'products') {\\n      return {\\n        'stock': { greater_than: siblingData.quantity }\\n      }\\n    }\\n\\n    if (relationTo === 'services') {\\n      return {\\n        'isAvailable': { equals: true }\\n      }\\n    }\\n  },\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can learn more about writing queries \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nWhen a relationship field has both \", _jsx(\"strong\", {\n          children: \"filterOptions\"\n        }), \" and a custom \", _jsx(\"strong\", {\n          children: \"validate\"\n        }), \" function, the api will not validate \", _jsx(\"strong\", {\n          children: \"filterOptions\"\n        }), \" unless you call the default relationship field validation function imported from \", _jsx(\"strong\", {\n          children: \"payload/fields/validations\"\n        }), \" in your validate function.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"How the data is saved\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Given the variety of options possible within the \", _jsx(_components.code, {\n        children: \"relationship\"\n      }), \" field type, the shape of the data needed for creating and updating these fields can vary. The following sections will describe the variety of data shapes that can arise from this field.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Has One\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The most simple pattern of a relationship is to use \", _jsx(_components.code, {\n        children: \"hasMany: false\"\n      }), \" with a \", _jsx(_components.code, {\n        children: \"relationTo\"\n      }), \" that allows for only one type of collection.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'owner', // required\\n      type: 'relationship', // required\\n      relationTo: 'users', // required\\n      hasMany: false,\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The shape of the data to save for a document with the field configured this way would be:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"  {\\n     // Mongo ObjectID of the related user\\n    \\\"owner\\\": \\\"6031ac9e1289176380734024\\\"\\n  }\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When querying documents in this collection via REST API, you could query as follows:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"?where[owner][equals]=6031ac9e1289176380734024\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Has One - Polymorphic\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also known as \", _jsx(_components.strong, {\n        children: \"dynamic references\"\n      }), \", in this configuration, the \", _jsx(_components.code, {\n        children: \"relationTo\"\n      }), \" field is an array of Collection slugs that tells Payload which Collections are valid to reference.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'owner', // required\\n      type: 'relationship', // required\\n      relationTo: ['users', 'organizations'], // required\\n      hasMany: false,\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The shape of the data to save for a document with more than one relationship type would be:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"  {\\n    \\\"owner\\\": {\\n      \\\"relationTo\\\": \\\"organizations\\\",\\n      \\\"value\\\": \\\"6031ac9e1289176380734024\\\"\\n    }\\n  }\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example for how to query documents by this data (note the difference in referencing the \", _jsx(_components.code, {\n        children: \"owner.value\"\n      }), \"):\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"?where[owner.value][equals]=6031ac9e1289176380734024\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can also query for documents where a field has a relationship to a specific Collection:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"?where[owners.relationTo][equals]=organizations\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This query would return only documents that have an owner relationship to organizations.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Has Many\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"hasMany\"\n      }), \" tells Payload that there may be more than one collection saved to the field.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'owners', // required\\n      type: 'relationship', // required\\n      relationTo: 'users', // required\\n      hasMany: true,\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To save the to \", _jsx(_components.code, {\n        children: \"hasMany\"\n      }), \" relationship field we need to send an array of IDs:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"  {\\n    \\\"owners\\\": [ \\\"6031ac9e1289176380734024\\\", \\\"602c3c327b811235943ee12b\\\" ]\\n  }\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When querying documents, the format does not change for arrays:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"?where[owners][equals]=6031ac9e1289176380734024\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Has Many - Polymorphic\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'owners', // required\\n      type: 'relationship', // required\\n      relationTo: ['users', 'organizations'], // required\\n      hasMany: true,\\n      required: true,\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Relationship fields with \", _jsx(_components.code, {\n        children: \"hasMany\"\n      }), \" set to more than one kind of collections save their data as an array of objects—each containing the Collection \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \" as the \", _jsx(_components.code, {\n        children: \"relationTo\"\n      }), \" value, and the related document \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" for the \", _jsx(_components.code, {\n        children: \"value\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"owners\\\": [\\n    {\\n      \\\"relationTo\\\": \\\"users\\\",\\n      \\\"value\\\": \\\"6031ac9e1289176380734024\\\"\\n    }, {\\n      \\\"relationTo\\\": \\\"organizations\\\",\\n      \\\"value\\\": \\\"602c3c327b811235943ee12b\\\"\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Querying is done in the same way as the earlier Polymorphic example:\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"?where[owners.value][equals]=6031ac9e1289176380734024\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Relationship Field",
        "slug": "relationship",
        "label": "Relationship",
        "order": 130,
        "desc": "The Relationship field provides the ability to relate documents together. Learn how to use Relationship fields, see examples and options.",
        "keywords": "relationship, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Filtering relationship options",
            "level": 3,
            "id": "filtering-relationship-options"
          },
          {
            "text": "How the data is saved",
            "level": 3,
            "id": "how-the-data-is-saved"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    em: \"em\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\",\n    pre: \"pre\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Rich Text field is a powerful way to allow editors to write dynamic content. The content is saved as JSON in the database and can be converted into any format, including HTML, that you need.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Admin component is built on the powerful \", _jsx(_components.a, {\n        href: \"https://docs.slatejs.org/\",\n        children: _jsx(_components.code, {\n          children: \"slatejs\"\n        })\n      }), \" editor and is meant to be as extensible and customizable as possible.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsxs(\"strong\", {\n          children: [\"Consistent with Payload's goal of making you learn as little of Payload as possible, customizing and using the Rich Text Editor does not involve learning how to develop for a \", _jsx(\"em\", {\n            children: \"Payload\"\n          }), \" rich text editor.\"]\n        }), \" Instead, you can invest your time and effort into learning Slate, an open-source tool that will allow you to apply your learnings elsewhere as well.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", the Rich Text editor allows for the following admin properties:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"placeholder\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set this property to define a placeholder string in the text input.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"elements\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"elements\"\n      }), \" property is used to specify which built-in or custom \", _jsx(_components.a, {\n        href: \"https://docs.slatejs.org/concepts/02-nodes#element\",\n        children: \"SlateJS elements\"\n      }), \" should be made available to the field within the admin panel.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The default \", _jsx(_components.code, {\n        children: \"elements\"\n      }), \" available in Payload are:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"h1\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"h2\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"h3\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"h4\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"h5\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"h6\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"link\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"ol\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"ul\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"indent\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#relationship-element\",\n          children: _jsx(_components.code, {\n            children: \"relationship\"\n          })\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#upload-element\",\n          children: _jsx(_components.code, {\n            children: \"upload\"\n          })\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"leaves\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"leaves\"\n      }), \" property specifies built-in or custom \", _jsx(_components.a, {\n        href: \"https://docs.slatejs.org/concepts/08-rendering#leaves\",\n        children: \"SlateJS leaves\"\n      }), \" to be enabled within the Admin panel.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The default \", _jsx(_components.code, {\n        children: \"leaves\"\n      }), \" available in Payload are:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"bold\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"code\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"italic\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"strikethrough\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"underline\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"hideGutter\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set this property to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" to hide this field's gutter within the admin panel. The field gutter is rendered as a vertical line and padding, but often if this field is nested within a Group, Block, or Array, you may want to hide the gutter.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"link.fields\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This allows \", _jsx(_components.a, {\n        href: \"/docs/fields/overview\",\n        children: \"fields\"\n      }), \" to be saved as extra fields on a link inside the Rich Text Editor. When this is present, the fields will render inside a modal that can be opened by clicking the \\\"edit\\\" button on the link element.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"https://payloadcms.com/images/docs/fields/richText/rte-link-fields-modal.jpg\",\n        alt: \"RichText link fields\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"RichText link with custom fields\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"upload.collections[collection-name].fields\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This allows \", _jsx(_components.a, {\n        href: \"/docs/fields/overview\",\n        children: \"fields\"\n      }), \" to be saved as meta data on an upload field inside the Rich Text Editor. When this is present, the fields will render inside a modal that can be opened by clicking the \\\"edit\\\" button on the upload element.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"https://payloadcms.com/images/docs/fields/richText/rte-upload-element.jpg\",\n        alt: \"RichText upload element\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"RichText field using the upload element\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"https://payloadcms.com/images/docs/fields/richText/rte-upload-fields-modal.jpg\",\n        alt: \"RichText upload element modal\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"RichText upload element modal displaying fields from the config\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Relationship element\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The built-in \", _jsx(_components.code, {\n        children: \"relationship\"\n      }), \" element is a powerful way to reference other Documents directly within your Rich Text editor.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Upload element\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similar to the \", _jsx(_components.code, {\n        children: \"relationship\"\n      }), \" element, the \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" element is a user-friendly way to reference \", _jsx(_components.a, {\n        href: \"/docs/upload/overview\",\n        children: \"Upload-enabled collections\"\n      }), \" with a UI specifically designed for media / image-based uploads.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nCollections are automatically allowed to be selected within the Rich Text relationship and upload elements by default. If you want to disable a collection from being able to be referenced in Rich Text fields, set the collection admin option of \", _jsx(\"strong\", {\n          children: \"enableRichTextRelationship\"\n        }), \" to false.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Relationship and Upload elements are populated dynamically into your Rich Text field' content. Within the REST and Local APIs, any present RichText \", _jsx(_components.code, {\n        children: \"relationship\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" elements will respect the \", _jsx(_components.code, {\n        children: \"depth\"\n      }), \" option that you pass, and will be populated accordingly. In GraphQL, each \", _jsx(_components.code, {\n        children: \"richText\"\n      }), \" field accepts an argument of \", _jsx(_components.code, {\n        children: \"depth\"\n      }), \" for you to utilize.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Specifying which elements and leaves to allow\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To specify which default elements or leaves should be allowed to be used for this field, define arrays that contain string names for each element or leaf you wish to enable. To specify a custom element or leaf, pass an object with all corresponding properties as outlined below. View the \", _jsx(_components.a, {\n        href: \"#example\",\n        children: \"example\"\n      }), \" to reference how this all works.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Building custom elements and leaves\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can design and build your own Slate elements and leaves to extend the editor with your own functionality. To do so, first start by reading the \", _jsx(_components.a, {\n        href: \"https://docs.slatejs.org/\",\n        children: \"SlateJS documentation\"\n      }), \" and looking at the \", _jsx(_components.a, {\n        href: \"https://www.slatejs.org/examples/richtext\",\n        children: \"Slate examples\"\n      }), \" to familiarize yourself with the SlateJS editor as a whole.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once you're up to speed with the general concepts involved, you can pass in your own elements and leaves to your field's admin config.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Both custom elements and leaves are defined via the following config:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"The name to be used as a \", _jsx(_components.code, {\n              children: \"type\"\n            }), \" for this element.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Button\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"A React component to be rendered in the Rich Text toolbar.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"plugins\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"An array of plugins to provide to the Rich Text editor.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Custom \", _jsx(_components.code, {\n        children: \"Element\"\n      }), \"s also require the \", _jsx(_components.code, {\n        children: \"Element\"\n      }), \" property set to a React component to be rendered as the \", _jsx(_components.code, {\n        children: \"Element\"\n      }), \" within the rich text editor itself.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Custom \", _jsx(_components.code, {\n        children: \"Leaf\"\n      }), \" objects follow a similar pattern but require you to define the \", _jsx(_components.code, {\n        children: \"Leaf\"\n      }), \" property instead.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'content', // required\\n      type: 'richText', // required\\n      defaultValue: [{\\n        children: [{ text: 'Here is some default content for this field' }],\\n      }],\\n      required: true,\\n      admin: {\\n        elements: [\\n          'h2',\\n          'h3',\\n          'h4',\\n          'link',\\n          {\\n            name: 'cta',\\n            Button: CustomCallToActionButton,\\n            Element: CustomCallToActionElement,\\n            plugins: [\\n              // any plugins that are required by this element go here\\n            ]\\n          }\\n        ],\\n        leaves: [\\n          'bold',\\n          'italic',\\n          {\\n            name: 'highlight',\\n            Button: CustomHighlightButton,\\n            Leaf: CustomHighlightLeaf,\\n            plugins: [\\n              // any plugins that are required by this leaf go here\\n            ]\\n          }\\n        ],\\n        link: {\\n          // Inject your own fields into the Link element\\n          fields: [\\n            {\\n              name: 'rel',\\n              label: 'Rel Attribute',\\n              type: 'select',\\n              hasMany: true,\\n              options: [\\n                'noopener', 'noreferrer', 'nofollow',\\n              ],\\n            },\\n          ],\\n        },\\n        upload: {\\n          collections: {\\n            media: {\\n              fields: [\\n                // any fields that you would like to save\\n                // on an upload element in the `media` collection\\n              ],\\n            },\\n          },\\n        },\\n      }\\n    }\\n  ]\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more examples regarding how to define your own elements and leaves, check out the example \", _jsxs(_components.a, {\n        href: \"https://github.com/payloadcms/public-demo/blob/master/src/fields/hero.ts\",\n        children: [_jsx(_components.code, {\n          children: \"RichText\"\n        }), \" field\"]\n      }), \" within the Public Demo source code.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Generating HTML\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As the Rich Text field saves its content in a JSON format, you'll need to render it as HTML yourself. Here is an example for how to generate JSX / HTML from Rich Text content:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import React, { Fragment } from 'react';\\nimport escapeHTML from 'escape-html';\\nimport { Text } from 'slate';\\n\\nconst serialize = (children) => children.map((node, i) => {\\n  if (Text.isText(node)) {\\n    let text = <span dangerouslySetInnerHTML={{ __html: escapeHTML(node.text) }} />;\\n\\n    if (node.bold) {\\n      text = (\\n        <strong key={i}>\\n          {text}\\n        </strong>\\n      );\\n    }\\n\\n    if (node.code) {\\n      text = (\\n        <code key={i}>\\n          {text}\\n        </code>\\n      );\\n    }\\n\\n    if (node.italic) {\\n      text = (\\n        <em key={i}>\\n          {text}\\n        </em>\\n      );\\n    }\\n\\n    // Handle other leaf types here...\\n\\n    return (\\n      <Fragment key={i}>\\n        {text}\\n      </Fragment>\\n    );\\n  }\\n\\n  if (!node) {\\n    return null;\\n  }\\n\\n  switch (node.type) {\\n    case 'h1':\\n      return (\\n        <h1 key={i}>\\n          {serialize(node.children)}\\n        </h1>\\n      );\\n    // Iterate through all headings here...\\n    case 'h6':\\n      return (\\n        <h6 key={i}>\\n          {serialize(node.children)}\\n        </h6>\\n      );\\n    case 'quote':\\n      return (\\n        <blockquote key={i}>\\n          {serialize(node.children)}\\n        </blockquote>\\n      );\\n    case 'ul':\\n      return (\\n        <ul key={i}>\\n          {serialize(node.children)}\\n        </ul>\\n      );\\n    case 'ol':\\n      return (\\n        <ol key={i}>\\n          {serialize(node.children)}\\n        </ol>\\n      );\\n    case 'li':\\n      return (\\n        <li key={i}>\\n          {serialize(node.children)}\\n        </li>\\n      );\\n    case 'link':\\n      return (\\n        <a\\n          href={escapeHTML(node.url)}\\n          key={i}\\n        >\\n          {serialize(node.children)}\\n        </a>\\n      );\\n\\n    default:\\n      return (\\n        <p key={i}>\\n          {serialize(node.children)}\\n        </p>\\n      );\\n  }\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nThe above example is for how to render to JSX, although for plain HTML the pattern is similar. Just remove the JSX and return HTML strings instead!\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Built-in SlateJS Plugins\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload comes with a few built-in SlateJS plugins which can be extended to make developing your own elements and leaves a bit easier. They will be documented here over time.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: _jsx(_components.code, {\n        children: \"shouldBreakOutOnEnter\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload's built-in heading elements all allow a \\\"hard return\\\" to \\\"break out\\\" of the currently active element. For example, if you hit \", _jsx(_components.code, {\n        children: \"enter\"\n      }), \" while typing an \", _jsx(_components.code, {\n        children: \"h1\"\n      }), \", the \", _jsx(_components.code, {\n        children: \"h1\"\n      }), \" will be \\\"broken out of\\\" and you'll be able to continue writing as the default paragraph element.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you want to utilize this functionality within your own custom elements, you can do so by adding a custom plugin to your \", _jsx(_components.code, {\n        children: \"element\"\n      }), \" like the following \\\"large body\\\" element example:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"customLargeBodyElement.js\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import Button from './Button';\\nimport Element from './Element';\\nimport withLargeBody from './plugin';\\n\\nexport default {\\n  name: 'large-body',\\n  Button,\\n  Element,\\n  plugins: [\\n    (incomingEditor) => {\\n      const editor = incomingEditor;\\n      const { shouldBreakOutOnEnter } = editor;\\n\\n      editor.shouldBreakOutOnEnter = (element) => (element.type === 'large-body' ? true : shouldBreakOutOnEnter(element));\\n\\n      return editor;\\n    }\\n  ],\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Above, you can see that we are creating a custom SlateJS element with a name of \", _jsx(_components.code, {\n        children: \"large-body\"\n      }), \". This might render a slightly larger body copy on the frontend of your app(s). We pass it a name, button, and element—but additionally, we pass it a \", _jsx(_components.code, {\n        children: \"plugins\"\n      }), \" array containing a single SlateJS plugin.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The plugin itself extends Payload's built-in \", _jsx(_components.code, {\n        children: \"shouldBreakOutOnEnter\"\n      }), \" Slate function to add its own element name to the list of elements that should \\\"break out\\\" when the \", _jsx(_components.code, {\n        children: \"enter\"\n      }), \" key is pressed.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you are building your own custom Rich Text elements or leaves, you may benefit from importing the following types:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type {\\n  RichTextCustomElement,\\n  RichTextCustomLeaf,\\n} from 'payload/types';\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Rich Text Field",
        "slug": "rich-text",
        "label": "Rich Text",
        "order": 140,
        "desc": "The Rich Text field allows dynamic content to be written through the Admin Panel. Learn how to use Rich Text fields, see examples and options.",
        "keywords": "rich text, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Relationship element",
            "level": 3,
            "id": "relationship-element"
          },
          {
            "text": "Upload element",
            "level": 3,
            "id": "upload-element"
          },
          {
            "text": "Specifying which elements and leaves to allow",
            "level": 3,
            "id": "specifying-which-elements-and-leaves-to-allow"
          },
          {
            "text": "Building custom elements and leaves",
            "level": 3,
            "id": "building-custom-elements-and-leaves"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          },
          {
            "text": "Generating HTML",
            "level": 3,
            "id": "generating-html"
          },
          {
            "text": "Built-in SlateJS Plugins",
            "level": 3,
            "id": "built-in-slatejs-plugins"
          },
          {
            "text": "TypeScript",
            "level": 3,
            "id": "typescript"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Row field is presentational-only and only affects the Admin panel. By using it, you can arrange fields next to each other horizontally.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Array of field types to nest within this Row.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration excluding \", _jsx(_components.code, {\n              children: \"description\"\n            }), \", \", _jsx(_components.code, {\n              children: \"readOnly\"\n            }), \", and \", _jsx(_components.code, {\n              children: \"hidden\"\n            }), \". See the \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#admin-config\",\n              children: \"default field admin config\"\n            }), \" for more details.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      type: 'row', // required\\n      fields: [ // required\\n        {\\n          name: 'label',\\n          type: 'text',\\n          required: true,\\n          admin: {\\n            width: '50%',\\n          },\\n        },\\n        {\\n          name: 'value',\\n          type: 'text',\\n          required: true,\\n          admin: {\\n            width: '50%',\\n          },\\n        },\\n      ],\\n    }\\n  ]\\n}\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Row Field",
        "slug": "row",
        "label": "Row",
        "order": 150,
        "desc": "With the Row field you can arrange fields next to each other in the Admin Panel to help you customize your Dashboard.",
        "keywords": "row, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Select field provides a dropdown-style interface for choosing options from\\na predefined list as an enumeration.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"options\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Array of options to allow the field to store. Can either be an array of strings, or an array of objects containing a \", _jsx(_components.code, {\n              children: \"label\"\n            }), \" string and a \", _jsx(_components.code, {\n              children: \"value\"\n            }), \" string.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hasMany\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Boolean when, if set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \", allows this field to have many selections instead of only one.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See the \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#admin-config\",\n              children: \"default field admin config\"\n            }), \" for more details.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(\"strong\", {\n        children: \"Important:\"\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"Option values should be strings that do not contain hyphens or special\\ncharacters due to GraphQL enumeration naming constraints. Underscores are\\nallowed. If you determine you need your option values to be non-strings or\\ncontain special characters, they will be formatted accordingly before being\\nused as a GraphQL enum.\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", the Select field type also allows for the following admin-specific properties:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"isClearable\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" if you'd like this field to be clearable within the Admin UI.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"isSortable\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" if you'd like this field to be sortable within the Admin UI using drag and drop. (Only works when \", _jsx(_components.code, {\n        children: \"hasMany\"\n      }), \" is set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \")\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'selectedFeatures', // required\\n      type: 'select', // required\\n      hasMany: true,\\n      admin: {\\n        isClearable: true,\\n        isSortable: true, // use mouse to drag and drop different values, and sort them according to your choice\\n      },\\n      options: [\\n        {\\n          label: 'Metallic Paint',\\n          value: 'metallic_paint',\\n        },\\n        {\\n          label: 'Alloy Wheels',\\n          value: 'alloy_wheels',\\n        },\\n        {\\n          label: 'Carbon Fiber Dashboard',\\n          value: 'carbon_fiber_dashboard',\\n        },\\n      ],\\n    }\\n  ]\\n}\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Select Field",
        "slug": "select",
        "label": "Select",
        "order": 160,
        "desc": "The Select field provides a dropdown-style interface for choosing options from a predefined list. Learn how to use Select fields, see examples and options.",
        "keywords": "select, multi-select, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    em: \"em\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    h4: \"h4\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Tabs field is presentational-only and only affects the Admin panel (unless a tab is named). By using it, you can place fields within a nice layout component that separates certain sub-fields by a tabbed interface.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"https://payloadcms.com/images/docs/fields/tabs/tabs.jpg\",\n        alt: \"Tabs field type used to separate Hero fields from Page Layout\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"Tabs field type used to separate Hero fields from Page Layout\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"tabs\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Array of tabs to render within this Tabs field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See the \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#admin-config\",\n              children: \"default field admin config\"\n            }), \" for more details.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Tab-specific Config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each tab has its own required \", _jsx(_components.code, {\n        children: \"label\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"fields\"\n      }), \" array. You can also optionally pass a \", _jsx(_components.code, {\n        children: \"description\"\n      }), \" to render within each individual tab.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An optional property name to be used when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The label to render on the tab itself.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The fields to render within this tab.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"description\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Optionally render a description within this tab to describe the contents of the tab itself.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      type: 'tabs', // required\\n      tabs: [ // required\\n        {\\n          label: 'Tab One Label', // required\\n          description: 'This will appear within the tab above the fields.',\\n          fields: [ // required\\n            {\\n              name: 'someTextField',\\n              type: 'text',\\n              required: true,\\n            },\\n          ],\\n        },\\n        {\\n          name: 'tabTwo',\\n          label: 'Tab Two Label', // required\\n          fields: [ // required\\n            {\\n              name: 'numberField', // accessible via tabTwo.numberField\\n              type: 'number',\\n              required: true,\\n            },\\n          ],\\n        }\\n      ]\\n\\n    }\\n  ]\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Tabs Field",
        "slug": "tabs",
        "label": "Tabs",
        "order": 170,
        "desc": "The Tabs field is a great way to organize complex editing experiences into specific tab-based areas.",
        "keywords": "tabs, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Text field type is one of the most commonly used fields. It saves a string to the database and provides the Admin panel with a simple text input.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"minLength\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used by the default validation function to ensure values are of a minimum character length.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxLength\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used by the default validation function to ensure values are of a maximum character length.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", the Text field type allows for the following \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" properties:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"placeholder\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set this property to define a placeholder string in the text input.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"autoComplete\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set this property to a string that will be used for browser autocomplete.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'pageTitle', // required\\n      type: 'text', // required\\n      required: true,\\n    }\\n  ]\\n}\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Text Field",
        "slug": "text",
        "label": "Text",
        "order": 180,
        "desc": "Text field types simply save a string to the database and provide the Admin panel with a text input. Learn how to use Text fields, see examples and options.",
        "keywords": "text, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    code: \"code\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Textarea field is almost identical to the Text field but it features a slightly larger input that is better suited to edit longer text.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"minLength\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used by the default validation function to ensure values are of a minimum character length.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxLength\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used by the default validation function to ensure values are of a maximum character length.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See below for \", _jsx(_components.a, {\n              href: \"#admin-config\",\n              children: \"more detail\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the default \", _jsx(_components.a, {\n        href: \"/docs/fields/overview#admin-config\",\n        children: \"field admin config\"\n      }), \", the Textarea field type allows for the following \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" properties:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"placeholder\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set this property to define a placeholder string in the textarea.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"autoComplete\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Set this property to a string that will be used for browser autocomplete.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'metaDescription', // required\\n      type: 'textarea', // required\\n      required: true,\\n    }\\n  ]\\n}\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Textarea Field",
        "slug": "textarea",
        "label": "Textarea",
        "order": 190,
        "desc": "Textarea field types save a string to the database, similar to the Text field type but equipped for longer text. Learn how to use Textarea fields, see examples and options.",
        "keywords": "textarea, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Admin config",
            "level": 3,
            "id": "admin-config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The UI (user interface) field gives you a ton of power to add your own React components directly into the Admin panel, nested directly within your other fields. It has absolutely no effect on the data of your documents. It is presentational-only.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This field is helpful if you need to build in custom functionality via React components within the Admin panel. Think of it as a way for you to \\\"plug in\\\" your own React components directly within your other fields, so you can provide your editors with new controls exactly where you want them to go.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With this field, you can also inject custom \", _jsx(_components.code, {\n        children: \"Cell\"\n      }), \" components that appear as additional columns within collections' List views.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example uses:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Add a custom message or block of text within the body of an Edit view to describe the purpose of surrounding fields\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Add a \\\"Refund\\\" button to an Order's Edit view sidebar, which might make a fetch call to a custom \", _jsx(_components.code, {\n          children: \"refund\"\n        }), \" endpoint\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Add a \\\"view page\\\" button into a Pages List view to give editors a shortcut to view a page on the frontend of the site\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Build a \\\"clear cache\\\" button or similar mechanism to manually clear caches of specific documents\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"A unique identifier for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Human-readable label for this UI field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin.components.Field\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"React component to be rendered for this field within the Edit view. \", _jsx(_components.a, {\n              href: \"/docs/admin/components/#field-component\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin.components.Cell\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"React component to be rendered as a Cell within collection List views. \", _jsx(_components.a, {\n              href: \"/docs/admin/components/#field-component\",\n              children: \"More\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      type: 'ui', // required\\n      admin: {\\n        components: {\\n          Field: MyCustomUIField,\\n          Cell: MyCustomUICell,\\n        }\\n      }\\n    }\\n  ]\\n}\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "UI Field",
        "slug": "ui",
        "label": "UI",
        "order": 200,
        "desc": "UI fields are purely presentational and allow developers to customize the admin panel to a very fine degree, including adding actions and other functions.",
        "keywords": "custom field, react component, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h3: \"h3\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"The Upload field allows for the selection of a Document from a collection supporting Uploads, and formats the selection as a thumbnail in the Admin panel.\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important:\"\n        }), _jsx(\"br\", {}), \"\\nTo use this field, you need to have a Collection configured to allow Uploads. For more information, \", _jsx(\"a\", {\n          href: \"/docs/upload/overview\",\n          children: \"click here\"\n        }), \" to read about how to enable Uploads on a collection by collection basis.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example uses:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"To provide a \", _jsx(_components.code, {\n          children: \"Page\"\n        }), \" with a featured image\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"To allow for a \", _jsx(_components.code, {\n          children: \"Product\"\n        }), \" to deliver a downloadable asset like PDF or MP3\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"To give a layout building block the ability to feature a background image\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Config\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"name\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"To be used as the property name when stored and retrieved from the database. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-names\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"*relationTo\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"Provide a single collection \", _jsx(_components.code, {\n              children: \"slug\"\n            }), \" to allow this field to accept a relation to. \", _jsx(\"strong\", {\n              children: \"Note: the related collection must be configured to support Uploads.\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"filterOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A query to filter which options appear in the UI and validate against. \", _jsx(_components.a, {\n              href: \"#filtering-upload-options\",\n              children: \"More\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxDepth\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Sets a number limit on iterations of related documents to populate when queried. \", _jsx(_components.a, {\n              href: \"/docs/getting-started/concepts#depth\",\n              children: \"Depth\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"label\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Text used as a field label in the Admin panel or an object with keys for each language.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unique\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Enforce that each entry in the Collection has a unique value for this field.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validate\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide a custom validation function that will be executed on both the Admin panel and the backend. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#validation\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"index\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Build a \", _jsx(_components.a, {\n              href: \"https://docs.mongodb.com/manual/indexes/\",\n              children: \"MongoDB index\"\n            }), \" for this field to produce faster queries. Set this field to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" if your users will perform queries on this field's data often.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"saveToJWT\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If this field is top-level and nested in a config supporting \", _jsx(_components.a, {\n              href: \"/docs/authentication/config\",\n              children: \"Authentication\"\n            }), \", include its data in the user JWT.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hooks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based hooks to control logic for this field. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-hooks\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"access\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide field-based access control to denote what users can see and do with this field's data. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#field-level-access-control\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"hidden\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Restrict this field's visibility from all APIs entirely. Will still be saved to the database, but will not appear in any API or the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"defaultValue\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Provide data to be used for this field's default value. \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#default-values\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"localized\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable localization for this field. Requires \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"localization to be enabled\"\n            }), \" in the Base config.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"required\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Require this field to have a value.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"admin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Admin-specific configuration. See the \", _jsx(_components.a, {\n              href: \"/docs/fields/overview#admin-config\",\n              children: \"default field admin config\"\n            }), \" for more details.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/ExampleCollection.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleCollection: CollectionConfig = {\\n  slug: 'example-collection',\\n  fields: [\\n    {\\n      name: 'backgroundImage', // required\\n      type: 'upload', // required\\n      relationTo: 'media', // required\\n      required: true,\\n    }\\n  ]\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Filtering upload options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Options can be dynamically limited by supplying a \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"query constraint\"\n      }), \", which will be used both for validating input and filtering available uploads in the UI.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"filterOptions\"\n      }), \" property can either be a \", _jsx(_components.code, {\n        children: \"Where\"\n      }), \" query directly, or a function that returns one. When using a function, it will be called with an argument object with the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"relationTo\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"relationTo\"\n            }), \" to filter against (as defined on the field)\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"data\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object of the full collection or global document currently being edited\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"siblingData\"\n            })\n          }), _jsx(_components.td, {\n            children: \"An object of the document data limited to fields within the same parent to the field\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"id\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The value of the collection \", _jsx(_components.code, {\n              children: \"id\"\n            }), \", will be \", _jsx(_components.code, {\n              children: \"undefined\"\n            }), \" on create request\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"user\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The currently authenticated user object\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const uploadField = {\\n  name: 'image',\\n  type: 'upload',\\n  relationTo: 'media',\\n  filterOptions: {\\n    mimeType: { contains: 'image' },\\n  },\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can learn more about writing queries \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nWhen an upload field has both \", _jsx(\"strong\", {\n          children: \"filterOptions\"\n        }), \" and a custom \", _jsx(\"strong\", {\n          children: \"validate\"\n        }), \" function, the api will not validate \", _jsx(\"strong\", {\n          children: \"filterOptions\"\n        }), \" unless you call the default upload field validation function imported from \", _jsx(\"strong\", {\n          children: \"payload/fields/validations\"\n        }), \" in your validate function.\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Upload Field",
        "slug": "upload",
        "label": "Upload",
        "order": 210,
        "desc": "Upload fields will allow a file to be uploaded, only from a collection supporting Uploads. Learn how to use Upload fields, see examples and options.",
        "keywords": "upload, images media, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 3,
            "id": "config"
          },
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          },
          {
            "text": "Filtering upload options",
            "level": 3,
            "id": "filtering-upload-options"
          }
        ]
      }
    ]
  },
  {
    "slug": "Admin",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    em: \"em\",\n    code: \"code\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    strong: \"strong\",\n    h3: \"h3\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload dynamically generates a beautiful, fully functional React admin panel to manage your data. It's extremely powerful and can be customized / extended upon easily by swapping in your own React components. You can add additional views, modify how built-in views look / work, swap out Payload branding for your client's, build your own field types and much more.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Payload Admin panel is built with Webpack, code-split, highly performant (even with 100+ fields), and written fully in TypeScript.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsx(_components.p, {\n        children: \"The Admin panel is meant to be simple enough to give you a starting point but not bring too much complexity, so that you can easily customize it to suit the needs of your application and your editors.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"https://payloadcms.com/images/docs/admin.jpg\",\n        alt: \"Payload's Admin panel built in React\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"Screenshot of the Admin panel while editing a document from an example \", _jsx(_components.code, {\n          children: \"AllFields\"\n        }), \" collection\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Admin Options\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All options for the Admin panel are defined in your base Payload config file.\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"user\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"slug\"\n            }), \" of a Collection that you want be used to log in to the Admin dashboard. \", _jsx(_components.a, {\n              href: \"/docs/admin/overview#the-admin-user-collection\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"meta\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Base meta data to use for the Admin panel. Included properties are \", _jsx(_components.code, {\n              children: \"titleSuffix\"\n            }), \", \", _jsx(_components.code, {\n              children: \"ogImage\"\n            }), \", and \", _jsx(_components.code, {\n              children: \"favicon\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"disable\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \", the entire Admin panel will be disabled.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"indexHTML\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Optionally replace the entirety of the \", _jsx(_components.code, {\n              children: \"index.html\"\n            }), \" file used by the Admin panel. Reference the \", _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/blob/master/src/admin/index.html\",\n              children: \"base index.html file\"\n            }), \" to ensure your replacement has the appropriate HTML elements.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"css\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Absolute path to a stylesheet that you can use to override / customize the Admin panel styling. \", _jsx(_components.a, {\n              href: \"/docs/admin/customizing-css\",\n              children: \"More\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"scss\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Absolute path to a Sass variables / mixins stylesheet meant to override Payload styles to make for an easy re-skinning of the Admin panel. \", _jsx(_components.a, {\n              href: \"/docs/admin/customizing-css#overriding-scss-variables\",\n              children: \"More\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"dateFormat\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Global date format that will be used for all dates in the Admin panel. Any valid \", _jsx(_components.a, {\n              href: \"https://date-fns.org/\",\n              children: \"date-fns\"\n            }), \" format pattern can be used.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"avatar\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set account profile picture. Options: \", _jsx(_components.code, {\n              children: \"gravatar\"\n            }), \", \", _jsx(_components.code, {\n              children: \"default\"\n            }), \" or a custom React component.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"components\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Component overrides that affect the entirety of the Admin panel. \", _jsx(_components.a, {\n              href: \"/docs/admin/components\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"webpack\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Customize the Webpack config that's used to generate the Admin panel. \", _jsx(_components.a, {\n              href: \"/docs/admin/webpack\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"logoutRoute\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The route for the \", _jsx(_components.code, {\n              children: \"logout\"\n            }), \" page.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"inactivityRoute\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The route for the \", _jsx(_components.code, {\n              children: \"logout\"\n            }), \" inactivity page.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"The Admin User Collection\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important:\"\n        }), _jsx(\"br\", {}), \"\\nThe Payload Admin panel can only be used by one Collection that supports \", _jsx(\"a\", {\n          href: \"/docs/authentication/overview\",\n          children: \"Authentication\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To specify which Collection to use to log in to the Admin panel, pass the \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" options a \", _jsx(_components.code, {\n        children: \"user\"\n      }), \" key equal to the slug of the Collection that you'd like to use.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"payload.config.js\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload/config';\\n\\nconst config = buildConfig({\\n  admin: {\\n    user: 'admins', // highlight-line\\n  },\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, if you have not specified a Collection, Payload will automatically provide you with a \", _jsx(_components.code, {\n        children: \"User\"\n      }), \" Collection which will be used to access the Admin panel. You can customize or override the fields and settings of the default \", _jsx(_components.code, {\n        children: \"User\"\n      }), \" Collection by passing your own collection using \", _jsx(_components.code, {\n        children: \"users\"\n      }), \" as its \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \" to Payload. When this is done, Payload will use your provided \", _jsx(_components.code, {\n        children: \"User\"\n      }), \" Collection instead of its default version.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [\"Note: you can use whatever Collection you'd like to access the Admin panel as long as the Collection supports Authentication. It doesn't need to be called \", _jsx(_components.code, {\n          children: \"users\"\n        }), \"!\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, you may wish to have two Collections that both support \", _jsx(_components.code, {\n        children: \"Authentication\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"admins\"\n        }), \" - meant to have a higher level of permissions to manage your data and access the Admin panel\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"customers\"\n        }), \" - meant for end users of your app that should not be allowed to log into the Admin panel\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is totally possible. For the above scenario, by specifying \", _jsx(_components.code, {\n        children: \"admin: { user: 'admins' }\"\n      }), \", your Payload Admin panel will use \", _jsx(_components.code, {\n        children: \"admins\"\n      }), \". Any users logged in as \", _jsx(_components.code, {\n        children: \"customers\"\n      }), \" will not be able to log in via the Admin panel.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Light and dark modes\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Users in the admin panel have access to choosing between light mode and dark mode for their editing experience. The setting is managed while logged into the admin UI within the user account page and will be stored with the browser. By default, the operating system preference is detected and used.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Restricting user access\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you would like to restrict which users from a single Collection can access the Admin panel, you can use the \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" access control function. \", _jsx(_components.a, {\n        href: \"/docs/access-control/overview#admin\",\n        children: \"Click here\"\n      }), \" to learn more.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "The Admin Panel",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Manage your data and customize the Admin Panel by swapping in your own React components. Create, modify or remove views, fields, styles and much more.",
        "keywords": "admin, components, custom, customize, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Admin Options",
            "level": 2,
            "id": "admin-options"
          },
          {
            "text": "The Admin User Collection",
            "level": 3,
            "id": "the-admin-user-collection"
          },
          {
            "text": "Light and dark modes",
            "level": 3,
            "id": "light-and-dark-modes"
          },
          {
            "text": "Restricting user access",
            "level": 3,
            "id": "restricting-user-access"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    em: \"em\",\n    a: \"a\",\n    h4: \"h4\",\n    pre: \"pre\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"While designing the Payload Admin panel, we determined it should be as minimal and straightforward as possible to allow easy customization and control. There are many times where you may want to completely control how a whole view or a field works. You might even want to add in your own routes entirely. In order for Payload to support that level of customization without introducing versioning / future-proofing issues, Payload provides for a pattern to supply your own React components via your Payload config.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To swap in your own React component, first, consult the list of available component overrides below. Determine the scope that corresponds to what you are trying to accomplish, and then author your React component accordingly.\"\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"success\",\n      children: [_jsx(\"strong\", {\n        children: \"Tip:\"\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"Custom components will automatically be provided with all props that the\\ndefault component would accept.\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Base Component Overrides\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can override a set of admin panel-wide components by providing a component to your base Payload config's \", _jsx(_components.code, {\n        children: \"admin.components\"\n      }), \" property. The following options are available:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Nav\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Contains the sidebar and mobile Nav in its entirety.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"logout.Button\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A custom React component.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"BeforeDashboard\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Array of components to inject into the built-in Dashboard, \", _jsx(_components.em, {\n              children: \"before\"\n            }), \" the default dashboard contents.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"AfterDashboard\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Array of components to inject into the built-in Dashboard, \", _jsx(_components.em, {\n              children: \"after\"\n            }), \" the default dashboard contents. \", _jsx(_components.a, {\n              href: \"https://github.com/payloadcms/payload/tree/master/test/admin/components/AfterDashboard/index.tsx\",\n              children: \"Demo\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"BeforeLogin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Array of components to inject into the built-in Login, \", _jsx(_components.em, {\n              children: \"before\"\n            }), \" the default login form.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"AfterLogin\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Array of components to inject into the built-in Login, \", _jsx(_components.em, {\n              children: \"after\"\n            }), \" the default login form.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"BeforeNavLinks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Array of components to inject into the built-in Nav, \", _jsx(_components.em, {\n              children: \"before\"\n            }), \" the links themselves.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"AfterNavLinks\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Array of components to inject into the built-in Nav, \", _jsx(_components.em, {\n              children: \"after\"\n            }), \" the links.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"views.Account\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The Account view is used to show the currently logged in user's Account page.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"views.Dashboard\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The main landing page of the Admin panel.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"graphics.Icon\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Used as a graphic within the \", _jsx(_components.code, {\n              children: \"Nav\"\n            }), \" component. Often represents a condensed version of a full logo.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"graphics.Logo\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The full logo to be used in contexts like the \", _jsx(_components.code, {\n              children: \"Login\"\n            }), \" view.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"routes\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Define your own routes to add to the Payload Admin UI. \", _jsx(_components.a, {\n              href: \"#custom-routes\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"providers\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Define your own provider components that will wrap the Payload Admin UI. \", _jsx(_components.a, {\n              href: \"#custom-providers\",\n              children: \"More\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Full example:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"payload.config.js\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from \\\"payload/config\\\";\\nimport {\\n  MyCustomNav,\\n  MyCustomLogo,\\n  MyCustomIcon,\\n  MyCustomAccount,\\n  MyCustomDashboard,\\n  MyProvider,\\n} from \\\"./customComponents\\\";\\n\\nexport default buildConfig({\\n  admin: {\\n    components: {\\n      Nav: MyCustomNav,\\n      graphics: {\\n        Icon: MyCustomIcon,\\n        Logo: MyCustomLogo,\\n      },\\n      views: {\\n        Account: MyCustomAccount,\\n        Dashboard: MyCustomDashboard,\\n      },\\n      providers: [MyProvider],\\n    },\\n  },\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.em, {\n        children: [\"For more examples regarding how to customize components, look at the following \", _jsx(_components.a, {\n          href: \"https://github.com/payloadcms/payload/tree/master/test/admin/components\",\n          children: \"examples\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Collections\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can override components on a Collection-by-Collection basis via each Collection's \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" property.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"views.Edit\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used while a document within this Collection is being edited.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"views.List\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"List\"\n            }), \" view is used to render a paginated, filterable table of Documents in this Collection.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Globals\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As with Collections, You can override components on a global-by-global basis via their \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \" property.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"views.Edit\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used while this Global is being edited.\"\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Fields\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All Payload fields support the ability to swap in your own React components. So, for example, instead of rendering a default Text input, you might need to render a color picker that provides the editor with a custom color picker interface to restrict the data entered to colors only.\"\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"success\",\n      children: [_jsx(\"strong\", {\n        children: \"Tip:\"\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"Don't see a built-in field type that you need? Build it! Using a combination\\nof custom validation and custom components, you can override the entirety of\\nhow a component functions within the admin panel and effectively create your\\nown field type.\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Fields support the following custom components:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Component\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Filter\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Override the text input that is presented in the \", _jsx(_components.code, {\n              children: \"List\"\n            }), \" view when a user is filtering documents by the customized field.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Cell\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Used in the \", _jsx(_components.code, {\n              children: \"List\"\n            }), \" view's table to represent a table-based preview of the data stored in the field. \", _jsx(_components.a, {\n              href: \"#cell-component\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Field\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Swap out the field itself within all \", _jsx(_components.code, {\n              children: \"Edit\"\n            }), \" views. \", _jsx(_components.a, {\n              href: \"#field-component\",\n              children: \"More\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Cell Component\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These are the props that will be passed to your custom Cell to use in your own components.\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"field\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"An object that includes the field configuration.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"colIndex\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A unique number for the column in the list.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"collection\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"An object with the config of the collection that the field is in.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"cellData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The data for the field that the cell represents.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"rowData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"An object with all the field values for the row.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Example\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import React from \\\"react\\\";\\nimport \\\"./index.scss\\\";\\nconst baseClass = \\\"custom-cell\\\";\\n\\nconst CustomCell: React.FC<Props> = (props) => {\\n  const { field, colIndex, collection, cellData, rowData } = props;\\n\\n  return <span className={baseClass}>{cellData}</span>;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Field Component\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When writing your own custom components you can make use of a number of hooks to set data, get reactive changes to other fields, get the id of the document or interact with a context from a custom provider.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Sending and receiving values from the form\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When swapping out the \", _jsx(_components.code, {\n        children: \"Field\"\n      }), \" component, you'll be responsible for sending and receiving the field's \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" from the form itself. To do so, import the \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook as follows:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useField } from \\\"payload/components/forms\\\";\\n\\ntype Props = { path: string };\\n\\nconst CustomTextField: React.FC<Props> = ({ path }) => {\\n  // highlight-start\\n  const { value, setValue } = useField<Props>({ path });\\n  // highlight-end\\n\\n  return (\\n    <input onChange={(e) => setValue(e.target.value)} value={value.path} />\\n  );\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [\"For more information regarding the hooks that are available to you while you\\nbuild custom components, including the \", _jsx(\"strong\", {\n          children: \"useField\"\n        }), \" hook, \", _jsx(\"a\", {\n          href: \"/docs/admin/hooks\",\n          style: {\n            color: \"black\"\n          },\n          children: \"click here\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom routes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can easily add your own custom routes to the Payload Admin panel using the \", _jsx(_components.code, {\n        children: \"admin.components.routes\"\n      }), \" property. Payload currently uses the extremely powerful React Router v5.x and custom routes support all the properties of the React Router \", _jsx(_components.code, {\n        children: \"<Route />\"\n      }), \" component.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Custom routes support the following properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Component\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"Pass in the component that should be rendered when a user navigates to this route.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"path\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"React Router \", _jsx(_components.code, {\n              children: \"path\"\n            }), \". \", _jsx(_components.a, {\n              href: \"https://v5.reactrouter.com/web/api/Route/path-string-string\",\n              children: \"See the React Router docs\"\n            }), \" for more info.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"exact\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"React Router \", _jsx(_components.code, {\n              children: \"exact\"\n            }), \" property. \", _jsx(_components.a, {\n              href: \"https://v5.reactrouter.com/web/api/Route/exact-bool\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"strict\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"React Router \", _jsx(_components.code, {\n              children: \"strict\"\n            }), \" property. \", _jsx(_components.a, {\n              href: \"https://v5.reactrouter.com/web/api/Route/strict-bool\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"sensitive\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"React Router \", _jsx(_components.code, {\n              children: \"sensitive\"\n            }), \" property. \", _jsx(_components.a, {\n              href: \"https://v5.reactrouter.com/web/api/Route/sensitive-bool\",\n              children: \"More\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Custom route components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Your custom route components will be given all the props that a React Router \", _jsx(_components.code, {\n        children: \"<Route />\"\n      }), \" typically would receive, as well as two props from Payload:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Prop\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"user\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The currently logged in user. Will be \", _jsx(_components.code, {\n              children: \"null\"\n            }), \" if no user is logged in.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"canAccessAdmin\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"If the currently logged in user is allowed to access the admin panel or not.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(\"strong\", {\n        children: \"Note:\"\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"It's up to you to secure your custom routes. If your route requires a user to\\nbe logged in or to have certain access rights, you should handle that within\\nyour route component yourself.\"\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find examples of custom route views in the \", _jsxs(_components.a, {\n        href: \"https://github.com/payloadcms/payload/tree/master/test/admin/components/views\",\n        children: [\"Payload source code \", _jsx(_components.code, {\n          children: \"/test/admin/components/views\"\n        }), \" folder\"]\n      }), \". There, you'll find two custom routes:\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"A custom view that uses the \", _jsx(_components.code, {\n          children: \"DefaultTemplate\"\n        }), \", which is the built-in Payload template that displays the sidebar and \\\"eyebrow nav\\\"\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"A custom view that uses the \", _jsx(_components.code, {\n          children: \"MinimalTemplate\"\n        }), \" - which is just a centered template used for things like logging in or out\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To see how to pass in your custom views to create custom routes of your own, take a look at the \", _jsx(_components.code, {\n        children: \"admin.components.routes\"\n      }), \" property of the \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/blob/master/test/admin/config.ts\",\n        children: \"Payload test admin config\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom providers\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As your admin customizations gets more complex you may want to share state between fields or other components. You can add custom providers to do add your own context to any Payload app for use in other custom components within the admin panel. Within your config add \", _jsx(_components.code, {\n        children: \"admin.components.providers\"\n      }), \", these can be used to share context or provide other custom functionality. Read the \", _jsx(_components.a, {\n        href: \"https://reactjs.org/docs/context.html\",\n        children: \"React context\"\n      }), \" docs to learn more.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Reminder:\"\n        }), \" Don't forget to pass the \", _jsx(_components.strong, {\n          children: \"children\"\n        }), \" prop through\\nthe provider component for the admin UI to show\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Styling Custom Components\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload exports its SCSS variables and mixins for reuse in your own custom components. This is helpful in cases where you might want to style a custom input similarly to Payload's built-ini styling, so it blends more thoroughly into the existing admin UI.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To make use of Payload SCSS variables / mixins to use directly in your own components, you can import them as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"@import '~payload/scss';\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Getting the current language\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When developing custom components you can support multiple languages to be consistent with Payload's i18n support. The best way to do this is to add your translation resources to the \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/configuration/i18n\",\n        children: \"i18n configuration\"\n      }), \" and import \", _jsx(_components.code, {\n        children: \"useTranslation\"\n      }), \" from \", _jsx(_components.code, {\n        children: \"react-i18next\"\n      }), \" in your components.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useTranslation } from 'react-i18next';\\n\\nconst CustomComponent: React.FC = () => {\\n  // highlight-start\\n  const { t, i18n } = useTranslation('namespace1');\\n  // highlight-end\\n\\n  return (\\n    <ul>\\n      <li>{ t('key', { variable: 'value' }) }</li>\\n      <li>{ t('namespace2:key', { variable: 'value' }) }</li>\\n      <li>{ i18n.language }</li>\\n    </ul>\\n  );\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Getting the current locale\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In any custom component you can get the selected locale with the \", _jsx(_components.code, {\n        children: \"useLocale\"\n      }), \" hook. Here is a simple example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useLocale } from \\\"payload/components/utilities\\\";\\n\\nconst Greeting: React.FC = () => {\\n  // highlight-start\\n  const locale = useLocale();\\n  // highlight-end\\n\\n  const trans = {\\n    en: \\\"Hello\\\",\\n    es: \\\"Hola\\\",\\n  };\\n\\n  return <span> {trans[locale]} </span>;\\n};\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Swap in your own React components",
        "slug": "components",
        "label": "Custom Components",
        "order": 20,
        "desc": "Fully customize your Admin Panel by swapping in your own React components. Add fields, remove views, update routes and change functions to sculpt your perfect Dashboard.",
        "keywords": "admin, components, custom, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Base Component Overrides",
            "level": 3,
            "id": "base-component-overrides"
          },
          {
            "text": "Collections",
            "level": 3,
            "id": "collections"
          },
          {
            "text": "Globals",
            "level": 3,
            "id": "globals"
          },
          {
            "text": "Fields",
            "level": 3,
            "id": "fields"
          },
          {
            "text": "Cell Component",
            "level": 2,
            "id": "cell-component"
          },
          {
            "text": "Field Component",
            "level": 2,
            "id": "field-component"
          },
          {
            "text": "Sending and receiving values from the form",
            "level": 3,
            "id": "sending-and-receiving-values-from-the-form"
          },
          {
            "text": "Custom routes",
            "level": 2,
            "id": "custom-routes"
          },
          {
            "text": "Custom providers",
            "level": 2,
            "id": "custom-providers"
          },
          {
            "text": "Styling Custom Components",
            "level": 3,
            "id": "styling-custom-components"
          },
          {
            "text": "Getting the current language",
            "level": 3,
            "id": "getting-the-current-language"
          },
          {
            "text": "Getting the current locale",
            "level": 3,
            "id": "getting-the-current-locale"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\",\n    em: \"em\",\n    strong: \"strong\",\n    h5: \"h5\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload provides a variety of powerful hooks that can be used within your own React components. With them, you can interface with Payload itself and build just about any type of complex customization you can think of—directly in familiar React code.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"useField\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook is used internally within every applicable Payload field component, and it manages sending and receiving a field's state from its parent form.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Outside of internal use, its most common use-case is in custom \", _jsx(_components.code, {\n        children: \"Field\"\n      }), \" components. When you build a custom React \", _jsx(_components.code, {\n        children: \"Field\"\n      }), \" component, you'll be responsible for sending and receiving the field's \", _jsx(_components.code, {\n        children: \"value\"\n      }), \" from the form itself. To do so, import the \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook as follows:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useField } from 'payload/components/forms'\\n\\ntype Props = { path: string }\\n\\nconst CustomTextField: React.FC<Props> = ({ path }) => {\\n  // highlight-start\\n  const { value, setValue } = useField<string>({ path })\\n  // highlight-end\\n\\n  return <input onChange={e => setValue(e.target.value)} value={value.path} />\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook accepts an \", _jsx(_components.code, {\n        children: \"args\"\n      }), \" object and sends back information and helpers for you to make use of:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const field = useField<string>({\\n  path: 'fieldPathHere', // required\\n  validate: myValidateFunc, // optional\\n  disableFormData?: false, // if true, the field's data will be ignored\\n  condition?: myConditionHere, // optional, used to skip validation if condition fails\\n})\\n\\n// Here is what `useField` sends back\\nconst {\\n  showError, // whether or not the field should show as errored\\n  errorMessage, // the error message to show, if showError\\n  value, // the current value of the field from the form\\n  formSubmitted, // if the form has been submitted\\n  formProcessing, // if the form is currently processing\\n  setValue, // method to set the field's value in form state\\n  initialValue, // the initial value that the field mounted with\\n} = field;\\n\\n// The rest of your component goes here\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"useFormFields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"There are times when a custom field component needs to have access to data from other fields, and you have a few options to do so. The \", _jsx(_components.code, {\n        children: \"useFormFields\"\n      }), \" hook is a powerful and highly performant way to retrieve a form's field state, as well as to retrieve the \", _jsx(_components.code, {\n        children: \"dispatchFields\"\n      }), \" method, which can be helpful for setting other fields' form states from anywhere within a form.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"This hook is great for retrieving only certain fields from form state\"\n        }), \" because it ensures that it will only cause a rerender when the items that you ask for change.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Thanks to the awesome package \", _jsx(_components.a, {\n        href: \"https://github.com/dai-shi/use-context-selector\",\n        children: _jsx(_components.code, {\n          children: \"use-context-selector\"\n        })\n      }), \", you can retrieve a specific field's state easily. This is ideal because you can ensure you have an up-to-date field state, and your component will only re-render when \", _jsx(_components.em, {\n        children: \"that field's state\"\n      }), \" changes.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can pass a Redux-like selector into the hook, which will ensure that you retrieve only the field that you want. The selector takes an argument with type of \", _jsx(_components.code, {\n        children: \"[fields: Fields, dispatch: React.Dispatch<Action>]]\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useFormFields } from 'payload/components/forms';\\n\\nconst MyComponent: React.FC = () => {\\n  // Get only the `amount` field state, and only cause a rerender when that field changes\\n  const amount = useFormFields(([fields, dispatch]) => fields.amount);\\n\\n  // Do the same thing as above, but to the `feePercentage` field\\n  const feePercentage = useFormFields(([fields, dispatch]) => fields.feePercentage);\\n\\n  if (typeof amount?.value !== 'undefined' && typeof feePercentage?.value !== 'undefined') {\\n    return (\\n      <span>The fee is ${(amount.value * feePercentage.value) / 100}</span>\\n    );\\n  }\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"useAllFormFields\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"To retrieve more than one field\"\n      }), \", you can use the \", _jsx(_components.code, {\n        children: \"useAllFormFields\"\n      }), \" hook. Your component will re-render when \", _jsx(_components.em, {\n        children: \"any\"\n      }), \" field changes, so use this hook only if you absolutely need to. Unlike the \", _jsx(_components.code, {\n        children: \"useFormFields\"\n      }), \" hook, this hook does not accept a \\\"selector\\\", and it always returns an array with type of \", _jsx(_components.code, {\n        children: \"[fields: Fields, dispatch: React.Dispatch<Action>]]\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can do lots of powerful stuff by retrieving the full form state, like using built-in helper functions to reduce field state to values only, or to retrieve sibling data by path.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useAllFormFields, reduceFieldsToValues, getSiblingData } from 'payload/components/forms';\\n\\nconst ExampleComponent: React.FC = () => {\\n  // the `fields` const will be equal to all fields' state,\\n  // and the `dispatchFields` method is usable to send field state up to the form\\n  const [fields, dispatchFields] = useAllFormFields();\\n\\n  // Pass in fields, and indicate if you'd like to \\\"unflatten\\\" field data.\\n  // The result below will reflect the data stored in the form at the given time\\n  const formData = reduceFieldsToValues(fields, true);\\n\\n  // Pass in field state and a path,\\n  // and you will be sent all sibling data of the path that you've specified\\n  const siblingData = getSiblingData(fields, 'someFieldName');\\n\\n  return (\\n    // return some JSX here if necessary\\n  )\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Updating other fields' values\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are building a custom component, then you should use \", _jsx(_components.code, {\n        children: \"setValue\"\n      }), \" which is returned from the \", _jsx(_components.code, {\n        children: \"useField\"\n      }), \" hook to programmatically set your field's value. But if you're looking to update \", _jsx(_components.em, {\n        children: \"another\"\n      }), \" field's value, you can use \", _jsx(_components.code, {\n        children: \"dispatchFields\"\n      }), \" returned from \", _jsx(_components.code, {\n        children: \"useFormFields\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can send the following actions to the \", _jsx(_components.code, {\n        children: \"dispatchFields\"\n      }), \" function.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Action\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"ADD_ROW\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Adds a row of data (useful in array / block field data)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"DUPLICATE_ROW\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Duplicates a row of data (useful in array / block field data)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"MODIFY_CONDITION\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Updates a field's conditional logic result (true / false)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"MOVE_ROW\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Moves a row of data (useful in array / block field data)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"REMOVE\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Removes a field from form state\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"REMOVE_ROW\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Removes a row of data from form state (useful in array / block field data)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"REPLACE_STATE\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Completely replaces form state\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"UPDATE\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Update any property of a specific field's state\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To see types for each action supported within the \", _jsx(_components.code, {\n        children: \"dispatchFields\"\n      }), \" hook, check out the Form types \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/blob/master/src/admin/components/forms/Form/types.ts\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"useForm\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useForm\"\n      }), \" hook can be used to interact with the form itself, and sends back many methods that can be used to reactively fetch form state without causing rerenders within your components each time a field is changed. This is useful if you have action-based callbacks that your components fire, and need to interact with form state \", _jsx(_components.em, {\n        children: \"based on a user action\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Warning:\"\n        }), _jsx(\"br\", {}), \"\\nThis hook is optimized to avoid causing rerenders when fields change, and as such, its \", _jsx(_components.code, {\n          children: \"fields\"\n        }), \" property will be out of date. You should only leverage this hook if you need to perform actions against the form in response to your users' actions. Do not rely on its returned \\\"fields\\\" as being up-to-date. They will be removed from this hook's response in an upcoming version.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useForm\"\n      }), \" hook returns an object with the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Action\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fields\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Deprecated. This property cannot be relied on as up-to-date.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"submit\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Method to trigger the form to submit\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"dispatchFields\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Dispatch actions to the form field state\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"validateForm\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Trigger a validation of the form state\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"createFormData\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Create a \", _jsx(_components.code, {\n              children: \"multipart/form-data\"\n            }), \" object from the current form's state\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"disabled\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Boolean denoting whether or not the form is disabled\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getFields\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Gets all fields from state\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getField\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Gets a single field from state by path\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Returns the data stored in the form\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getSiblingData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Returns form sibling data for the given field path\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setModified\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set the form's \", _jsx(_components.code, {\n              children: \"modified\"\n            }), \" state\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setProcessing\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set the form's \", _jsx(_components.code, {\n              children: \"processing\"\n            }), \" state\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setSubmitted\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set the form's \", _jsx(_components.code, {\n              children: \"submitted\"\n            }), \" state\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"formRef\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The ref from the form HTML element\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"reset\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Method to reset the form to its initial state\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"useDocumentInfo\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"useDocumentInfo\"\n      }), \" hook provides lots of information about the document currently being edited, including the following:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"collection\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"If the doc is a collection, its collection config will be returned\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"global\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"If the doc is a global, its global config will be returned\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"type\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The type of document being edited (collection or global)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"id\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"If the doc is a collection, its ID will be returned\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"preferencesKey\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"preferences\"\n            }), \" key to use when interacting with document-level user preferences\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"versions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Versions of the current doc\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unpublishedVersions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Unpublished versions of the current doc\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"publishedDoc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The currently published version of the doc being edited\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getVersions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Method to trigger the retrieval of document versions\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"docPermissions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The current documents permissions. Collection document permissions fallback when no id is present (i.e. on create)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"getDocPermissions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Method to trigger the retrieval of document level permissions\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useDocumentInfo } from 'payload/components/utilities';\\n\\nconst LinkFromCategoryToPosts: React.FC = () => {\\n  // highlight-start\\n  const { id } = useDocumentInfo();\\n  // highlight-end\\n\\n  // id will be undefined on the create form\\n  if (!id) {\\n    return null;\\n  }\\n\\n  return (\\n    <a href={`/admin/collections/posts?where[or][0][and][0][category][in][0]=[${id}]`} >\\n      View posts\\n    </a>\\n  )\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"useLocale\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In any custom component you can get the selected locale with the \", _jsx(_components.code, {\n        children: \"useLocale\"\n      }), \" hook. Here is a simple example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useLocale } from 'payload/components/utilities';\\n\\nconst Greeting: React.FC = () => {\\n  // highlight-start\\n  const locale = useLocale();\\n  // highlight-end\\n\\n  const trans = {\\n    en: 'Hello',\\n    es: 'Hola',\\n  };\\n\\n  return (\\n    <span> { trans[locale] } </span>\\n  );\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"useAuth\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Useful to retrieve info about the currently logged in user as well as methods for interacting with it. It sends back an object with the following properties:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"user\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The currently logged in user\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"logOut\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A method to log out the currently logged in user\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"refreshCookie\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A method to trigger the silent refreshing of a user's auth token\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"setToken\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Set the token of the user, to be decoded and used to reset the user and token in memory\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"token\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The logged in user's token (useful for creating preview links, etc.)\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"permissions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The permissions of the current user\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useAuth } from 'payload/components/utilities';\\nimport { User } from '../payload-types.ts';\\n\\nconst Greeting: React.FC = () => {\\n  // highlight-start\\n  const { user } = useConfig<User>();\\n  // highlight-end\\n\\n  return (\\n    <span>Hi, {user.email}!</span>\\n  );\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"useConfig\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Used to easily fetch the full Payload config.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useConfig } from 'payload/components/utilities';\\n\\nconst MyComponent: React.FC = () => {\\n  // highlight-start\\n  const config = useConfig();\\n  // highlight-end\\n\\n  return (\\n    <span>{config.serverURL}</span>\\n  );\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"useEditDepth\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Sends back how many editing levels \\\"deep\\\" the current component is. Edit depth is relevant while adding new documents / editing documents in modal windows and other cases.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"import { useEditDepth } from 'payload/components/utilities';\\n\\nconst MyComponent: React.FC = () => {\\n  // highlight-start\\n  const editDepth = useEditDepth();\\n  // highlight-end\\n\\n  return (\\n    <span>My component is {editDepth} levels deep</span>\\n  )\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"usePreferences\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Returns methods to set and get user preferences. More info can be found \", _jsx(_components.a, {\n        href: \"https://payloadcms.com/docs/admin/preferences\",\n        children: \"here\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "React Hooks",
        "slug": "hooks",
        "label": "React Hooks",
        "order": 30,
        "desc": "Make use of all of the powerful React hooks that Payload provides.",
        "keywords": "admin, components, custom, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "useField",
            "level": 3,
            "id": "usefield"
          },
          {
            "text": "useFormFields",
            "level": 3,
            "id": "useformfields"
          },
          {
            "text": "useAllFormFields",
            "level": 3,
            "id": "useallformfields"
          },
          {
            "text": "useForm",
            "level": 3,
            "id": "useform"
          },
          {
            "text": "useDocumentInfo",
            "level": 3,
            "id": "usedocumentinfo"
          },
          {
            "text": "useLocale",
            "level": 3,
            "id": "uselocale"
          },
          {
            "text": "useAuth",
            "level": 3,
            "id": "useauth"
          },
          {
            "text": "useConfig",
            "level": 3,
            "id": "useconfig"
          },
          {
            "text": "useEditDepth",
            "level": 3,
            "id": "useeditdepth"
          },
          {
            "text": "usePreferences",
            "level": 3,
            "id": "usepreferences"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h3, {\n      children: \"Adding your own CSS / SCSS\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can add your own CSS by providing your base Payload config with a path to your own CSS or SCSS. Customize the styling of any part of the Payload dashboard as necessary.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To do so, provide your base Payload config with a path to your own stylesheet. It can be either a CSS or SCSS file.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example in payload.config.js:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload/config';\\nimport path from 'path';\\n\\nconst config = buildConfig({\\n\\tadmin: {\\n\\t\\tcss: path.resolve(__dirname, 'relative/path/to/stylesheet.scss'),\\n\\t},\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Overriding built-in styles\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To make it as easy as possible for you to override our styles, Payload uses \", _jsx(_components.a, {\n        href: \"http://getbem.com/\",\n        children: \"BEM naming conventions\"\n      }), \" for all CSS within the Admin UI. If you provide your own CSS, you can override any built-in styles easily.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In addition to adding your own style definitions, you can also override Payload's built-in CSS variables. We use as much as possible behind the scenes, and you can override any of them that you'd like to.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can find the built-in Payload CSS variables within \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/blob/master/src/admin/scss/app.scss\",\n        children: _jsx(_components.code, {\n          children: \"./src/admin/scss/app.scss\"\n        })\n      }), \" and \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/blob/master/src/admin/scss/colors.scss\",\n        children: _jsx(_components.code, {\n          children: \"./src/admin/scss/colors.scss\"\n        })\n      }), \". The following variables are defined and can be overridden:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Breakpoints\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Base color shades (white to black by default)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Success / warning / error color shades\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Theme-specific colors (background, input background, text color, etc.)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Elevation colors (used to determine how \\\"bright\\\" something should be when compared to the background)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Fonts\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Horizontal gutter\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Dark mode\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsx(_components.p, {\n        children: \"If you're overriding colors or theme elevations, make sure to consider how your changes will affect dark mode.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, Payload automatically overrides all \", _jsx(_components.code, {\n        children: \"--theme-elevation\"\n      }), \"s and inverts all success / warning / error shades to suit dark mode. We also update some base theme variables like \", _jsx(_components.code, {\n        children: \"--theme-bg\"\n      }), \", \", _jsx(_components.code, {\n        children: \"--theme-text\"\n      }), \", etc.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Customizing CSS & SCSS",
        "slug": "customizing-css",
        "label": "Customizing CSS",
        "order": 40,
        "desc": "Customize your Payload admin panel further by adding your own CSS or SCSS style sheet to the configuration, powerful theme and design options are waiting for you.",
        "keywords": "admin, css, scss, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Adding your own CSS / SCSS",
            "level": 3,
            "id": "adding-your-own-css-scss"
          },
          {
            "text": "Overriding built-in styles",
            "level": 3,
            "id": "overriding-built-in-styles"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    code: \"code\",\n    h3: \"h3\",\n    ul: \"ul\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    h5: \"h5\",\n    strong: \"strong\",\n    h2: \"h2\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"As your users interact with your Admin panel, you might want to store their preferences in a persistent manner, so that when they revisit the Admin panel, they can pick right back up where they left off.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Out of the box, Payload handles the persistence of your users' preferences in a handful of ways, including:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Collection \", _jsx(_components.code, {\n          children: \"List\"\n        }), \" view active columns, and their order, that users define\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Their last active locale\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The \\\"collapsed\\\" state of blocks, on a document level, as users edit or interact with documents\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important:\"\n        }), _jsx(\"br\", {}), \"\\nAll preferences are stored on an individual user basis. Payload automatically recognizes the user that is reading or setting a preference via all provided authentication methods.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Use cases\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This API is used significantly for internal operations of the Admin panel, as mentioned above. But, if you're building your own React components for use in the Admin panel, you can allow users to set their own preferences in correspondence to their usage of your components. For example:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"If you have built a \\\"color picker\\\", you could \\\"remember\\\" the last used colors that the user has set for easy access next time\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If you've built a custom \", _jsx(_components.code, {\n          children: \"Nav\"\n        }), \" component, and you've built in an \\\"accordion-style\\\" UI, you might want to store the \", _jsx(_components.code, {\n          children: \"collapsed\"\n        }), \" state of each Nav collapsible item. This way, if an editor returns to the panel, their \", _jsx(_components.code, {\n          children: \"Nav\"\n        }), \" state is persisted automatically\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"You might want to store \", _jsx(_components.code, {\n          children: \"recentlyAccessed\"\n        }), \" documents to give admin editors an easy shortcut back to their recently accessed documents on the \", _jsx(_components.code, {\n          children: \"Dashboard\"\n        }), \" or similar\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Many other use cases exist. Invent your own! Give your editors an intelligent and persistent editing experience.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Database\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload automatically creates an internally used \", _jsx(_components.code, {\n        children: \"_preferences\"\n      }), \" collection that stores user preferences. Each document in the \", _jsx(_components.code, {\n        children: \"_preferences\"\n      }), \" collection contains the following shape:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Key\"\n          }), _jsx(_components.th, {\n            children: \"Value\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"id\"\n            })\n          }), _jsx(_components.td, {\n            children: \"A unique ID for each preference stored.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"key\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A unique \", _jsx(_components.code, {\n              children: \"key\"\n            }), \" that corresponds to the preference.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"user\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The ID of the \", _jsx(_components.code, {\n              children: \"user\"\n            }), \" that is storing its preference.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"userCollection\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The \", _jsx(_components.code, {\n              children: \"slug\"\n            }), \" of the collection that the \", _jsx(_components.code, {\n              children: \"user\"\n            }), \" is logged in as.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"value\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The value of the preference. Can be any data shape that you need.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"createdAt\"\n            })\n          }), _jsx(_components.td, {\n            children: \"A timestamp of when the preference was created.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"updatedAt\"\n            })\n          }), _jsx(_components.td, {\n            children: \"A timestamp set to the last time the preference was updated.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"APIs\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Preferences are available to both \", _jsx(_components.a, {\n        href: \"/docs/graphql/overview#preferences\",\n        children: \"GraphQL\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"/docs/rest-api/overview#\",\n        children: \"REST\"\n      }), \" APIs.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Adding or reading Preferences in your own components\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Payload admin panel offers a \", _jsx(_components.code, {\n        children: \"usePreferences\"\n      }), \" hook. The hook is only meant for use within the admin panel itself. It provides you with two methods:\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: _jsx(_components.code, {\n        children: \"getPreference\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This async method provides an easy way to retrieve a user's preferences by \", _jsx(_components.code, {\n        children: \"key\"\n      }), \". It will return a promise containing the resulting preference value.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Arguments\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"key\"\n        }), \": the \", _jsx(_components.code, {\n          children: \"key\"\n        }), \" of your preference to retrieve.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: _jsx(_components.code, {\n        children: \"setPreference\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also async, this method provides you with an easy way to set a user preference. It returns \", _jsx(_components.code, {\n        children: \"void\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Arguments:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"key\"\n        }), \": the \", _jsx(_components.code, {\n          children: \"key\"\n        }), \" of your preference to set.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"value\"\n        }), \": the \", _jsx(_components.code, {\n          children: \"value\"\n        }), \" of your preference that you're looking to set.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example for how you can utilize \", _jsx(_components.code, {\n        children: \"usePreferences\"\n      }), \" within your custom Admin panel components. Note - this example is not fully useful and is more just a reference for how to utilize the Preferences API. In this case, we are demonstrating how to set and retrieve a user's last used colors history within a \", _jsx(_components.code, {\n        children: \"ColorPicker\"\n      }), \" or similar type component.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"import React, { Fragment, useState, useEffect, useCallback } from 'react';\\nimport { usePreferences } from 'payload/components/preferences';\\n\\nconst lastUsedColorsPreferenceKey = 'last-used-colors';\\n\\nconst CustomComponent = (props) => {\\n  const { getPreference, setPreference } = usePreferences();\\n\\n  // Store the last used colors in local state\\n  const [lastUsedColors, setLastUsedColors] = useState([]);\\n\\n  // Callback to add a color to the last used colors\\n  const updateLastUsedColors = useCallback((color) => {\\n    // First, check if color already exists in last used colors.\\n    // If it already exists, there is no need to update preferences\\n    const colorAlreadyExists = lastUsedColors.indexOf(color) > -1;\\n\\n    if (!colorAlreadyExists) {\\n      const newLastUsedColors = [\\n        ...lastUsedColors,\\n        color,\\n      ];\\n\\n      setLastUsedColors(newLastUsedColors);\\n      setPreference(lastUsedColorsPreferenceKey, newLastUsedColors);\\n    }\\n  }, [lastUsedColors, setPreference]);\\n\\n  // Retrieve preferences on component mount\\n  // This will only be run one time, because the `getPreference` method never changes\\n  useEffect(() => {\\n    const asyncGetPreference = async () => {\\n      const lastUsedColorsFromPreferences = await getPreference(lastUsedColorsPreferenceKey);\\n      setLastUsedColors(lastUsedColorsFromPreferences);\\n    };\\n\\n    asyncGetPreference();\\n  }, [getPreference]);\\n\\n  return (\\n    <div>\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => updateLastUsedColors('red')}\\n      >\\n        Use red\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => updateLastUsedColors('blue')}\\n      >\\n        Use blue\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => updateLastUsedColors('purple')}\\n      >\\n        Use purple\\n      </button>\\n      <button\\n        type=\\\"button\\\"\\n        onClick={() => updateLastUsedColors('yellow')}\\n      >\\n        Use yellow\\n      </button>\\n      {lastUsedColors && (\\n        <Fragment>\\n          <h5>Last used colors:</h5>\\n          <ul>\\n            {lastUsedColors?.map((color) => (\\n              <li key={color}>\\n                {color}\\n              </li>\\n            ))}\\n          </ul>\\n        </Fragment>\\n      )}\\n    </div>\\n  );\\n};\\n\\nexport default CustomComponent;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Managing User Preferences",
        "slug": "preferences",
        "label": "Preferences",
        "order": 50,
        "desc": "Store the preferences of your users as they interact with the Admin panel.",
        "keywords": "admin, preferences, custom, customize, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Use cases",
            "level": 3,
            "id": "use-cases"
          },
          {
            "text": "Database",
            "level": 3,
            "id": "database"
          },
          {
            "text": "APIs",
            "level": 3,
            "id": "apis"
          },
          {
            "text": "Adding or reading Preferences in your own components",
            "level": 3,
            "id": "adding-or-reading-preferences-in-your-own-components"
          },
          {
            "text": "Example",
            "level": 2,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload uses Webpack 5 to build the Admin panel. It comes with support for many common functionalities such as SCSS and Typescript out of the box, but there are many cases where you may need to add support for additional functionalities.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To extend the Webpack config, add the \", _jsx(_components.code, {\n        children: \"webpack\"\n      }), \" key to your base Payload config, and provide a function that accepts the default Webpack config as its only argument:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"payload.config.ts\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload/config';\\n\\nexport default buildConfig({\\n\\tadmin: {\\n\\t\\t// highlight-start\\n\\t\\twebpack: (config) => {\\n\\t\\t\\t// Do something with the config here\\n\\n\\t\\t\\treturn config;\\n\\t\\t}\\n\\t\\t// highlight-end\\n\\t}\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Aliasing server-only modules\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A common use case for extending the Payload config is to alias server-only modules, thus preventing them from inclusion into the browser JavaScript bundle.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As the Payload config is used in both server \", _jsx(_components.strong, {\n        children: \"and\"\n      }), \" client contexts, you may find yourself writing code in your Payload config that may be incompatible with browser environments.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Examples of \", _jsx(_components.strong, {\n        children: \"non\"\n      }), \" browser-friendly packages:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"fs\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"stripe\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"authorizenet\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"nodemailer\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You may rely on server-only packages such as the above to perform logic in access control functions, hooks, and other contexts (which is great!) but when you boot up your Payload app and try to view it in the browser, you'll likely run into missing dependency issues or other general incompatibilities.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nTo avoid problems with server code making it to your Webpack bundle, you can use the \", _jsx(\"strong\", {\n          children: \"alias\"\n        }), \" Webpack feature to tell Webpack to avoid importing the modules you want to restrict to server-only.\"]\n      })\n    }), \"\\n\", _jsxs(\"strong\", {\n      children: [\"For example, let's say that you have a Collection called \", _jsx(_components.code, {\n        children: \"Subscriptions\"\n      }), \" which relies on Stripe:\"]\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/Subscriptions/index.js\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\nimport createStripeSubscription from './hooks/createStripeSubscription';\\n\\nconst Subscription: CollectionConfig = {\\n\\tslug: 'subscriptions',\\n\\thooks: {\\n\\t\\tbeforeChange: [\\n\\t\\t\\tcreateStripeSubscription,\\n\\t\\t]\\n\\t},\\n\\tfields: [\\n\\t\\t{\\n\\t\\t\\tname: 'stripeSubscriptionID',\\n\\t\\t\\ttype: 'text',\\n\\t\\t\\trequired: true,\\n\\t\\t}\\n\\t]\\n};\\n\\nexport default Subscription;\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The collection above features a \", _jsx(_components.code, {\n        children: \"beforeChange\"\n      }), \" hook that creates a Stripe subscription whenever a Subscription document is created in Payload.\"]\n    }), \"\\n\", _jsx(\"strong\", {\n      children: \"That hook might look something like this:\"\n    }), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(\"br\", {}), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/Subscriptions/hooks/createStripeSubscription.js\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"import Stripe from 'stripe';\\n\\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY);\\n\\nconst createStripeSubscription = async ({ data, operation }) => {\\n\\tif (operation === 'create') {\\n\\t\\tconst dataWithStripeID = {...data};\\n\\n\\t\\t// use Stripe to create a Stripe subscription\\n\\t\\tconst subscription = await stripe.subscriptions.create({\\n\\t\\t\\t// Configure the subscription accordingly\\n\\t\\t});\\n\\n\\t\\t// Automatically add the Stripe subscription ID\\n\\t\\t// to the data that will be saved to this Subscription doc\\n    dataWithStripeID.stripeSubscriptionID = subscription.id;\\n\\n    return dataWithStripeID\\n\\t}\\n\\n\\treturn data;\\n}\\n\\nexport default createStripeSubscription;\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"error\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Warning:\"\n        }), _jsx(\"br\", {}), \"\\nThe above code is NOT production-ready and should not be referenced to create Stripe subscriptions. Although creating a beforeChange hook is a completely valid spot to do things like create subscriptions, the code above is incomplete and insecure, meant for explanation purposes only.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"As-is, this collection will prevent your Admin panel from bundling or loading correctly, because Stripe relies on some Node-only packages.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To remedy this issue you can extend the Payload Webpack config to alias your entire \", _jsx(_components.code, {\n        children: \"createStripeSubscription\"\n      }), \" hook to a separate, empty mock file.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Example in \", _jsx(_components.code, {\n        children: \"payload.config.js\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"import { buildConfig } from 'payload/config';\\nimport path from 'path';\\nimport Subscription from './collections/Subscription';\\n\\nconst createStripeSubscriptionPath = path.resolve(__dirname, 'collections/Subscription/hooks/createStripeSubscription.js');\\nconst mockModulePath = path.resolve(__dirname, 'mocks/emptyObject.js');\\n\\nexport default buildConfig({\\n\\tcollections: [\\n\\t\\tSubscription\\n\\t],\\n\\tadmin: {\\n\\t\\twebpack: (config) => ({\\n\\t\\t\\t...config,\\n\\t\\t\\tresolve: {\\n\\t\\t\\t\\t...config.resolve,\\n\\t\\t\\t\\talias: {\\n\\t\\t\\t\\t\\t...config.resolve.alias,\\n\\t\\t\\t\\t\\t[createStripeSubscriptionPath]: mockModulePath,\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t})\\n\\t}\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The above code will alias the file at path \", _jsx(_components.code, {\n        children: \"createStripeSubscriptionPath\"\n      }), \" to a mocked module, which might look like this:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"mocks/emptyObject.js\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"export default {};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now, when Webpack sees that you're attempting to import your \", _jsx(_components.code, {\n        children: \"createStripeSubscriptionPath\"\n      }), \" file, it'll disregard that actual file and load your mock file instead. Not only will your Admin panel now bundle successfully, you will have optimized its filesize by removing unnecessary code! And you might have learned something about Webpack, too.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nIf changes to your Webpack aliases are not surfacing, they might be \", _jsx(_components.a, {\n          href: \"https://webpack.js.org/configuration/cache/\",\n          children: \"cached\"\n        }), \" in \", _jsx(_components.code, {\n          children: \"node_modules/.cache/webpack\"\n        }), \". Try deleting that folder and restarting your server.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Admin environment vars\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important:\"\n        }), _jsx(\"br\", {}), \"\\nBe careful about what variables you provide to your client-side code. Analyze every single one to make sure that you're not accidentally leaking anything that an attacker could exploit. Only keys that are safe to be available to everyone in plain text should be provided to your Admin panel.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, \", _jsx(_components.code, {\n        children: \"env\"\n      }), \" variables are \", _jsx(_components.strong, {\n        children: \"not\"\n      }), \" provided to the Admin panel for security and safety reasons. But, Payload provides you with a way to still provide \", _jsx(_components.code, {\n        children: \"env\"\n      }), \" vars to your frontend code.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [\"Payload will automatically supply any present \", _jsx(_components.code, {\n          children: \"env\"\n        }), \" variables that are prefixed with \", _jsx(_components.code, {\n          children: \"PAYLOAD_PUBLIC_\"\n        }), \" directly to the Admin panel.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, if you've got the following environment variable:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"PAYLOAD_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_test_XXXXXXXXXXXXXXXXXX\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This key will automatically be made available to the Payload bundle and can be referenced in your Admin component code as \", _jsx(_components.code, {\n        children: \"process.env.PAYLOAD_PUBLIC_STRIPE_PUBLISHABLE_KEY\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Webpack",
        "slug": "webpack",
        "label": "Webpack",
        "order": 60,
        "desc": "The Payload admin panel uses Webpack 5 and supports many common functionalities such as SCSS and Typescript out of the box to give you more freedom.",
        "keywords": "admin, webpack, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Aliasing server-only modules",
            "level": 3,
            "id": "aliasing-server-only-modules"
          },
          {
            "text": "Admin environment vars",
            "level": 2,
            "id": "admin-environment-vars"
          }
        ]
      }
    ]
  },
  {
    "slug": "Access-Control",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    a: \"a\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    pre: \"pre\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {YouTube, Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  if (!YouTube) _missingMdxReference(\"YouTube\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Access control within Payload is extremely powerful while remaining easy and intuitive to manage. Declaring who should have access to what documents is no more complex than writing a simple JavaScript function that either returns a \", _jsx(_components.code, {\n        children: \"boolean\"\n      }), \" or a \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: _jsx(_components.code, {\n          children: \"query\"\n        })\n      }), \" constraint to restrict which documents users can interact with.\"]\n    }), \"\\n\", _jsx(YouTube, {\n      id: \"DoPLyXG26Dg\",\n      title: \"Overview of Payload Access Control\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example use cases:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Allowing anyone \", _jsx(_components.code, {\n          children: \"read\"\n        }), \" access to all \", _jsx(_components.code, {\n          children: \"Post\"\n        }), \"s\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Only allowing public access to \", _jsx(_components.code, {\n          children: \"Post\"\n        }), \"s where a \", _jsx(_components.code, {\n          children: \"status\"\n        }), \" field is equal to \", _jsx(_components.code, {\n          children: \"published\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Giving only \", _jsx(_components.code, {\n          children: \"User\"\n        }), \"s with a \", _jsx(_components.code, {\n          children: \"role\"\n        }), \" field equal to \", _jsx(_components.code, {\n          children: \"admin\"\n        }), \" the ability to delete \", _jsx(_components.code, {\n          children: \"Page\"\n        }), \"(s)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Allowing anyone to create \", _jsx(_components.code, {\n          children: \"ContactSubmission\"\n        }), \"s, but only logged in users to \", _jsx(_components.code, {\n          children: \"read\"\n        }), \", \", _jsx(_components.code, {\n          children: \"update\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"delete\"\n        }), \" them\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Restricting a \", _jsx(_components.code, {\n          children: \"User\"\n        }), \" to only be able to see their own \", _jsx(_components.code, {\n          children: \"Order\"\n        }), \"(s), but no others\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Allowing \", _jsx(_components.code, {\n          children: \"User\"\n        }), \"s that belong to a certain \", _jsx(_components.code, {\n          children: \"Organization\"\n        }), \" to access only that \", _jsx(_components.code, {\n          children: \"Organization\"\n        }), \"'s \", _jsx(_components.code, {\n          children: \"Resource\"\n        }), \"s\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Default Settings\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"By default, all Collections and Globals require that a user is logged in to be able to interact in any way.\"\n      }), \" The default Access Control function evaluates the \", _jsx(_components.code, {\n        children: \"user\"\n      }), \" from the Express \", _jsx(_components.code, {\n        children: \"req\"\n      }), \" and returns \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" if a user is logged in, and \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" if not.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Default Access function:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const defaultPayloadAccess = ({ req: { user } }) => {\\n  // Return `true` if a user is found\\n  // and `false` if it is undefined or null\\n  return Boolean(user);\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nIn the Local API, all Access Control functions are skipped by default, allowing your server to do whatever it needs. But, you can opt back in by setting the option \", _jsx(\"strong\", {\n          children: \"overrideAccess\"\n        }), \" to \", _jsx(\"strong\", {\n          children: \"true\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Access Control Types\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can manage access within Payload on three different levels:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/access-control/collections\",\n          children: \"Collections\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/access-control/fields\",\n          children: \"Fields\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/access-control/globals\",\n          children: \"Globals\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"When Access Control is Executed\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nAccess control functions are utilized in two places. It's important to understand how and when your access control is executed.\"]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"As you execute operations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When you perform Payload operations like \", _jsx(_components.code, {\n        children: \"create\"\n      }), \", \", _jsx(_components.code, {\n        children: \"read\"\n      }), \", \", _jsx(_components.code, {\n        children: \"update\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"delete\"\n      }), \", your access control functions will be executed before any changes or operations are completed.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Within the Admin UI\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Payload Admin UI responds dynamically to the access control that you define. For example, if you restrict editing a \", _jsx(_components.code, {\n        children: \"ExampleCollection\"\n      }), \" to only users that feature a \", _jsx(_components.code, {\n        children: \"role\"\n      }), \" of \", _jsx(_components.code, {\n        children: \"admin\"\n      }), \", the Payload Admin UI will \", _jsx(_components.strong, {\n        children: \"hide\"\n      }), \" the \", _jsx(_components.code, {\n        children: \"ExampleCollection\"\n      }), \" from the Admin UI entirely. This is super powerful and allows you to control who can do what with your Admin UI.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To accomplish this, Payload ships with an \", _jsx(_components.code, {\n        children: \"Access\"\n      }), \" operation, which is executed when a user logs into the Admin UI. Payload will execute each one of your access control functions, across all collections, globals, and fields, at the top level and return a response that contains a reflection of what the currently authenticated user can do with your application.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Argument Availability\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important:\"\n        }), _jsx(\"br\", {}), \"\\nWhen your access control functions are executed via the \", _jsx(\"strong\", {\n          children: \"access\"\n        }), \" operation, the \", _jsx(\"strong\", {\n          children: \"id\"\n        }), \" and \", _jsx(\"strong\", {\n          children: \"data\"\n        }), \" arguments will be \", _jsx(\"strong\", {\n          children: \"undefined\"\n        }), \", because Payload is executing your functions without referencing a specific document.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you use \", _jsx(_components.code, {\n        children: \"id\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"data\"\n      }), \" within your access control functions, make sure to check that they are defined first. If they are not, then you can assume that your access control is being executed via the \", _jsx(_components.code, {\n        children: \"access\"\n      }), \" operation, to determine solely what the user can do within the Admin UI.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Access Control",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Payload makes it simple to define and manage access control. By declaring roles, you can set permissions and restrict what your users can interact with.",
        "keywords": "overview, access control, permissions, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Default Settings",
            "level": 3,
            "id": "default-settings"
          },
          {
            "text": "Access Control Types",
            "level": 3,
            "id": "access-control-types"
          },
          {
            "text": "When Access Control is Executed",
            "level": 3,
            "id": "when-access-control-is-executed"
          },
          {
            "text": "Argument Availability",
            "level": 3,
            "id": "argument-availability"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    a: \"a\",\n    h4: \"h4\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"You can define Collection-level Access Control within each Collection's \", _jsx(_components.code, {\n        children: \"access\"\n      }), \" property. All Access Control functions accept one \", _jsx(_components.code, {\n        children: \"args\"\n      }), \" argument.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Available Controls\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Function\"\n          }), _jsx(_components.th, {\n            children: \"Allows/Denies Access\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#create\",\n                children: _jsx(_components.code, {\n                  children: \"create\"\n                })\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Used in the \", _jsx(_components.code, {\n              children: \"create\"\n            }), \" operation\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#read\",\n                children: _jsx(_components.code, {\n                  children: \"read\"\n                })\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Used in the \", _jsx(_components.code, {\n              children: \"find\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"findByID\"\n            }), \" operations\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#update\",\n                children: _jsx(_components.code, {\n                  children: \"update\"\n                })\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Used in the \", _jsx(_components.code, {\n              children: \"update\"\n            }), \" operation\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#delete\",\n                children: _jsx(_components.code, {\n                  children: \"delete\"\n                })\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Used in the \", _jsx(_components.code, {\n              children: \"delete\"\n            }), \" operation\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Auth-enabled Controls\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If a Collection supports \", _jsx(_components.a, {\n        href: \"/docs/authentication/overview\",\n        children: _jsx(_components.code, {\n          children: \"Authentication\"\n        })\n      }), \", the following Access Controls become available:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Function\"\n          }), _jsx(_components.th, {\n            children: \"Allows/Denies Access\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#admin\",\n                children: _jsx(_components.code, {\n                  children: \"admin\"\n                })\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used to restrict access to the Payload Admin panel\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#unlock\",\n                children: _jsx(_components.code, {\n                  children: \"unlock\"\n                })\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Used to restrict which users can access the \", _jsx(_components.code, {\n              children: \"unlock\"\n            }), \" operation\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example Collection config:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Posts: CollectionConfig = {\\n  slug: \\\"posts\\\",\\n  // highlight-start\\n  access: {\\n    create: ({ req: { user } }) => { ... },\\n    read: ({ req: { user } }) => { ... },\\n    update: ({ req: { user } }) => { ... },\\n    delete: ({ req: { user } }) => { ... },\\n    admin: ({ req: { user } }) => { ... },\\n  },\\n  // highlight-end\\n};\\n\\nexport default Categories;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Create\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Returns a boolean which allows/denies access to the \", _jsx(_components.code, {\n        children: \"create\"\n      }), \" request.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object containing the currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The data passed to create the document with.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const PublicUsers = {\\n  slug: 'public-users',\\n  access: {\\n    // highlight-start\\n    // allow guest users to self-registration\\n    create: () => true,\\n    // highlight-end\\n    ...\\n  },\\n  fields: [ ... ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Read\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read access functions can return a boolean result or optionally return a \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"query constraint\"\n      }), \" which limits the documents that are returned to only those that match the constraint you provide. This can be helpful to restrict users' access to only certain documents however you specify.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object containing the currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"id\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"id\"\n            }), \" of document requested, if within \", _jsx(_components.code, {\n              children: \"findByID\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Access } from 'payload/config';\\n\\nconst canReadPage: Access = ({ req: { user } }) => {\\n  // allow authenticated users\\n  if (user) {\\n    return true;\\n  }\\n  // using a query constraint, guest users can access when a field named 'isPublic' is set to true\\n  return {\\n    // assumes we have a checkbox field named 'isPublic'\\n    isPublic: {\\n      equals: true,\\n    },\\n  }\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Update\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Update access functions can return a boolean result or optionally return a \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"query constraint\"\n      }), \" to limit the document(s) that can be updated by the currently authenticated user. For example, returning a \", _jsx(_components.code, {\n        children: \"query\"\n      }), \" from the \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" Access Control is helpful in cases where you would like to restrict a user to only being able to update the documents containing a \", _jsx(_components.code, {\n        children: \"createdBy\"\n      }), \" relationship field equal to the user's ID.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object containing the currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"id\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"id\"\n            }), \" of document requested to update\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The data passed to update the document with\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Access } from 'payload/config';\\n\\nconst canUpdateUser: Access = ({ req: { user }, id }) => {\\n  // allow users with a role of 'admin'\\n  if (user.roles && user.roles.some(role => role === 'admin')) {\\n    return true;\\n  }\\n  // allow any other users to update only oneself\\n  return user.id === id;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Delete\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similarly to the Update function, returns a boolean or a \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"query constraint\"\n      }), \" to limit which documents can be deleted by which users.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object with additional \", _jsx(_components.code, {\n              children: \"user\"\n            }), \" property, which is the currently logged in user\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"id\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"id\"\n            }), \" of document requested to delete\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Access } from 'payload/config'\\n\\nconst canDeleteCustomer: Access = async ({ req, id }) => {\\n  if (!id) {\\n    // allow the admin UI to show controls to delete since it is indeterminate without the id\\n    return true;\\n  }\\n  // query another collection using the id\\n  const result = await req.payload.find({\\n    collection: 'contracts',\\n    limit: 0,\\n    depth: 0,\\n    where: {\\n      customer: { equals: id },\\n    },\\n  });\\n\\n  return result.totalDocs === 0;\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the Collection is \", _jsx(_components.a, {\n        href: \"/docs/admin/overview#the-admin-user-collection\",\n        children: \"used to access the Payload Admin panel\"\n      }), \", the \", _jsx(_components.code, {\n        children: \"Admin\"\n      }), \" Access Control function determines whether or not the currently logged in user can access the admin UI.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object containing the currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            })]\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Unlock\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Determines which users can \", _jsx(_components.a, {\n        href: \"/docs/authentication/operations#unlock\",\n        children: \"unlock\"\n      }), \" other users who may be blocked from authenticating successfully due to \", _jsx(_components.a, {\n        href: \"/docs/authentication/config#options\",\n        children: \"failing too many login attempts\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object containing the currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            })]\n          })]\n        })\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Collection Access Control",
        "slug": "collections",
        "label": "Collections",
        "order": 20,
        "desc": "With Collection-level Access Control you can define which users can create, read, update or delete Collections.",
        "keywords": "collections, access control, permissions, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Available Controls",
            "level": 2,
            "id": "available-controls"
          },
          {
            "text": "Create",
            "level": 3,
            "id": "create"
          },
          {
            "text": "Read",
            "level": 3,
            "id": "read"
          },
          {
            "text": "Update",
            "level": 3,
            "id": "update"
          },
          {
            "text": "Delete",
            "level": 3,
            "id": "delete"
          },
          {
            "text": "Admin",
            "level": 3,
            "id": "admin"
          },
          {
            "text": "Unlock",
            "level": 3,
            "id": "unlock"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    a: \"a\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Field Access Control is specified with functions inside a field's config. All field-level Controls return a boolean value to allow or deny access for the specified operation. No field-level Access Controls support returning query constraints. All Access Control functions accept one \", _jsx(_components.code, {\n        children: \"args\"\n      }), \" argument.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Available Controls\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Function\"\n          }), _jsx(_components.th, {\n            children: \"Purpose\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#create\",\n                children: _jsx(_components.code, {\n                  children: \"create\"\n                })\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Allows or denies the ability to set a field's value when creating a new document\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#read\",\n                children: _jsx(_components.code, {\n                  children: \"read\"\n                })\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Allows or denies the ability to read a field's value\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#update\",\n                children: _jsx(_components.code, {\n                  children: \"update\"\n                })\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Allows or denies the ability to update a field's value\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example Collection config:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Posts: CollectionConfig = {\\n  slug: 'posts',\\n  fields: [\\n    {\\n      name: 'title',\\n      type: 'text',\\n      // highlight-start\\n      access: {\\n        create: ({ req: { user } }) => { ... },\\n        read: ({ req: { user } }) => { ... },\\n        update: ({ req: { user } }) => { ... },\\n      },\\n      // highlight-end\\n    };\\n  ],\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Create\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Returns a boolean which allows or denies the ability to set a field's value when creating a new document. If \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" is returned, any passed values will be discarded.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object containing the currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The full data passed to create the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"siblingData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Immediately adjacent field data passed to create the document.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Read\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Returns a boolean which allows or denies the ability to read a field's value. If \", _jsx(_components.code, {\n        children: \"false\"\n      }), \", the entire property is omitted from the resulting document.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object containing the currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"id\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"id\"\n            }), \" of the document being read\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"doc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The full document data.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"siblingData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Immediately adjacent field data of the document being read.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Update\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Returns a boolean which allows or denies the ability to update a field's value. If \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" is returned, any passed values will be discarded.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object containing the currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"id\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"id\"\n            }), \" of the document being updated\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The full data passed to update the document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"siblingData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Immediately adjacent field data passed to update the document with.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"doc\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The full document data, before the update is applied.\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Field-level Access Control",
        "slug": "fields",
        "label": "Fields",
        "order": 30,
        "desc": "Field-level Access Control is specified within a field's config, and allows you to define which users can create, read or update Fields.",
        "keywords": "fields, access control, permissions, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Available Controls",
            "level": 2,
            "id": "available-controls"
          },
          {
            "text": "Create",
            "level": 3,
            "id": "create"
          },
          {
            "text": "Read",
            "level": 3,
            "id": "read"
          },
          {
            "text": "Update",
            "level": 3,
            "id": "update"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    a: \"a\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"You can define Global-level Access Control within each Global's \", _jsx(_components.code, {\n        children: \"access\"\n      }), \" property. All Access Control functions accept one \", _jsx(_components.code, {\n        children: \"args\"\n      }), \" argument.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"**Available argument properties:\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Available Controls\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Function\"\n          }), _jsx(_components.th, {\n            children: \"Allows/Denies Access\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#read\",\n                children: _jsx(_components.code, {\n                  children: \"read\"\n                })\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Used in the \", _jsx(_components.code, {\n              children: \"findOne\"\n            }), \" Global operation\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.a, {\n                href: \"#update\",\n                children: _jsx(_components.code, {\n                  children: \"update\"\n                })\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Used in the \", _jsx(_components.code, {\n              children: \"update\"\n            }), \" Global operation\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example Global config:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalConfig } from 'payload/types';\\n\\nconst Header: GlobalConfig = {\\n  slug: \\\"header\\\",\\n  // highlight-start\\n  access: {\\n    read: ({ req: { user } }) => { /* */ },\\n    update: ({ req: { user } }) => { /* */ },\\n  },\\n  // highlight-end\\n};\\n\\nexport default Header;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Read\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Returns a boolean result or optionally a \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"query constraint\"\n      }), \" which limits who can read this global based on its current properties.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object containing the currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            })]\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Update\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Returns a boolean result or optionally a \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"query constraint\"\n      }), \" which limits who can update this global based on its current properties.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Available argument properties:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object containing the currently authenticated \", _jsx(_components.code, {\n              children: \"user\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The data passed to update the global with.\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Globals Access Control",
        "slug": "globals",
        "label": "Globals",
        "order": 40,
        "desc": "Global-level Access Control is specified within each Global's `access` property and allows you to define which users can read or update Globals.",
        "keywords": "globals, access control, permissions, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Available Controls",
            "level": 2,
            "id": "available-controls"
          },
          {
            "text": "Read",
            "level": 3,
            "id": "read"
          },
          {
            "text": "Update",
            "level": 3,
            "id": "update"
          }
        ]
      }
    ]
  },
  {
    "slug": "Hooks",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h4: \"h4\",\n    a: \"a\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"Hooks are powerful ways to tie into existing Payload actions in order to add your own logic like integrating with third-party APIs, adding auto-generated data, or modifing Payload's base functionality.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"With Hooks, you can transform Payload from a traditional CMS into a fully-fledged application framework.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example uses:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Integrate user profiles with a third-party CRM such as Salesforce or Hubspot\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Send a copy of uploaded files to Amazon S3 or similar\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Automatically add \", _jsx(_components.code, {\n          children: \"lastModifiedBy\"\n        }), \" data to a document to track who changed what over time\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Encrypt a field's data when it's saved and decrypt it when it's read\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Send emails when \", _jsx(_components.code, {\n          children: \"ContactSubmission\"\n        }), \"s are created from a public website\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Integrate with a payment provider like Stripe to automatically process payments when an \", _jsx(_components.code, {\n          children: \"Order\"\n        }), \" is created\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Securely recalculate order prices on the backend to ensure that the total price for \", _jsx(_components.code, {\n          children: \"Order\"\n        }), \"s that users submit is accurate and valid\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Generate and store a \", _jsx(_components.code, {\n          children: \"lastLoggedIn\"\n        }), \" date on a user by adding an \", _jsx(_components.code, {\n          children: \"afterLogin\"\n        }), \" hook\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Add extra data to documents before they are read such as \\\"average scores\\\" or similar data that needs to be calculated on the fly\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are many more use cases for Hooks and the sky is the limit.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Async vs. synchronous\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All hooks can be written as either synchronous or asynchronous functions. If the Hook should modify data before a document is updated or created, and it relies on asynchronous actions such as fetching data from a third party, it might make sense to define your Hook as an asynchronous function, so you can be sure that your Hook completes before the operation's lifecycle continues. Async hooks are run in series - so if you have two async hooks defined, the second hook will wait for the first to complete before it starts.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If your Hook simply performs a side-effect, such as updating a CRM, it might be okay to define it synchronously, so the Payload operation does not have to wait for your hook to complete.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Server-only execution\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload Hooks do not have any effect within the Payload Admin panel. You can safely \", _jsx(_components.a, {\n        href: \"/docs/admin/webpack#aliasing-server-only-modules\",\n        children: \"remove your hooks\"\n      }), \" from your Admin panel's code by customizing the Webpack config, which not only keeps your Admin bundles' filesize small but also ensures that any server-side only code does not cause problems within browser environments.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Hook Types\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can specify hooks in the following contexts:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/hooks/collections\",\n          children: \"Collection Hooks\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/hooks/fields\",\n          children: \"Field Hooks\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/hooks/globals\",\n          children: \"Global Hooks\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Hooks Overview",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Hooks allow you to add your own logic to Payload, including integrating with third-party APIs, adding auto-generated data, or modifing Payload's base functionality.",
        "keywords": "hooks, overview, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Hook Types",
            "level": 2,
            "id": "hook-types"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Collections feature the ability to define the following hooks:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#beforeoperation\",\n          children: \"beforeOperation\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#beforevalidate\",\n          children: \"beforeValidate\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#beforechange\",\n          children: \"beforeChange\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#afterchange\",\n          children: \"afterChange\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#beforeread\",\n          children: \"beforeRead\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#afterread\",\n          children: \"afterRead\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#beforedelete\",\n          children: \"beforeDelete\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#afterdelete\",\n          children: \"afterDelete\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Additionally, \", _jsx(_components.code, {\n        children: \"auth\"\n      }), \"-enabled collections feature the following hooks:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#beforelogin\",\n          children: \"beforeLogin\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#afterlogin\",\n          children: \"afterLogin\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#afterlogout\",\n          children: \"afterLogout\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#afterrefresh\",\n          children: \"afterRefresh\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#afterme\",\n          children: \"afterMe\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#afterforgotpassword\",\n          children: \"afterForgotPassword\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All collection Hook properties accept arrays of synchronous or asynchronous functions. Each Hook type receives specific arguments and has the ability to modify specific outputs.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"collections/exampleHooks.js\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst ExampleHooks: CollectionConfig = {\\n  slug: 'example-hooks',\\n  fields: [\\n    { name: 'name', type: 'text'},\\n  ],\\n  hooks: {\\n    beforeOperation: [(args) => {...}],\\n    beforeValidate: [(args) => {...}],\\n    beforeDelete: [(args) => {...}],\\n    beforeChange: [(args) => {...}],\\n    beforeRead: [(args) => {...}],\\n    afterChange: [(args) => {...}],\\n    afterRead: [(args) => {...}],\\n    afterDelete: [(args) => {...}],\\n\\n    // Auth-enabled hooks\\n    beforeLogin: [(args) => {...}],\\n    afterLogin: [(args) => {...}],\\n    afterLogout: [(args) => {...}],\\n    afterRefresh: [(args) => {...}],\\n    afterMe: [(args) => {...}],\\n    afterForgotPassword: [(args) => {...}],\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeOperation\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"beforeOperation\"\n      }), \" Hook type can be used to modify the arguments that operations accept or execute side-effects that run before an operation begins.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Available Collection operations include \", _jsx(_components.code, {\n        children: \"create\"\n      }), \", \", _jsx(_components.code, {\n        children: \"read\"\n      }), \", \", _jsx(_components.code, {\n        children: \"update\"\n      }), \", \", _jsx(_components.code, {\n        children: \"delete\"\n      }), \", \", _jsx(_components.code, {\n        children: \"login\"\n      }), \", \", _jsx(_components.code, {\n        children: \"refresh\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"forgotPassword\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionBeforeOperationHook } from 'payload/types';\\n\\nconst beforeOperationHook: CollectionBeforeOperationHook = async ({\\n  args, // Original arguments passed into the operation\\n  operation, // name of the operation\\n}) => {\\n  return args; // Return operation arguments as necessary\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeValidate\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Runs before the \", _jsx(_components.code, {\n        children: \"create\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operations. This hook allows you to add or format data before the incoming data is validated.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionBeforeOperationHook } from 'payload/types';\\n\\nconst beforeValidateHook: CollectionBeforeValidateHook = async ({\\n  data, // incoming data to update or create with\\n  req, // full express request\\n  operation, // name of the operation ie. 'create', 'update'\\n  originalDoc, // original document\\n}) => {\\n  return data; // Return data to either create or update a document with\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeChange\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Immediately following validation, \", _jsx(_components.code, {\n        children: \"beforeChange\"\n      }), \" hooks will run within \", _jsx(_components.code, {\n        children: \"create\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operations. At this stage, you can be confident that the data that will be saved to the document is valid in accordance to your field validations. You can optionally modify the shape of data to be saved.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionBeforeChangeHook } from 'payload/types';\\n\\nconst beforeChangeHook: CollectionBeforeChangeHook = async ({\\n  data, // incoming data to update or create with\\n  req, // full express request\\n  operation, // name of the operation ie. 'create', 'update'\\n  originalDoc, // original document\\n}) => {\\n  return data; // Return data to either create or update a document with\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterChange\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"After a document is created or updated, the \", _jsx(_components.code, {\n        children: \"afterChange\"\n      }), \" hook runs. This hook is helpful to recalculate statistics such as total sales within a global, syncing user profile changes to a CRM, and more.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionAfterChangeHook } from 'payload/types';\\n\\nconst afterChangeHook: CollectionAfterChangeHook = async ({\\n  doc, // full document data\\n  req, // full express request\\n  previousDoc, // document data before updating the collection\\n  operation, // name of the operation ie. 'create', 'update'\\n}) => {\\n  return doc;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeRead\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Runs before \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"findByID\"\n      }), \" operations are transformed for output by \", _jsx(_components.code, {\n        children: \"afterRead\"\n      }), \". This hook fires before hidden fields are removed and before localized fields are flattened into the requested locale. Using this Hook will provide you with all locales and all hidden fields via the \", _jsx(_components.code, {\n        children: \"doc\"\n      }), \" argument.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionBeforeReadHook } from 'payload/types';\\n\\nconst beforeReadHook: CollectionBeforeReadHook = async ({\\n  doc, // full document data\\n  req, // full express request\\n  query, // JSON formatted query\\n}) => {\\n  return doc;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterRead\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Runs as the last step before documents are returned. Flattens locales, hides protected fields, and removes fields that users do not have access to.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionAfterReadHook } from 'payload/types';\\n\\nconst afterReadHook: CollectionAfterReadHook = async ({\\n  doc, // full document data\\n  req, // full express request\\n  query, // JSON formatted query\\n  findMany, // boolean to denote if this hook is running against finding one, or finding many\\n}) => {\\n  return doc;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeDelete\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Runs before the \", _jsx(_components.code, {\n        children: \"delete\"\n      }), \" operation. Returned values are discarded.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionBeforeDeleteHook } from 'payload/types';\\n\\nconst beforeDeleteHook: CollectionBeforeDeleteHook = async ({\\n  req, // full express request\\n  id, // id of document to delete\\n}) => {...}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterDelete\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Runs immediately after the \", _jsx(_components.code, {\n        children: \"delete\"\n      }), \" operation removes records from the database. Returned values are discarded.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionAfterDeleteHook } from 'payload/types';\\n\\nconst afterDeleteHook: CollectionAfterDeleteHook = async ({\\n  req, // full express request\\n  id, // id of document to delete\\n  doc, // deleted document\\n}) => {...}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeLogin\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For auth-enabled Collections, this hook runs during \", _jsx(_components.code, {\n        children: \"login\"\n      }), \" operations where a user with the provided credentials exist, but before a token is generated and added to the response. You can optionally modify the user that is returned, or throw an error in order to deny the login operation.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionBeforeLoginHook } from 'payload/types';\\n\\nconst beforeLoginHook: CollectionBeforeLoginHook = async ({\\n  req, // full express request\\n  user, // user being logged in\\n}) => {\\n  return user;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterLogin\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For auth-enabled Collections, this hook runs after successful \", _jsx(_components.code, {\n        children: \"login\"\n      }), \" operations. You can optionally modify the user that is returned.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionAfterLoginHook } from 'payload/types';\\n\\nconst afterLoginHook: CollectionAfterLoginHook = async ({\\n  req, // full express request\\n  user, // user that was logged in\\n  token, // user token\\n}) => {...}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterLogout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For auth-enabled Collections, this hook runs after \", _jsx(_components.code, {\n        children: \"logout\"\n      }), \" operations.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionAfterLogoutHook } from 'payload/types';\\n\\nconst afterLogoutHook: CollectionAfterLogoutHook = async ({\\n  req, // full express request\\n}) => {...}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterRefresh\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For auth-enabled Collections, this hook runs after \", _jsx(_components.code, {\n        children: \"refresh\"\n      }), \" operations.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionAfterRefreshHook } from 'payload/types';\\n\\nconst afterRefreshHook: CollectionAfterRefreshHook = async ({\\n  req, // full express request\\n  res, // full express response\\n  token, // newly refreshed user token\\n}) => {...}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterMe\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For auth-enabled Collections, this hook runs after \", _jsx(_components.code, {\n        children: \"me\"\n      }), \" operations.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionAfterMeHook } from 'payload/types';\\n\\nconst afterMeHook: CollectionAfterMeHook = async ({\\n  req, // full express request\\n  response, // response to return\\n}) => {...}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterForgotPassword\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For auth-enabled Collections, this hook runs after successful \", _jsx(_components.code, {\n        children: \"forgotPassword\"\n      }), \" operations. Returned values are discarded.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionAfterForgotPasswordHook } from 'payload/types';\\n\\nconst afterLoginHook: CollectionAfterForgotPasswordHook = async ({\\n  req, // full express request\\n  user, // user being logged in\\n  token, // user token\\n}) => {\\n  return user;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload exports a type for each Collection hook which can be accessed as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type {\\n  CollectionBeforeOperationHook,\\n  CollectionBeforeValidateHook,\\n  CollectionBeforeChangeHook,\\n  CollectionAfterChangeHook,\\n  CollectionAfterReadHook,\\n  CollectionBeforeReadHook,\\n  CollectionBeforeDeleteHook,\\n  CollectionAfterDeleteHook,\\n  CollectionBeforeLoginHook,\\n  CollectionAfterLoginHook,\\n  CollectionAfterLogoutHook,\\n  CollectionAfterRefreshHook,\\n  CollectionAfterMeHook,\\n  CollectionAfterForgotPasswordHook,\\n} from 'payload/types';\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Collection Hooks",
        "slug": "collections",
        "label": "Collections",
        "order": 20,
        "desc": "You can add hooks to any Collection, several hook types are available including beforeChange, afterRead, afterDelete and more.",
        "keywords": "hooks, collections, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 2,
            "id": "config"
          },
          {
            "text": "beforeOperation",
            "level": 3,
            "id": "beforeoperation"
          },
          {
            "text": "beforeValidate",
            "level": 3,
            "id": "beforevalidate"
          },
          {
            "text": "beforeChange",
            "level": 3,
            "id": "beforechange"
          },
          {
            "text": "afterChange",
            "level": 3,
            "id": "afterchange"
          },
          {
            "text": "beforeRead",
            "level": 3,
            "id": "beforeread"
          },
          {
            "text": "afterRead",
            "level": 3,
            "id": "afterread"
          },
          {
            "text": "beforeDelete",
            "level": 3,
            "id": "beforedelete"
          },
          {
            "text": "afterDelete",
            "level": 3,
            "id": "afterdelete"
          },
          {
            "text": "beforeLogin",
            "level": 3,
            "id": "beforelogin"
          },
          {
            "text": "afterLogin",
            "level": 3,
            "id": "afterlogin"
          },
          {
            "text": "afterLogout",
            "level": 3,
            "id": "afterlogout"
          },
          {
            "text": "afterRefresh",
            "level": 3,
            "id": "afterrefresh"
          },
          {
            "text": "afterMe",
            "level": 3,
            "id": "afterme"
          },
          {
            "text": "afterForgotPassword",
            "level": 3,
            "id": "afterforgotpassword"
          },
          {
            "text": "TypeScript",
            "level": 2,
            "id": "typescript"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\",\n    h4: \"h4\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Field-level hooks offer incredible potential for encapsulating your logic. They help to isolate concerns and package up functionalities to be easily reusable across your projects.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example use cases include:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Automatically add an \", _jsx(_components.code, {\n          children: \"owner\"\n        }), \" relationship to a Document based on the \", _jsx(_components.code, {\n          children: \"req.user.id\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Encrypt / decrypt a sensitive field using \", _jsx(_components.code, {\n          children: \"beforeValidate\"\n        }), \" and \", _jsx(_components.code, {\n          children: \"afterRead\"\n        }), \" hooks\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Auto-generate field data using a \", _jsx(_components.code, {\n          children: \"beforeValidate\"\n        }), \" hook\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Format incoming data such as kebab-casing a document \", _jsx(_components.code, {\n          children: \"slug\"\n        }), \" with \", _jsx(_components.code, {\n          children: \"beforeValidate\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Restrict updating a document to only once every X hours using the \", _jsx(_components.code, {\n          children: \"beforeChange\"\n        }), \" hook\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"All field types provide the following hooks:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"beforeValidate\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"beforeChange\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"afterChange\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"afterRead\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example field configuration:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Field } from 'payload/types';\\n\\nconst ExampleField: Field = {\\n  name: 'name',\\n  type: 'text',\\n  // highlight-start\\n  hooks: {\\n    beforeValidate: [(args) => {...}],\\n    beforeChange: [(args) => {...}],\\n    afterChange: [(args) => {...}],\\n    afterRead: [(args) => {...}],\\n  }\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Arguments and return values\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All field-level hooks are formatted to accept the same arguments, although some arguments may be \", _jsx(_components.code, {\n        children: \"undefined\"\n      }), \" based on which field hook you are utilizing.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nIt's a good idea to conditionally scope your logic based on which operation is executing. For example, if you are writing a \", _jsx(\"strong\", {\n          children: \"beforeChange\"\n        }), \" hook, you may want to perform different logic based on if the current \", _jsx(\"strong\", {\n          children: \"operation\"\n        }), \" is \", _jsx(\"strong\", {\n          children: \"create\"\n        }), \" or \", _jsx(\"strong\", {\n          children: \"update\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Arguments\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Field Hooks receive one \", _jsx(_components.code, {\n        children: \"args\"\n      }), \" argument that contains the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"data\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The data passed to update the document within \", _jsx(_components.code, {\n              children: \"create\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"update\"\n            }), \" operations, and the full document itself in the \", _jsx(_components.code, {\n              children: \"afterRead\"\n            }), \" hook.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"siblingData\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The sibling data passed to a field that the hook is running against.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"findMany\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Boolean to denote if this hook is running against finding one, or finding many within the \", _jsx(_components.code, {\n              children: \"afterRead\"\n            }), \" hook.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"operation\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A string relating to which operation the field type is currently executing within. Useful within \", _jsx(_components.code, {\n              children: \"beforeValidate\"\n            }), \", \", _jsx(_components.code, {\n              children: \"beforeChange\"\n            }), \", and \", _jsx(_components.code, {\n              children: \"afterChange\"\n            }), \" hooks to differentiate between \", _jsx(_components.code, {\n              children: \"create\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"update\"\n            }), \" operations.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"originalDoc\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The full original document in \", _jsx(_components.code, {\n              children: \"update\"\n            }), \" operations. In the \", _jsx(_components.code, {\n              children: \"afterChange\"\n            }), \" hook, this is the resulting document of the operation.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"previousDoc\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The document before changes were applied, only in \", _jsx(_components.code, {\n              children: \"afterChange\"\n            }), \" hooks.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"previousSiblingDoc\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The sibling data from the previous document in \", _jsx(_components.code, {\n              children: \"afterChange\"\n            }), \" hook.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"req\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The Express \", _jsx(_components.code, {\n              children: \"request\"\n            }), \" object. It is mocked for Local API operations.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"value\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The value of the field.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Return value\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All field hooks can optionally modify the return value of the field before the operation continues. Field Hooks may optionally return the value that should be used within the field.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important\"\n        }), _jsx(\"br\", {}), \"\\nDue to GraphQL's typed nature, you should never change the type of data that you return from a field, otherwise GraphQL will produce errors. If you need to change the shape or type of data, reconsider Field Hooks and instead evaluate if Collection / Global hooks might suit you better.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload exports a type for field hooks which can be accessed and used as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type { FieldHook } from 'payload/types';\\n\\n// Field hook type is a generic that takes three arguments:\\n// 1: The document type\\n// 2: The value type\\n// 3: The sibling data type\\n\\ntype ExampleFieldHook = FieldHook<ExampleDocumentType, string, SiblingDataType>;\\n\\nconst exampleFieldHook: ExampleFieldHook = (args) => {\\n  const {\\n    value, // Typed as `string` as shown above\\n    data, // Typed as a Partial of your ExampleDocumentType\\n    siblingData, // Typed as a Partial of SiblingDataType\\n    originalDoc, // Typed as ExampleDocumentType\\n    operation,\\n    req,\\n  } = args;\\n\\n  // Do something here...\\n\\n  return value; // should return a string as typed above, undefined, or null\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Field Hooks",
        "slug": "fields",
        "label": "Fields",
        "order": 30,
        "desc": "Hooks can be added to any fields, and optionally modify the return value of the field before the operation continues.",
        "keywords": "hooks, fields, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 2,
            "id": "config"
          },
          {
            "text": "Arguments and return values",
            "level": 2,
            "id": "arguments-and-return-values"
          },
          {
            "text": "TypeScript",
            "level": 2,
            "id": "typescript"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    code: \"code\",\n    pre: \"pre\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Globals feature the ability to define the following hooks:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#beforeValidate\",\n          children: \"beforeValidate\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#beforeChange\",\n          children: \"beforeChange\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#afterChange\",\n          children: \"afterChange\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#beforeRead\",\n          children: \"beforeRead\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#afterRead\",\n          children: \"afterRead\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Config\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All Global Hook properties accept arrays of synchronous or asynchronous functions. Each Hook type receives specific arguments and has the ability to modify specific outputs.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"globals/example-hooks.js\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalConfig } from 'payload/types';\\n\\nconst ExampleHooks: GlobalConfig = {\\n  slug: 'header',\\n  fields: [\\n    { name: 'title', type: 'text'},\\n  ]\\n  hooks: {\\n    beforeValidate: [(args) => {...}],\\n    beforeChange: [(args) => {...}],\\n    beforeRead: [(args) => {...}],\\n    afterChange: [(args) => {...}],\\n    afterRead: [(args) => {...}],\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeValidate\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Runs before the \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operation. This hook allows you to add or format data before the incoming data is validated.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalBeforeValidateHook } from 'payload/types'\\n\\nconst beforeValidateHook: GlobalBeforeValidateHook = async ({\\n  data, // incoming data to update or create with\\n  req, // full express request\\n  originalDoc, // original document\\n}) => {\\n  return data; // Return data to update the document with\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeChange\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Immediately following validation, \", _jsx(_components.code, {\n        children: \"beforeChange\"\n      }), \" hooks will run within the \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operation. At this stage, you can be confident that the data that will be saved to the document is valid in accordance to your field validations. You can optionally modify the shape of data to be saved.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalBeforeChangeHook } from 'payload/types'\\n\\nconst beforeChangeHook: GlobalBeforeChangeHook = async ({\\n  data, // incoming data to update or create with\\n  req, // full express request\\n  originalDoc, // original document\\n}) => {\\n  return data; // Return data to update the document with\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterChange\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"After a global is updated, the \", _jsx(_components.code, {\n        children: \"afterChange\"\n      }), \" hook runs. Use this hook to purge caches of your applications, sync site data to CRMs, and more.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalAfterChangeHook } from 'payload/types'\\n\\nconst afterChangeHook: GlobalAfterChangeHook = async ({\\n  doc, // full document data\\n  previousDoc, // document data before updating the collection\\n  req, // full express request\\n}) => {\\n  return data;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"beforeRead\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Runs before \", _jsx(_components.code, {\n        children: \"findOne\"\n      }), \" global operation is transformed for output by \", _jsx(_components.code, {\n        children: \"afterRead\"\n      }), \". This hook fires before hidden fields are removed and before localized fields are flattened into the requested locale. Using this Hook will provide you with all locales and all hidden fields via the \", _jsx(_components.code, {\n        children: \"doc\"\n      }), \" argument.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalBeforeReadHook } from 'payload/types'\\n\\nconst beforeReadHook: GlobalBeforeReadHook = async ({\\n  doc, // full document data\\n  req, // full express request\\n}) => {...}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"afterRead\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Runs as the last step before a global is returned. Flattens locales, hides protected fields, and removes fields that users do not have access to.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalAfterReadHook } from 'payload/types'\\n\\nconst afterReadHook: GlobalAfterReadHook = async ({\\n  doc, // full document data\\n  req, // full express request\\n  findMany, // boolean to denote if this hook is running against finding one, or finding many (useful in versions)\\n}) => {...}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload exports a type for each Global hook which can be accessed as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import type {\\n  GlobalBeforeValidateHook,\\n  GlobalBeforeChangeHook,\\n  GlobalAfterChangeHook,\\n  GlobalBeforeReadHook,\\n  GlobalAfterReadHook,\\n} from 'payload/types';\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Global Hooks",
        "slug": "globals",
        "label": "Globals",
        "order": 40,
        "desc": "Hooks can be added to any Global and allow you to validate data, flatten locales, hide protected fields, remove fields and more.",
        "keywords": "hooks, globals, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Config",
            "level": 2,
            "id": "config"
          },
          {
            "text": "beforeValidate",
            "level": 3,
            "id": "beforevalidate"
          },
          {
            "text": "beforeChange",
            "level": 3,
            "id": "beforechange"
          },
          {
            "text": "afterChange",
            "level": 3,
            "id": "afterchange"
          },
          {
            "text": "beforeRead",
            "level": 3,
            "id": "beforeread"
          },
          {
            "text": "afterRead",
            "level": 3,
            "id": "afterread"
          },
          {
            "text": "TypeScript",
            "level": 2,
            "id": "typescript"
          }
        ]
      }
    ]
  },
  {
    "slug": "Authentication",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    em: \"em\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    a: \"a\",\n    h3: \"h3\",\n    pre: \"pre\",\n    ol: \"ol\",\n    h5: \"h5\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"Payload provides for highly secure and customizable user Authentication out of the box, which allows for users to identify themselves to Payload.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Authentication is used within the Payload Admin panel itself as well as throughout your app(s) themselves however you determine necessary.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"https://payloadcms.com/images/docs/auth-admin.jpg\",\n        alt: \"Authentication admin panel functionality\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"Admin panel screenshot depicting an Admins Collection with Auth enabled\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Here are some common use cases of Authentication outside of Payload's dashboard itself:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Customer accounts for an ecommerce app\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Customer accounts for a SaaS product\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"P2P app or social site where users need to log in and manage their profiles\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Online game where players need to track their progress over time\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, Payload provides you with a \", _jsx(_components.code, {\n        children: \"User\"\n      }), \" collection that supports Authentication, which is used to access the Admin panel. But, you can add support to one or many Collections of your own. For more information on how to customize, override, or remove the default \", _jsx(_components.code, {\n        children: \"User\"\n      }), \" collection, \", _jsx(_components.a, {\n        href: \"/docs/admin/overview#the-admin-user-collection\",\n        children: \"click here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Enabling Auth on a collection\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Every Payload Collection can opt-in to supporting Authentication by specifying the \", _jsx(_components.code, {\n        children: \"auth\"\n      }), \" property on the Collection's config to either \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" or to an object containing \", _jsx(_components.code, {\n        children: \"auth\"\n      }), \" options.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [\"For a full list of all \", _jsx(_components.code, {\n          children: \"auth\"\n        }), \" options, \", _jsx(_components.a, {\n          href: \"/docs/authentication/config\",\n          children: \"click here\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Simple example collection:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Admins: CollectionConfig = {\\n  slug:\\n  // highlight-start\\n  auth: {\\n    tokenExpiration: 7200, // How many seconds to keep the user logged in\\n    verify: true, // Require email verification before being allowed to authenticate\\n    maxLoginAttempts: 5, // Automatically lock a user out after X amount of failed logins\\n    lockTime: 600 * 1000, // Time period to allow the max login attempts\\n    // More options are available\\n  },\\n  // highlight-end\\n  fields: [\\n    {\\n      name: 'role',\\n      type: 'select',\\n      required: true,\\n      options: [\\n        'user',\\n        'admin',\\n        'editor',\\n        'developer',\\n      ],\\n    }\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"By enabling Authentication on a config, the following modifications will automatically be made to your Collection:\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"email\"\n        }), \" as well as password \", _jsx(_components.code, {\n          children: \"salt\"\n        }), \" & \", _jsx(_components.code, {\n          children: \"hash\"\n        }), \" fields will be added to your Collection's schema\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The Admin panel will feature a new set of corresponding UI to allow for changing password and editing email\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsxs(_components.a, {\n          href: \"/docs/authentication/operations\",\n          children: [\"A new set of \", _jsx(_components.code, {\n            children: \"operations\"\n          })]\n        }), \" will be exposed via Payload's REST, Local, and GraphQL APIs\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once enabled, each document that is created within the Collection can be thought of as a \", _jsx(_components.code, {\n        children: \"user\"\n      }), \" - who can make use of commonly required authentication functions such as logging in / out, resetting their password, and more.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Logging in / out, resetting password, etc.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"/docs/authentication/operations\",\n        children: \"Click here\"\n      }), \" for a list of all automatically-enabled Auth operations, including \", _jsx(_components.code, {\n        children: \"login\"\n      }), \", \", _jsx(_components.code, {\n        children: \"logout\"\n      }), \", \", _jsx(_components.code, {\n        children: \"refresh\"\n      }), \", and others.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Token-based auth\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Successfully logging in returns a \", _jsx(_components.code, {\n        children: \"JWT\"\n      }), \" (JSON web token) which is how a user will identify themselves to Payload. By providing this JWT via either an HTTP-only cookie or an \", _jsx(_components.code, {\n        children: \"Authorization\"\n      }), \" header, Payload will automatically identify the user and add its user JWT data to the Express \", _jsx(_components.code, {\n        children: \"req\"\n      }), \", which is available throughout Payload including within access control, hooks, and more.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nYou can access the logged in user from access control functions and hooks via the Express \", _jsx(\"strong\", {\n          children: \"req\"\n        }), \". The logged in user is automatically added as the \", _jsx(\"strong\", {\n          children: \"user\"\n        }), \" property.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"HTTP-only cookies\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload \", _jsx(_components.code, {\n        children: \"login\"\n      }), \", \", _jsx(_components.code, {\n        children: \"logout\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"refresh\"\n      }), \" operations make use of HTTP-only cookies for authentication purposes. HTTP-only cookies are a highly secure method of storing identifiable data on a user's device so that Payload can automatically recognize a returning user until their cookie expires. They are totally protected from common XSS attacks and cannot be read at all via JavaScript in the browser.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Automatic browser inclusion\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Modern browsers automatically include \", _jsx(_components.code, {\n        children: \"http-only\"\n      }), \" cookies when making requests directly to URLs—meaning that if you are running your API on \", _jsx(_components.a, {\n        href: \"http://example.com\",\n        children: \"http://example.com\"\n      }), \", and you have logged in and visit \", _jsx(_components.a, {\n        href: \"http://example.com/test-page\",\n        children: \"http://example.com/test-page\"\n      }), \", your browser will automatically include the Payload authentication cookie for you.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Using Fetch or other HTTP APIs\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"However, if you use \", _jsx(_components.code, {\n        children: \"fetch\"\n      }), \" or similar APIs to retrieve Payload resources from its REST or GraphQL API, you need to specify to include credentials (cookies).\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Fetch example, including credentials:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const response = await fetch('http://localhost:3000/api/pages', {\\n  credentials: 'include',\\n});\\n\\nconst pages = await response.json();\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For more about how to automatically include cookies in requests from your app to your Payload API, \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#Sending_a_request_with_credentials_included\",\n        children: \"click here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nTo make sure you have a Payload cookie set properly in your browser after logging in, you can use Chrome's Developer Tools - Application - Cookies - [your-domain-here]. The Chrome Developer tools will still show HTTP-only cookies, even when JavaScript running on the page can't.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"CSRF Protection\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"CSRF (cross-site request forgery) attacks are common and dangerous. By using an HTTP-only cookie, Payload removes many XSS vulnerabilities, however, CSRF attacks can still be possible.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, let's say you have a very popular app running at coolsite.com. This app allows users to manage finances and send / receive money. As Payload is using HTTP-only cookies, that means that browsers automatically will include cookies when sending requests to your domain - no matter what page created the request.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So, if a user of coolsite.com is logged in and just browsing around on the internet, they might stumble onto a page with bad intentions. That bad page might automatically make requests to all sorts of sites to see if they can find one that they can log into - and coolsite.com might be on their list. If your user was logged in while they visited that evil site, the attacker could do whatever they wanted as if they were your coolsite.com user by just sending requests to the coolsite API (which would automatically include the auth cookie). They could send themselves a bunch of money from your user's account, change the user's password, etc. This is what a CSRF attack is.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsx(\"strong\", {\n        children: \"To protect against CSRF attacks, Payload only accepts cookie-based authentication from domains that you explicitly whitelist.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To define domains that should allow users to identify themselves via the Payload HTTP-only cookie, use the \", _jsx(_components.code, {\n        children: \"csrf\"\n      }), \" option on the base Payload config to whitelist domains that you trust.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"payload.config.ts\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload/config';\\n\\nconst config = buildConfig({\\n  collections: [\\n    // collections here\\n  ],\\n  // highlight-start\\n  csrf: [ // whitelist of domains to allow cookie auth from\\n    'https://your-frontend-app.com',\\n    'https://your-other-frontend-app.com',\\n  ],\\n  // highlight-end\\n});\\n\\nexport default config;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Identifying users via the Authorization Header\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to authenticating via an HTTP-only cookie, you can also identify users via the \", _jsx(_components.code, {\n        children: \"Authorization\"\n      }), \" header on an HTTP request.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const request = await fetch('http://localhost:3000', {\\n  headers: {\\n    Authorization: `JWT ${token}`\\n  }\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can retrieve a user's token via the response to \", _jsx(_components.code, {\n        children: \"login\"\n      }), \", \", _jsx(_components.code, {\n        children: \"refresh\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"me\"\n      }), \" auth operations.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Authentication Overview",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Payload provides highly secure user Authentication out of the box, and you can fully customize, override, or remove the default Authentication support.",
        "keywords": "authentication, config, configuration, overview, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Enabling Auth on a collection",
            "level": 3,
            "id": "enabling-auth-on-a-collection"
          },
          {
            "text": "Logging in / out, resetting password, etc.",
            "level": 3,
            "id": "logging-in-out-resetting-password-etc"
          },
          {
            "text": "Token-based auth",
            "level": 3,
            "id": "token-based-auth"
          },
          {
            "text": "HTTP-only cookies",
            "level": 3,
            "id": "http-only-cookies"
          },
          {
            "text": "CSRF Protection",
            "level": 3,
            "id": "csrf-protection"
          },
          {
            "text": "Identifying users via the Authorization Header",
            "level": 3,
            "id": "identifying-users-via-the-authorization-header"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    a: \"a\",\n    h3: \"h3\",\n    ol: \"ol\",\n    li: \"li\",\n    h4: \"h4\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload's Authentication is extremely powerful and gives you everything you need when you go to build a new app or site in a secure and responsible manner.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To enable Authentication on a collection, define an \", _jsx(_components.code, {\n        children: \"auth\"\n      }), \" property and set it to either \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" or to an object containing the options below.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"useAPIKey\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Payload Authentication provides for API keys to be set on each user within an Authentication-enabled Collection. \", _jsx(_components.a, {\n              href: \"/docs/authentication/config#api-keys\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"tokenExpiration\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"How long (in seconds) to keep the user logged in. JWTs and HTTP-only cookies will both expire at the same time.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"maxLoginAttempts\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Only allow a user to attempt logging in X amount of times. Automatically locks out a user from authenticating if this limit is passed. Set to \", _jsx(_components.code, {\n              children: \"0\"\n            }), \" to disable.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"lockTime\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set the time (in milliseconds) that a user should be locked out if they fail authentication more times than \", _jsx(_components.code, {\n              children: \"maxLoginAttempts\"\n            }), \" allows for.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"depth\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"How many levels deep a \", _jsx(_components.code, {\n              children: \"user\"\n            }), \" document should be populated when creating the JWT and binding the \", _jsx(_components.code, {\n              children: \"user\"\n            }), \" to the express \", _jsx(_components.code, {\n              children: \"req\"\n            }), \". Defaults to \", _jsx(_components.code, {\n              children: \"0\"\n            }), \" and should only be modified if absolutely necessary, as this will affect performance.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"cookies\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set cookie options, including \", _jsx(_components.code, {\n              children: \"secure\"\n            }), \", \", _jsx(_components.code, {\n              children: \"sameSite\"\n            }), \", and \", _jsx(_components.code, {\n              children: \"domain\"\n            }), \". For advanced users.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"forgotPassword\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Customize the way that the \", _jsx(_components.code, {\n              children: \"forgotPassword\"\n            }), \" operation functions. \", _jsx(_components.a, {\n              href: \"/docs/authentication/config#forgot-password\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"verify\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" or pass an object with verification options to require users to verify by email before they are allowed to log into your app. \", _jsx(_components.a, {\n              href: \"/docs/authentication/config#email-verification\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"disableLocalStrategy\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Advanced - disable Payload's built-in local auth strategy. Only use this property if you have replaced Payload's auth mechanisms with your own.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"strategies\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Advanced - an array of PassportJS authentication strategies to extend this collection's authentication with. \", _jsx(_components.a, {\n              href: \"/docs/authentication/config#strategies\",\n              children: \"More\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"API keys\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To integrate with third-party APIs or services, you might need the ability to generate API keys that can be used to identify as a certain user within Payload.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, if you have a third-party service or external app that needs to be able to perform protected actions at its discretion, you have two options:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Create a user for the third-party app, and log in each time to receive a token before you attempt to access any protected actions\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Enable API key support for the Collection, where you can generate a non-expiring API key per user in the collection\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Technically, both of these options will work for third-party integrations but the second option with API key is simpler, because it reduces the amount of work that your integrations need to do to be authenticated properly.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To enable API keys on a collection, set the \", _jsx(_components.code, {\n        children: \"useAPIKey\"\n      }), \" auth option to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \". From there, a new interface will appear in the Admin panel for each document within the collection that allows you to generate an API key for each user in the Collection.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsx(_components.p, {\n        children: \"User API keys are encrypted within the database, meaning that if your database\\nis compromised, your API keys will not be.\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Authenticating via API Key\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To authenticate REST or GraphQL API requests using an API key, set the \", _jsx(_components.code, {\n        children: \"Authorization\"\n      }), \" header. The header is case-sensitive and needs the slug of the \", _jsx(_components.code, {\n        children: \"auth.useAPIKey\"\n      }), \" enabled collection, then \\\" API-Key \\\", followed by the \", _jsx(_components.code, {\n        children: \"apiKey\"\n      }), \" that has been assigned. Payload's built-in middleware will then assign the user document to \", _jsx(_components.code, {\n        children: \"req.user\"\n      }), \" and handle requests with the proper access control.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"For example, using Fetch:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import User from '../collections/User';\\n\\nconst response = await fetch(\\\"http://localhost:3000/api/pages\\\", {\\n  headers: {\\n    Authorization: `${User.slug} API-Key ${YOUR_API_KEY}`,\\n  },\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Forgot Password\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can customize how the Forgot Password workflow operates with the following options on the \", _jsx(_components.code, {\n        children: \"auth.forgotPassword\"\n      }), \" property:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"generateEmailHTML\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Function that accepts one argument, containing \", _jsx(_components.code, {\n        children: \"{ req, token, user }\"\n      }), \", that allows for overriding the HTML within emails that are sent to users attempting to reset their password. The function should return a string that supports HTML, which can be a full HTML email.\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"success\",\n      children: [_jsx(\"strong\", {\n        children: \"Tip:\"\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"HTML templating can be used to create custom email templates, inline CSS\\nautomatically, and more. You can make a reusable function that standardizes\\nall email sent from Payload, which makes sending custom emails more DRY.\\nPayload doesn't ship with an HTML templating engine, so you are free to choose\\nyour own.\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Customers: CollectionConfig = {\\n  slug: 'customers',\\n  auth: {\\n    forgotPassword: {\\n      // highlight-start\\n      generateEmailHTML: ({ req, token, user }) => {\\n        // Use the token provided to allow your user to reset their password\\n        const resetPasswordURL = `https://yourfrontend.com/reset-password?token=${token}`;\\n\\n        return `\\n          <!doctype html>\\n          <html>\\n            <body>\\n              <h1>Here is my custom email template!</h1>\\n              <p>Hello, ${user.email}!</p>\\n              <p>Click below to reset your password.</p>\\n              <p>\\n                <a href=\\\"${resetPasswordURL}\\\">${resetPasswordURL}</a>\\n              </p>\\n            </body>\\n          </html>\\n        `;\\n      }\\n      // highlight-end\\n    }\\n  }\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(\"strong\", {\n        children: \"Important:\"\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"If you specify a different URL to send your users to for resetting their\\npassword, such as a page on the frontend of your app or similar, you need to\\nhandle making the call to the Payload REST or GraphQL reset-password operation\\nyourself on your frontend, using the token that was provided for you. Above,\\nit was passed via query parameter.\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"generateEmailSubject\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similarly to the above \", _jsx(_components.code, {\n        children: \"generateEmailHTML\"\n      }), \", you can also customize the subject of the email. The function argument are the same but you can only return a string - not HTML.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  slug: 'customers',\\n  auth: {\\n    forgotPassword: {\\n      // highlight-start\\n      generateEmailSubject: ({ req, user }) => {\\n        return `Hey ${user.email}, reset your password!`;\\n      }\\n      // highlight-end\\n    }\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Email Verification\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you'd like to require email verification before a user can successfully log in, you can enable it by passing \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" or an \", _jsx(_components.code, {\n        children: \"options\"\n      }), \" object to \", _jsx(_components.code, {\n        children: \"auth.verify\"\n      }), \". The following options are available:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"generateEmailHTML\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Function that accepts one argument, containing \", _jsx(_components.code, {\n        children: \"{ req, token, user }\"\n      }), \", that allows for overriding the HTML within emails that are sent to users indicating how to validate their account. The function should return a string that supports HTML, which can optionally be a full HTML email.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\n\\nconst Customers: CollectionConfig = {\\n  slug: 'customers',\\n  auth: {\\n    verify: {\\n      // highlight-start\\n      generateEmailHTML: ({ req, token, user }) => {\\n        // Use the token provided to allow your user to verify their account\\n        const url = `https://yourfrontend.com/verify?token=${token}`;\\n\\n        return `Hey ${user.email}, verify your email by clicking here: ${url}`;\\n      }\\n      // highlight-end\\n    }\\n  }\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(\"strong\", {\n        children: \"Important:\"\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"If you specify a different URL to send your users to for email verification,\\nsuch as a page on the frontend of your app or similar, you need to handle\\nmaking the call to the Payload REST or GraphQL verification operation yourself\\non your frontend, using the token that was provided for you. Above, it was\\npassed via query parameter.\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"generateEmailSubject\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similarly to the above \", _jsx(_components.code, {\n        children: \"generateEmailHTML\"\n      }), \", you can also customize the subject of the email. The function argument are the same but you can only return a string - not HTML.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  slug: 'customers',\\n  auth: {\\n    forgotPassword: {\\n      // highlight-start\\n      generateEmailSubject: ({ req, user }) => {\\n        return `Hey ${user.email}, reset your password!`;\\n      }\\n      // highlight-end\\n    }\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Strategies\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As of Payload \", _jsx(_components.code, {\n        children: \"1.0.0\"\n      }), \", you can add additional authentication strategies to Payload easily by passing them to your collection's \", _jsx(_components.code, {\n        children: \"auth.strategies\"\n      }), \" array.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Behind the scenes, Payload uses PassportJS to power its local authentication strategy, so most strategies listed on the PassportJS website will work seamlessly. Combined with adding custom components to the admin panel's \", _jsx(_components.code, {\n        children: \"Login\"\n      }), \" view, you can create advanced authentication strategies directly within Payload.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsx(_components.p, {\n        children: \"This is an advanced feature, so only attempt this if you are an experienced\\ndeveloper. Otherwise, just let Payload's built-in authentication handle user\\nauth for you.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"strategies\"\n      }), \" property is an array that takes objects with the following properties:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"strategy\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This property can accept a Passport strategy directly, or you can pass a function that takes a \", _jsx(_components.code, {\n        children: \"payload\"\n      }), \" argument, and returns a Passport strategy.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"name\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you pass a strategy to the \", _jsx(_components.code, {\n        children: \"strategy\"\n      }), \" property directly, the \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" property is optional and allows you to override the strategy's built-in name.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"However, if you pass a function to \", _jsx(_components.code, {\n        children: \"strategy\"\n      }), \", \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" is a required property.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In either case, Payload will prefix the strategy name with the collection \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \" that the strategy is passed to.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Authentication Config",
        "slug": "config",
        "label": "Config",
        "order": 20,
        "desc": "Enable and customize options in the Authentication config for features including Forgot Password, Login Attempts, API key usage and more.",
        "keywords": "authentication, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Options",
            "level": 2,
            "id": "options"
          },
          {
            "text": "API keys",
            "level": 3,
            "id": "api-keys"
          },
          {
            "text": "Forgot Password",
            "level": 3,
            "id": "forgot-password"
          },
          {
            "text": "Email Verification",
            "level": 3,
            "id": "email-verification"
          },
          {
            "text": "Strategies",
            "level": 3,
            "id": "strategies"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    strong: \"strong\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Enabling Authentication on a Collection automatically exposes additional auth-based operations in the Local, REST, and GraphQL APIs.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Access\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Access operation returns what a logged in user can and can't do with the collections and globals that are registered via your config. This data can be immensely helpful if your app needs to show and hide certain features based on access control, as the Payload Admin panel does.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"REST API endpoint\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"GET http://localhost:3000/api/access\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example response:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  canAccessAdmin: true,\\n  collections: {\\n    pages: {\\n      create: {\\n        permission: true,\\n      },\\n      read: {\\n        permission: true,\\n      },\\n      update: {\\n        permission: true,\\n      },\\n      delete: {\\n        permission: true,\\n      },\\n      fields: {\\n        title: {\\n          create: {\\n            permission: true,\\n          },\\n          read: {\\n            permission: true,\\n          },\\n          update: {\\n            permission: true,\\n          },\\n        }\\n      }\\n    }\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example GraphQL Query\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-graphql\",\n        children: \"query {\\n  Access {\\n    pages {\\n      read {\\n        permission\\n      }\\n    }\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Document access can also be queried on a collection/global basis. Access on a global can queried like \", _jsx(_components.code, {\n        children: \"http://localhost:3000/api/global-slug/access\"\n      }), \", Collection document access can be queried like \", _jsx(_components.code, {\n        children: \"http://localhost:3000/api/collection-slug/access/:id\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Me\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Returns either a logged in user with token or null when there is no logged in user.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"REST API endpoint\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"GET http://localhost:3000/api/[collection-slug]/me\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example response:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"{\\n  user: { // The JWT \\\"payload\\\" ;) from the logged in user\\n    email: 'dev@payloadcms.com',\\n    createdAt: \\\"2020-12-27T21:16:45.645Z\\\",\\n    updatedAt: \\\"2021-01-02T18:37:41.588Z\\\",\\n    id: \\\"5ae8f9bde69e394e717c8832\\\"\\n  },\\n  token: '34o4345324...', // The token that can be used to authenticate the user\\n  exp: 1609619861, // Unix timestamp representing when the user's token will expire\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example GraphQL Query\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-graphql\",\n        children: \"query {\\n  Me[collection-singular-label] {\\n    user {\\n      email\\n    }\\n    exp\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Login\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Accepts an \", _jsx(_components.code, {\n        children: \"email\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"password\"\n      }), \". On success, it will return the logged in user as well as a token that can be used to authenticate. In the GraphQL and REST APIs, this operation also automatically sets an HTTP-only cookie including the user's token. If you pass an Express \", _jsx(_components.code, {\n        children: \"res\"\n      }), \" to the Local API operation, Payload will set a cookie there as well.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example REST API login\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const res = await fetch('http://localhost:3000/api/[collection-slug]/login', {\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n  },\\n  body: JSON.stringify({\\n    email: 'dev@payloadcms.com',\\n    password: 'this-is-not-our-password...or-is-it?',\\n  })\\n})\\n\\nconst json = await res.json();\\n\\n// JSON will be equal to the following:\\n/*\\n{\\n  user: {\\n    email: 'dev@payloadcms.com',\\n    createdAt: \\\"2020-12-27T21:16:45.645Z\\\",\\n    updatedAt: \\\"2021-01-02T18:37:41.588Z\\\",\\n    id: \\\"5ae8f9bde69e394e717c8832\\\"\\n  },\\n  token: '34o4345324...',\\n  exp: 1609619861\\n}\\n*/\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example GraphQL Mutation\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-graphql\",\n        children: \"mutation {\\n  login[collection-singular-label](email: \\\"dev@payloadcms.com\\\", password: \\\"yikes\\\") {\\n    user {\\n      email\\n    }\\n    exp\\n    token\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example Local API login\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const result = await payload.login({\\n  collection: '[collection-slug]',\\n  data: {\\n    email: 'dev@payloadcms.com',\\n    password: 'get-out',\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Logout\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As Payload sets HTTP-only cookies, logging out cannot be done by just removing a cookie in JavaScript, as HTTP-only cookies are inaccessible by JS within the browser. So, Payload exposes a \", _jsx(_components.code, {\n        children: \"logout\"\n      }), \" operation to delete the token in a safe way.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example REST API logout\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const res = await fetch('http://localhost:3000/api/[collection-slug]/logout', {\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example GraphQL Mutation\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"mutation {\\n  logout[collection-singular-label]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Refresh\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Allows for \\\"refreshing\\\" JWTs. If your user has a token that is about to expire, but the user is still active and using the app, you might want to use the \", _jsx(_components.code, {\n        children: \"refresh\"\n      }), \" operation to receive a new token by sending the operation the token that is about to expire.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This operation requires a non-expired token to send back a new one. If the user's token has already expired, you will need to allow them to log in again to retrieve a new token.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If successful, this operation will automatically renew the user's HTTP-only cookie and will send back the updated token in JSON.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example REST API token refresh\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const res = await fetch('http://localhost:3000/api/[collection-slug]/refresh-token', {\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n  },\\n})\\n\\nconst json = await res.json();\\n\\n// JSON will be equal to the following:\\n/*\\n{\\n  user: {\\n    email: 'dev@payloadcms.com',\\n    createdAt: \\\"2020-12-27T21:16:45.645Z\\\",\\n    updatedAt: \\\"2021-01-02T18:37:41.588Z\\\",\\n    id: \\\"5ae8f9bde69e394e717c8832\\\"\\n  },\\n  refreshedToken: '34o4345324...',\\n  exp: 1609619861\\n}\\n*/\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example GraphQL Mutation\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"mutation {\\n  refreshToken[collection-singular-label] {\\n    user {\\n      email\\n    }\\n    refreshedToken\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [\"The Refresh operation will automatically find the user's token in either a JWT header or the HTTP-only cookie. But, you can specify the token you're looking to refresh by providing the REST API with a \", _jsx(_components.code, {\n          children: \"token\"\n        }), \" within the JSON body of the request, or by providing the GraphQL resolver a \", _jsx(_components.code, {\n          children: \"token\"\n        }), \" arg.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Verify by Email\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If your collection supports email verification, the Verify operation will be exposed which accepts a verification token and sets the user's \", _jsx(_components.code, {\n        children: \"_verified\"\n      }), \" property to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", thereby allowing the user to authenticate with the Payload API.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example REST API user verification\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const res = await fetch(`http://localhost:3000/api/[collection-slug]/verify/${TOKEN_HERE}`, {\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n  },\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example GraphQL Mutation\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-graphql\",\n        children: \"mutation {\\n  verifyEmail[collection-singular-label](token: \\\"TOKEN_HERE\\\")\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example Local API verification\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const result = await payload.verifyEmail({\\n  collection: '[collection-slug]',\\n  token: 'TOKEN_HERE',\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Unlock\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a user locks themselves out and you wish to deliberately unlock them, you can utilize the Unlock operation. The Admin panel features an Unlock control automatically for all collections that feature max login attempts, but you can programmatically unlock users as well by using the Unlock operation.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To restrict who is allowed to unlock users, you can utilize the \", _jsx(_components.a, {\n        href: \"/docs/access-control/overview#unlock\",\n        children: _jsx(_components.code, {\n          children: \"unlock\"\n        })\n      }), \" access control function.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example REST API unlock\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const res = await fetch(`http://localhost:3000/api/[collection-slug]/unlock`, {\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n  },\\n})\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example GraphQL Mutation\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"mutation {\\n  unlock[collection-singular-label]\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example Local API unlock\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const result = await payload.unlock({\\n  collection: '[collection-slug]',\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Forgot Password\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload comes with built-in forgot password functionality. Submitting an email address to the Forgot Password operation will generate an email and send it to the respective email address with a link to reset their password.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The link to reset the user's password contains a token which is what allows the user to securely reset their password.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the Forgot Password operations send users to the Payload Admin panel to reset their password, but you can customize the generated email to send users to the frontend of your app instead by \", _jsx(_components.a, {\n        href: \"/docs/authentication/config#forgot-password\",\n        children: \"overriding the email HTML\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example REST API Forgot Password\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const res = await fetch(`http://localhost:3000/api/[collection-slug]/forgot-password`, {\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n  },\\n  body: JSON.stringify({\\n    email: 'dev@payloadcms.com',\\n  }),\\n});\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example GraphQL Mutation\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"mutation {\\n  forgotPassword[collection-singular-label](email: \\\"dev@payloadcms.com\\\")\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example Local API forgot password\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const token = await payload.forgotPassword({\\n  collection: '[collection-slug]',\\n  data: {\\n    email: 'dev@payloadcms.com',\\n  },\\n  disableEmail: false // you can disable the auto-generation of email via local API\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nYou can stop the reset-password email from being sent via using the local API. This is helpful if you need to create user accounts programmatically, but not set their password for them. This effectively generates a reset password token which you can then use to send to a page you create, allowing a user to \\\"complete\\\" their account by setting their password. In the background, you'd use the token to \\\"reset\\\" their password.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Reset Password\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After a user has \\\"forgotten\\\" their password and a token is generated, that token can be used to send to the reset password operation along with a new password which will allow the user to reset their password securely.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example REST API Reset Password\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const res = await fetch(`http://localhost:3000/api/[collection-slug]/reset-password`, {\\n  method: 'POST',\\n  headers: {\\n    'Content-Type': 'application/json',\\n  },\\n  body: JSON.stringify({\\n    token: 'TOKEN_GOES_HERE'\\n    password: 'not-today',\\n  }),\\n});\\n\\nconst json = await res.json();\\n\\n// JSON will be equal to the following:\\n/*\\n{\\n  user: {\\n    email: 'dev@payloadcms.com',\\n    createdAt: \\\"2020-12-27T21:16:45.645Z\\\",\\n    updatedAt: \\\"2021-01-02T18:37:41.588Z\\\",\\n    id: \\\"5ae8f9bde69e394e717c8832\\\"\\n  },\\n  token: '34o4345324...',\\n  exp: 1609619861\\n}\\n*/\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"Example GraphQL Mutation\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-graphql\",\n        children: \"mutation {\\n  resetPassword[collection-singular-label](token: \\\"TOKEN_GOES_HERE\\\", password: \\\"not-today\\\")\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Authentication Operations",
        "slug": "operations",
        "label": "Operations",
        "order": 30,
        "desc": "Enabling Authentication automatically makes key operations available such as Login, Logout, Verify, Unlock, Reset Password and more.",
        "keywords": "authentication, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Access",
            "level": 3,
            "id": "access"
          },
          {
            "text": "Me",
            "level": 3,
            "id": "me"
          },
          {
            "text": "Login",
            "level": 3,
            "id": "login"
          },
          {
            "text": "Logout",
            "level": 3,
            "id": "logout"
          },
          {
            "text": "Refresh",
            "level": 3,
            "id": "refresh"
          },
          {
            "text": "Verify by Email",
            "level": 3,
            "id": "verify-by-email"
          },
          {
            "text": "Unlock",
            "level": 3,
            "id": "unlock"
          },
          {
            "text": "Forgot Password",
            "level": 3,
            "id": "forgot-password"
          },
          {
            "text": "Reset Password",
            "level": 3,
            "id": "reset-password"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Because Payload uses your existing Express server, you are free to add whatever logic you need to your app through endpoints of your own. However, Payload does not add its middleware to your Express app itself—instead, it scopes all of its middleware to Payload-specific routers.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This approach has a ton of benefits - it's great for isolation of concerns and limiting scope, but it also means that your additional routes won't have access to Payload's user authentication.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsx(_components.p, {\n        children: \"You can make full use of Payload's built-in authentication within your own custom Express endpoints by adding Payload's authentication middleware.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Example in \", _jsx(_components.code, {\n        children: \"server.js\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import express from 'express';\\nimport payload from 'payload';\\n\\nconst app = express();\\n\\npayload.init({\\n  secret: 'PAYLOAD_SECRET_KEY',\\n  mongoURL: 'mongodb://localhost/payload',\\n  express: app,\\n});\\n\\nconst router = express.Router();\\n\\nrouter.use(payload.authenticate); // highlight-line\\n\\nrouter.get('/', (req, res) => {\\n  if (req.user) {\\n    return res.send(`Authenticated successfully as ${req.user.email}.`);\\n  }\\n\\n  return res.send('Not authenticated');\\n});\\n\\napp.use('/some-route-here', router);\\n\\napp.listen(3000, async () => {\\n  payload.logger.info(`listening on ${3000}...`);\\n});\\n\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Using the Payload Auth Middleware",
        "slug": "using-middleware",
        "label": "Using the Middleware",
        "order": 40,
        "desc": "Make full use of Payload's built-in authentication with your own custom Express endpoints by adding Payload's authentication middleware.",
        "keywords": "authentication, middleware, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": []
      }
    ]
  },
  {
    "slug": "Versions",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    em: \"em\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h3: \"h3\",\n    h5: \"h5\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h4: \"h4\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"Payload's powerful Versions functionality allows you to keep a running history of changes over time and extensible to fit any content publishing workflow.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When enabled, Payload will automatically scaffold a new Collection in your database to store versions of your document(s) over time, and the Admin UI will be extended with additional views that allow you to browse document versions, view diffs in order to see exactly what has changed in your documents (and when they changed), and restore documents back to prior versions easily.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"/images/docs/versions.png\",\n        alt: \"Versions\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"Comparing an old version to a newer version of a document\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"With Versions, you can:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Maintain an audit log / history of every change ever made to a document, including monitoring for what user made which change\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Restore documents and globals to prior states in case you need to roll back changes\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Build a true \", _jsx(_components.a, {\n          href: \"/docs/versions/drafts\",\n          children: \"Draft Preview\"\n        }), \" mode for your data\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Manage who can see Drafts, and who can only see Published documents via \", _jsx(_components.a, {\n          href: \"/docs/access-control/overview\",\n          children: \"Access Control\"\n        })]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Enable \", _jsx(_components.a, {\n          href: \"/docs/versions/autosave\",\n          children: \"Autosave\"\n        }), \" on collections and globals to never lose your work again\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Build a powerful publishing schedule mechanism to create documents and have them become publicly readable automatically at a future date\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsx(_components.p, {\n        children: \"Versions are extremely performant and totally opt-in. They don't change the shape of your data at all. All versions are stored in a separate Collection and can be turned on and off easily at your discretion.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Options\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Versions support a few different levels of functionality that each come with their own impacts to document workflow.\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Versions enabled, drafts disabled\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you enable versions but keep draft mode disabled, Payload will simply create a new version of a document each time you update a document. This is great for use cases where you need to retain a history of all document updates over time, but always want to treat the newest document version as the version that is \\\"published\\\".\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For example, a use case for \\\"versions enabled, drafts disabled\\\" could be on a collection of users, where you might want to keep a version history (or audit log) of all changes ever made to users - but any changes to users should \", _jsx(_components.em, {\n        children: \"always\"\n      }), \" be treated as \\\"published\\\" and you have no need to maintain a \\\"draft\\\" version of a user.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Versions and drafts enabled\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you have versions \", _jsx(_components.em, {\n        children: \"and\"\n      }), \" drafts enabled, you are able to control which documents are published, and which are considered draft. That lets you write \", _jsx(_components.a, {\n        href: \"/docs/access-control/overview\",\n        children: \"access control\"\n      }), \" to control who can see published documents, and who can see draft documents. It also lets you save versions (drafts) that are \", _jsx(_components.em, {\n        children: \"newer\"\n      }), \" than your most recently published document, which is helpful if you want to draft changes and maybe even preview them before you publish the changes. Read more about Drafts \", _jsx(_components.a, {\n        href: \"/docs/versions/drafts\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Versions, drafts, and autosave enabled\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When you have versions, drafts, \", _jsx(_components.em, {\n        children: \"and\"\n      }), \" \", _jsx(_components.code, {\n        children: \"autosave\"\n      }), \" enabled, the Admin UI will automatically save changes that you make to a new \", _jsx(_components.code, {\n        children: \"draft\"\n      }), \" version as you edit a document, which makes sure that you never lose your changes ever again. Autosave will not affect your published post at all—instead, it'll just save your changes and let you publish them whenever you or your editors are ready to do so. Read more about Autosave \", _jsx(_components.a, {\n        href: \"/docs/versions/autosave\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Collection config\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Configuring Versions is done by adding the \", _jsx(_components.code, {\n        children: \"versions\"\n      }), \" key to your Collection configs. Set it to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" to enable default Versions settings, or customize versions options by setting the property equal to an object containing the following available options:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"maxPerDoc\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Use this setting to control how many versions to keep on a document by document basis. Must be an integer.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"retainDeleted\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Boolean to determine if, when a document is deleted, you'd like to retain versions of that document, or go through and automatically delete all versions that are associated with the deleted document.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"drafts \"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable \", _jsx(_components.a, {\n              href: \"/docs/versions/drafts\",\n              children: \"Drafts\"\n            }), \" mode for this collection. To enable, set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" or pass an object with \", _jsx(_components.code, {\n              children: \"draft\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/docs/versions/drafts#options\",\n              children: \"options\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Global config\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Global versions work similarly to Collection versions but have a slightly different set of config properties supported.\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"max\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Use this setting to control how many versions to keep on a global by global basis. Must be an integer.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"drafts\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable \", _jsx(_components.a, {\n              href: \"/docs/versions/drafts\",\n              children: \"Drafts\"\n            }), \" mode for this global. To enable, set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" or pass an object with \", _jsx(_components.code, {\n              children: \"draft\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/docs/versions/drafts#options\",\n              children: \"options\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Database impact\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By enabling \", _jsx(_components.code, {\n        children: \"versions\"\n      }), \", a new MongoDB collection will be made to store versions for your collection or global. The collection will be named based off the \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \" of the collection or global and will follow this pattern (where \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \" is replaced with the \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \" of your collection or global):\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"_slug_versions\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each document in this new \", _jsx(_components.code, {\n        children: \"versions\"\n      }), \" collection will store a set of meta properties about the version as well as a \", _jsx(_components.em, {\n        children: \"full\"\n      }), \" copy of the document. For example, a version's data might look like this for a Collection document:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"_id\\\": \\\"61cf752c19cdf1b1af7b61f1\\\", // a unique ID of this version\\n  \\\"parent\\\": \\\"61ce1354091d5b3ffc20ea6e\\\", // the ID of the parent document\\n  \\\"autosave\\\": false, // used to denote if this version was created via autosave\\n  \\\"version\\\": {\\n    // your document's data goes here\\n    // all fields are set to not required and this property can be partially complete\\n  },\\n  \\\"createdAt\\\": \\\"2021-12-31T21:25:00.992+00:00\\\",\\n  \\\"updatedAt\\\": \\\"2021-12-31T21:25:00.992+00:00\\\"\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Global versions are stored the same as the collection version shown above, except they do not feature the \", _jsx(_components.code, {\n        children: \"parent\"\n      }), \" property, as each Global receives its own \", _jsx(_components.code, {\n        children: \"versions\"\n      }), \" collection. That means we know that all versions in that collection correspond to that specific global.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Version operations\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Versions expose new operations for both collections and globals. They allow you to find and query versions, find a single version by ID, and publish (or restore) a version by ID. Both Collections and Globals support the same new operations. They are used primarily by the admin UI, but if you are writing custom logic in your app and would like to utilize them, they're available for you to use as well via REST, GraphQL, and Local APIs.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Collection REST endpoints:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Method\"\n          }), _jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"GET\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collectionSlug}/versions\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Find and query paginated versions\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"GET\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collectionSlug}/versions/:id\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Find a specific version by ID\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collectionSlug}/versions/:id\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Restore a version by ID\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Collection GraphQL queries:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Query Name\"\n          }), _jsx(_components.th, {\n            children: \"Operation\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"version{collection.label.singular}\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"findVersionByID\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"versions{collection.label.plural}\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"findVersions\"\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"And mutation:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Query Name\"\n          }), _jsx(_components.th, {\n            children: \"Operation\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"restoreVersion{collection.label.singular}\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"restoreVersion\"\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Collection Local API methods:\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Find\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be a paginated set of Versions.\\n// See /docs/queries/pagination for more.\\nconst result = await payload.findVersions({\\n  collection: 'posts', // required\\n  depth: 2,\\n  page: 1,\\n  limit: 10,\\n  where: {}, // pass a `where` query here\\n  sort: '-createdAt',\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Find by ID\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be a Post document.\\nconst result = await payload.findVersionByID({\\n  collection: 'posts', // required\\n  id: '507f1f77bcf86cd799439013', // required\\n  depth: 2,\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Restore\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be the restored global document.\\nconst result = await payload.restoreVersion({\\n  collection: 'posts', // required\\n  id: '507f1f77bcf86cd799439013', // required\\n  depth: 2,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Global REST endpoints:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Method\"\n          }), _jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"GET\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/globals/{globalSlug}/versions\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Find and query paginated versions\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"GET\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/globals/{globalSlug}/versions/:id\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Find a specific version by ID\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/globals/{globalSlug}/versions/:id\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Restore a version by ID\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Global GraphQL queries:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Query Name\"\n          }), _jsx(_components.th, {\n            children: \"Operation\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"version{global.label}\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"findVersionByID\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"versions{global.label}\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"findVersions\"\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Global GraphQL mutation:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Query Name\"\n          }), _jsx(_components.th, {\n            children: \"Operation\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"restoreVersion{global.label}\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"restoreVersion\"\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Global Local API methods:\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Find\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be a paginated set of Versions.\\n// See /docs/queries/pagination for more.\\nconst result = await payload.findGlobalVersions({\\n  slug: 'header', // required\\n  depth: 2,\\n  page: 1,\\n  limit: 10,\\n  where: {}, // pass a `where` query here\\n  sort: '-createdAt',\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Find by ID\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be a Post document.\\nconst result = await payload.findGlobalVersionByID({\\n  slug: 'header', // required\\n  id: '507f1f77bcf86cd799439013', // required\\n  depth: 2,\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Restore\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be the restored global document.\\nconst result = await payload.restoreGlobalVersion({\\n  slug: 'header', // required\\n  id: '507f1f77bcf86cd799439013', // required\\n  depth: 2,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Access Control\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Versions expose a new access control function on both Collections and Globals that allow for you to control who can see versions of documents, and who can't.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"New version access control:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Function\"\n          }), _jsx(_components.th, {\n            children: \"Allows/Denies Access\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"readVersions\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Used to control who can read versions, and who can't. Will automatically restrict the Admin UI version viewing access.\"\n          })]\n        })\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Versions",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Keep a version history or audit log of changes and publish collection documents and globals.",
        "keywords": "version history, revisions, audit log, draft, publish, restore, autosave, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Options",
            "level": 3,
            "id": "options"
          },
          {
            "text": "Collection config",
            "level": 3,
            "id": "collection-config"
          },
          {
            "text": "Global config",
            "level": 3,
            "id": "global-config"
          },
          {
            "text": "Version operations",
            "level": 3,
            "id": "version-operations"
          },
          {
            "text": "Access Control",
            "level": 3,
            "id": "access-control"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    img: \"img\",\n    h3: \"h3\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    h5: \"h5\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload's Draft functionality builds on top of the Versions functionality to allow you to make changes to your collection documents and globals, but publish only when you're ready. This functionality allows you to build powerful Preview environments for your data, where you can make sure your changes look good before publishing documents.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsx(_components.p, {\n        children: \"Drafts rely on Versions being enabled in order to function.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By enabling Versions with Drafts, your collections and globals can maintain \", _jsx(_components.em, {\n        children: \"newer\"\n      }), \", and \", _jsx(_components.em, {\n        children: \"unpublished\"\n      }), \" versions of your documents. It's perfect for cases where you might want to work on a document, update it and save your progress, but not necessarily make it publicly published right away. Drafts are extremely helpful when building preview implementations.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"/images/docs/drafts-enabled.png\",\n        alt: \"Drafts Enabled\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"If Drafts are enabled, the typical Save button is replaced with new actions which allow you to either save a draft, or publish your changes.\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Collections and Globals both support the same options for configuring drafts. You can either set \", _jsx(_components.code, {\n        children: \"versions.drafts\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", or pass an object to configure draft properties.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Draft Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"autosave\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Enable \", _jsx(_components.code, {\n              children: \"autosave\"\n            }), \" to automatically save progress while documents are edited. To enable, set to \", _jsx(_components.code, {\n              children: \"true\"\n            }), \" or pass an object with \", _jsx(_components.a, {\n              href: \"/docs/versions/autosave\",\n              children: \"options\"\n            }), \".\"]\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Database changes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By enabling drafts on a collection or a global, Payload will \", _jsx(\"strong\", {\n        children: \"automatically inject a new field into your schema\"\n      }), \" called \", _jsx(_components.code, {\n        children: \"_status\"\n      }), \". The \", _jsx(_components.code, {\n        children: \"_status\"\n      }), \" field is used internally by Payload to store if a document is set to \", _jsx(_components.code, {\n        children: \"draft\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"published\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Admin UI status indication\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Within the Admin UI, if drafts are enabled, a document can be shown with one of three \\\"statuses\\\":\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(\"strong\", {\n          children: \"Draft\"\n        }), \" - if a document has never been published, and only draft versions of the document are present\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(\"strong\", {\n          children: \"Published\"\n        }), \" - if a document is published and there are no newer drafts available\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(\"strong\", {\n          children: \"Changed\"\n        }), \" - if a document has been published, but there are newer drafts available and not yet published\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Draft API\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsx(_components.p, {\n        children: \"If drafts are enabled on your collection or global, important and powerful changes are made to your REST, GraphQL, and Local APIs that allow you to specify if you are interacting with drafts or with live documents.\"\n      })\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Updating or creating drafts\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you enable drafts on a collection or global, the \", _jsx(_components.code, {\n        children: \"create\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operations for REST, GraphQL, and Local APIs expose a new option called \", _jsx(_components.code, {\n        children: \"draft\"\n      }), \" which allows you to specify if you are creating or updating a \", _jsx(\"strong\", {\n        children: \"draft\"\n      }), \", or if you're just sending your changes straight to the published document. For example, if you pass the query parameter \", _jsx(_components.code, {\n        children: \"?draft=true\"\n      }), \" to a REST \", _jsx(_components.code, {\n        children: \"create\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operation, your action will be treated as if you are creating a \", _jsx(_components.code, {\n        children: \"draft\"\n      }), \" and not a published document. By default, the \", _jsx(_components.code, {\n        children: \"draft\"\n      }), \" argument is set to \", _jsx(_components.code, {\n        children: \"false\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Required fields\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(_components.code, {\n        children: \"draft\"\n      }), \" is enabled while creating or updating a document, all fields are considered as not required, so that you can save drafts that are incomplete.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Reading drafts vs. published documents\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the \", _jsx(_components.code, {\n        children: \"draft\"\n      }), \" argument within \", _jsx(_components.code, {\n        children: \"create\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operations, a \", _jsx(_components.code, {\n        children: \"draft\"\n      }), \" argument is also exposed for \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"findByID\"\n      }), \" operations.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If \", _jsx(_components.code, {\n        children: \"draft\"\n      }), \" is set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" while reading a document, \", _jsx(\"strong\", {\n        children: \"Payload will automatically replace returned document(s) with their newest drafts\"\n      }), \" if any newer drafts are available.\"]\n    }), \"\\n\", _jsx(\"strong\", {\n      children: \"For example, let's take the following scenario:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"You create a new collection document and publish it right away\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"You then make some updates, and save the updates as a draft\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"You then make some further updates, and save more updates as another draft\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here, you will have a published document that resides in your main collection, and then you'll have two \", _jsx(_components.em, {\n        children: \"newer\"\n      }), \" drafts that reside in the \", _jsx(_components.code, {\n        children: \"_[collectionSlug]_versions\"\n      }), \" database collection.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you simply fetch your created document using a \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"findByID\"\n      }), \" operation, your published document will be returned and the drafts will be ignored.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"But, if you specify \", _jsx(_components.code, {\n        children: \"draft\"\n      }), \" as \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", Payload will automatically replace your published document's content with content coming from the most recently saved \", _jsx(_components.code, {\n        children: \"version\"\n      }), \". In this case, as we have created \", _jsx(_components.em, {\n        children: \"two\"\n      }), \" versions in the above scenario, Payload will send back data from the newest (second) draft and your document will appear as the most recently drafted version instead of the published version.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Controlling who can see Collection drafts\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [\"If you're using the \", _jsx(\"strong\", {\n          children: \"drafts\"\n        }), \" feature, it's important for you to consider who can view your drafts, and who can view only published documents. Luckily, Payload makes this extremely simple and puts the power completely in your hands.\"]\n      })\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Restricting draft access\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"read\"\n      }), \" \", _jsx(_components.a, {\n        href: \"/docs/access-control/collections#read\",\n        children: \"Access Control\"\n      }), \" method to restrict who is able to view drafts of your documents by simply returning a \", _jsx(_components.a, {\n        href: \"/docs/queries/overview\",\n        children: \"query constraint\"\n      }), \" which restricts the documents that any given user is able to retrieve.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example that utilizes the \", _jsx(_components.code, {\n        children: \"_status\"\n      }), \" field to require a user to be logged in to retrieve drafts:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Pages: CollectionConfig = {\\n  slug: 'pages',\\n  access: {\\n    read: ({ req }) => {\\n      // If there is a user logged in,\\n      // let them retrieve all documents\\n      if (req.user) return true;\\n\\n      // If there is no user,\\n      // restrict the documents that are returned\\n      // to only those where `_status` is equal to `published`\\n      return {\\n        _status: {\\n          equals: 'published',\\n        },\\n      };\\n    },\\n  },\\n  versions: {\\n    drafts: true\\n  },\\n  //.. the rest of the Pages config here\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note regarding adding versions to an existing collection\"\n        }), _jsx(\"br\", {}), \"\\nIf you already have a collection with documents, and you \", _jsx(\"em\", {\n          children: \"opt in\"\n        }), \" to draft functionality after you have already created existing documents, all of your old documents \", _jsx(\"em\", {\n          children: \"will not have a _status field\"\n        }), \" until you resave them. For this reason, if you are \", _jsx(\"em\", {\n          children: \"adding\"\n        }), \" versions into an existing collection, you might want to write your access control function to allow for users to read both documents where \", _jsx(\"strong\", {\n          children: \"_status is equal to \\\"published\\\"\"\n        }), \" as well as where \", _jsx(\"strong\", {\n          children: \"_status does not exist\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example for how to write an access control function that grants access to both documents where \", _jsx(_components.code, {\n        children: \"_status\"\n      }), \" is equal to \\\"published\\\" and where \", _jsx(_components.code, {\n        children: \"_status\"\n      }), \" does not exist:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Pages: CollectionConfig = {\\n  slug: 'pages',\\n  access: {\\n    read: ({ req }) => {\\n      // If there is a user logged in,\\n      // let them retrieve all documents\\n      if (req.user) return true;\\n\\n      // If there is no user,\\n      // restrict the documents that are returned\\n      // to only those where `_status` is equal to `published`\\n      // or where `_status` does not exist\\n      return {\\n        or: [\\n          {\\n            _status: {\\n              equals: 'published',\\n            },\\n          },\\n          {\\n            _status: {\\n              exists: false,\\n            }\\n          }\\n        ]\\n      };\\n    },\\n  },\\n  versions: {\\n    drafts: true\\n  },\\n  //.. the rest of the Pages config here\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Unpublishing drafts\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If a document is published, the Payload Admin UI will be updated to show an \\\"unpublish\\\" button at the top of the sidebar, which will \\\"unpublish\\\" the currently published document. Consider this as a way to \\\"revert\\\" a document back to a draft state. On the API side, this is done by simply setting \", _jsx(_components.code, {\n        children: \"_status: 'draft'\"\n      }), \" on any document.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Reverting to published\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If a document is published, and you have made further changes which are saved as a draft, Payload will show a \\\"revert to published\\\" button at the top of the sidebar which will allow you to reject your draft changes and \\\"revert\\\" back to the published state of the document. Your drafts will still be saved, but a new version will be created that will reflect the last published state of the document.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Drafts",
        "slug": "drafts",
        "label": "Drafts",
        "order": 20,
        "desc": "Enable drafts on collection documents or globals and build true preview environments for your data.",
        "keywords": "version history, drafts, preview, draft, restore, publish, autosave, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Options",
            "level": 3,
            "id": "options"
          },
          {
            "text": "Database changes",
            "level": 3,
            "id": "database-changes"
          },
          {
            "text": "Draft API",
            "level": 3,
            "id": "draft-api"
          },
          {
            "text": "Controlling who can see Collection drafts",
            "level": 3,
            "id": "controlling-who-can-see-collection-drafts"
          },
          {
            "text": "Unpublishing drafts",
            "level": 3,
            "id": "unpublishing-drafts"
          },
          {
            "text": "Reverting to published",
            "level": 3,
            "id": "reverting-to-published"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    img: \"img\",\n    em: \"em\",\n    h3: \"h3\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    pre: \"pre\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Extending on Payload's \", _jsx(_components.a, {\n        href: \"/docs/versions/drafts\",\n        children: \"Draft\"\n      }), \" functionality, you can configure your collections and globals to autosave changes as drafts, and publish only you're ready. The Admin UI will automatically adapt to autosaving progress at an interval that you define, and will store all autosaved changes as a new Draft version. Never lose your work - and publish changes to the live document only when you're ready.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsx(_components.p, {\n        children: \"Autosave relies on Versions and Drafts being enabled in order to function.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"/images/docs/autosave-enabled.png\",\n        alt: \"Autosave Enabled\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"If Autosave is enabled, drafts will be created automatically as the document is modified and the Admin UI adds an indicator describing when the document was last saved to the top right of the sidebar.\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Collections and Globals both support the same options for configuring autosave. You can either set \", _jsx(_components.code, {\n        children: \"versions.drafts.autosave\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", or pass an object to configure autosave properties.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Drafts Autosave Options\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"interval\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Define an \", _jsx(_components.code, {\n              children: \"interval\"\n            }), \" in milliseconds to automatically save progress while documents are edited. Document updates are \\\"debounced\\\" at this interval. Defaults to \", _jsx(_components.code, {\n              children: \"2000\"\n            }), \".\"]\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example config with versions, drafts, and autosave enabled:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Pages: CollectionConfig = {\\n  slug: 'pages',\\n  access: {\\n    read: ({ req }) => {\\n      // If there is a user logged in,\\n      // let them retrieve all documents\\n      if (req.user) return true;\\n\\n      // If there is no user,\\n      // restrict the documents that are returned\\n      // to only those where `_status` is equal to `published`\\n      return {\\n        _status: {\\n          equals: 'published',\\n        },\\n      };\\n    },\\n  },\\n  versions: {\\n    drafts: {\\n      autosave: true,\\n\\n      // Alternatively, you can specify an `interval`:\\n      // autosave: {\\n      //   interval: 1500,\\n      // },\\n    }\\n  },\\n  //.. the rest of the Pages config here\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Autosave API\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When \", _jsx(_components.code, {\n        children: \"autosave\"\n      }), \" is enabled, all \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operations within Payload expose a new argument called \", _jsx(_components.code, {\n        children: \"autosave\"\n      }), \". When set to \", _jsx(_components.code, {\n        children: \"true\"\n      }), \", Payload will treat the incoming draft update as an \", _jsx(_components.code, {\n        children: \"autosave\"\n      }), \". This is primarily used by the Admin UI, but there may be some cases where you are building an app for your users and wish to implement \", _jsx(_components.code, {\n        children: \"autosave\"\n      }), \" in your own app. To do so, use the \", _jsx(_components.code, {\n        children: \"autosave\"\n      }), \" argument in your \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" operations.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"How autosaves are stored\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If we created a new version for each autosave, you'd quickly find a ton of autosaves that clutter up your \", _jsx(_components.code, {\n        children: \"_versions\"\n      }), \" collection within the database. That would be messy quick because \", _jsx(_components.code, {\n        children: \"autosave\"\n      }), \" is typically set to save a document every ~2000ms or so.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [\"Instead of creating a new version each time a document is autosaved, Payload smartly only creates \", _jsx(\"strong\", {\n          children: \"one\"\n        }), \" autosave version,  and then updates that specific version with each autosave performed. This makes sure that your versions remain nice and tidy.\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Autosave",
        "slug": "autosave",
        "label": "Autosave",
        "order": 30,
        "desc": "Using Payload's Draft functionality, you can configure your collections and globals to autosave changes as drafts, and publish only you're ready.",
        "keywords": "version history, revisions, audit log, draft, publish, autosave, Content Management System, cms, headless, javascript, node, react, expresss",
        "headings": [
          {
            "text": "Options",
            "level": 3,
            "id": "options"
          },
          {
            "text": "Autosave API",
            "level": 3,
            "id": "autosave-api"
          }
        ]
      }
    ]
  },
  {
    "slug": "Upload",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    em: \"em\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    code: \"code\",\n    a: \"a\",\n    h3: \"h3\",\n    h4: \"h4\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    pre: \"pre\",\n    h5: \"h5\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"Payload provides for everything you need to enable file upload, storage, and\\nmanagement directly on your server—including extremely powerful file access\\ncontrol.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"https://payloadcms.com/images/docs/upload-admin.jpg\",\n        alt: \"Upload admin panel functionality\"\n      }), \"\\n\", _jsx(_components.em, {\n        children: \"Admin panel screenshot depicting a Media Collection with Upload enabled\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Here are some common use cases of Uploads:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Creating a \\\"Media Library\\\" that contains images for use throughout your site or app\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Building a Gated Content library where users need to sign up to gain access to downloadable assets like ebook PDFs, whitepapers, etc.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Storing publicly available, downloadable assets like software, ZIP files, MP4s, etc.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"By simply enabling Upload functionality on a Collection, Payload will automatically transform your Collection into a robust file management / storage solution. The following modifications will be made:\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"filename\"\n        }), \", \", _jsx(_components.code, {\n          children: \"mimeType\"\n        }), \", and \", _jsx(_components.code, {\n          children: \"filesize\"\n        }), \" fields will be automatically added to your Collection. Optionally, if you pass \", _jsx(_components.code, {\n          children: \"imageSizes\"\n        }), \" to your Collection's Upload config, a \", _jsx(_components.a, {\n          href: \"#image-sizes\",\n          children: _jsx(_components.code, {\n            children: \"sizes\"\n          })\n        }), \" array will also be added containing auto-resized image sizes and filenames.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The Admin panel will modify its built-in \", _jsx(_components.code, {\n          children: \"List\"\n        }), \" component to show a thumbnail gallery of your Uploads instead of the default Table view\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The Admin panel will modify its \", _jsx(_components.code, {\n          children: \"Edit\"\n        }), \" view(s) to add a new set of corresponding Upload UI which will allow for file upload\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"create\"\n        }), \", \", _jsx(_components.code, {\n          children: \"update\"\n        }), \", and \", _jsx(_components.code, {\n          children: \"delete\"\n        }), \" Collection operations will be modified to support file upload, re-upload, and deletion\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Enabling Uploads\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Every Payload Collection can opt-in to supporting Uploads by specifying the \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" property on the Collection's config to either \", _jsx(_components.code, {\n        children: \"true\"\n      }), \" or to an object containing \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" options.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), \"\\n\", _jsx(\"br\", {}), \"A common pattern is to create a \", _jsx(\"strong\", {\n          children: \"Media\"\n        }), \" collection and enable\", \" \", \"\\n\", _jsx(\"strong\", {\n          children: \"upload\"\n        }), \" on that collection.\"]\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Collection Upload Options\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"staticURL\"\n              })\n            }), \" *\"]\n          }), _jsxs(_components.td, {\n            children: [\"The base URL path to use to access your uploads. Example: \", _jsx(_components.code, {\n              children: \"/media\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"staticDir\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The folder directory to use to store media in. Can be either an absolute path or relative to the directory that contains your config.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"imageSizes\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If specified, image uploads will be automatically resized in accordance to these image sizes. \", _jsx(_components.a, {\n              href: \"#image-sizes\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"formatOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object with \", _jsx(_components.code, {\n              children: \"format\"\n            }), \" and \", _jsx(_components.code, {\n              children: \"options\"\n            }), \" that are used with the Sharp image library to format the upload file. \", _jsx(_components.a, {\n              href: \"https://sharp.pixelplumbing.com/api-output#toformat\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"resizeOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object passed to the the Sharp image library to resize the uploaded file. \", _jsx(_components.a, {\n              href: \"https://sharp.pixelplumbing.com/api-resize\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"adminThumbnail\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set the way that the Admin panel will display thumbnails for this Collection. \", _jsx(_components.a, {\n              href: \"#admin-thumbnails\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"mimeTypes\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Restrict mimeTypes in the file picker. Array of valid mimetypes or mimetype wildcards \", _jsx(_components.a, {\n              href: \"#mimetypes\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"disableLocalStorage\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Completely disable uploading files to disk locally. \", _jsx(_components.a, {\n              href: \"#disabling-local-upload-storage\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"staticOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Set options for \", _jsx(_components.code, {\n              children: \"express.static\"\n            }), \" to use while serving your static files. \", _jsx(_components.a, {\n              href: \"http://expressjs.com/en/resources/middleware/serve-static.html\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"handlers\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Array of Express request handlers to execute before the built-in Payload static middleware executes.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"An asterisk denotes that a property above is required.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example Upload collection:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Media: CollectionConfig = {\\n  slug: 'media',\\n  upload: {\\n    staticURL: '/media',\\n    staticDir: 'media',\\n    imageSizes: [\\n      {\\n        name: 'thumbnail',\\n        width: 400,\\n        height: 300,\\n        position: 'centre',\\n      },\\n      {\\n        name: 'card',\\n        width: 768,\\n        height: 1024,\\n        position: 'centre',\\n      },\\n      {\\n        name: 'tablet',\\n        width: 1024,\\n        // By specifying `null` or leaving a height undefined,\\n        // the image will be sized to a certain width,\\n        // but it will retain its original aspect ratio\\n        // and calculate a height automatically.\\n        height: null,\\n        position: 'centre',\\n      },\\n    ],\\n    adminThumbnail: 'thumbnail',\\n    mimeTypes: ['image/*'],\\n  },\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Payload-wide Upload Options\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload relies on the \", _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/express-fileupload\",\n        children: _jsx(_components.code, {\n          children: \"express-fileupload\"\n        })\n      }), \" package to manage file uploads in Express. In addition to the Upload options specifiable on a Collection by Collection basis, you can also control the \", _jsx(_components.code, {\n        children: \"express-fileupload\"\n      }), \" options by passing your base Payload config an \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" property containing an object supportive of all \", _jsx(_components.code, {\n        children: \"express-fileupload\"\n      }), \" properties which use \", _jsx(_components.code, {\n        children: \"Busboy\"\n      }), \" under the hood. \", _jsx(_components.a, {\n        href: \"https://github.com/mscdex/busboy#api\",\n        children: \"Click here\"\n      }), \" for more documentation about what you can control.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A common example of what you might want to customize within Payload-wide Upload options would be to increase the allowed \", _jsx(_components.code, {\n        children: \"fileSize\"\n      }), \" of uploads sent to Payload:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload/config';\\n\\nexport default buildConfig({\\n  collections: [\\n    {\\n      slug: 'media',\\n      fields: [\\n        {\\n          name: 'alt',\\n          type: 'text',\\n        },\\n      ],\\n      upload: true,\\n    },\\n  ],\\n  upload: {\\n    limits: {\\n      fileSize: 5000000, // 5MB, written in bytes\\n    },\\n  },\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Image Sizes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you specify an array of \", _jsx(_components.code, {\n        children: \"imageSizes\"\n      }), \" to your \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" config, Payload will automatically crop and resize your uploads to fit each of the sizes specified by your config.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Payload Admin panel will also automatically display all available files, including width, height, and filesize, for each of your uploaded files.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Behind the scenes, Payload relies on \", _jsx(_components.a, {\n        href: \"https://sharp.pixelplumbing.com/api-resize#resize\",\n        children: _jsx(_components.code, {\n          children: \"sharp\"\n        })\n      }), \" to perform its image resizing. You can specify additional options for \", _jsx(_components.code, {\n        children: \"sharp\"\n      }), \" to use while resizing your images.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Accessing the resized images in hooks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All auto-resized images are exposed to be re-used in hooks and similar via an object that is bound to \", _jsx(_components.code, {\n        children: \"req.payloadUploadSizes\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The object will have keys for each size generated, and each key will be set equal to a buffer containing the file data.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Disabling Local Upload Storage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using a plugin to send your files off to a third-party file storage host or CDN, like Amazon S3 or similar, you may not want to store your files locally at all. You can prevent Payload from writing files to disk by specifying \", _jsx(_components.code, {\n        children: \"disableLocalStorage: true\"\n      }), \" on your collection's upload config.\"]\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(\"strong\", {\n        children: \"Note:\"\n      }), _jsx(\"br\", {}), _jsxs(_components.p, {\n        children: [\"This is a fairly advanced feature. If you do disable local file storage, by\\ndefault, your admin panel's thumbnails will be broken as you will not have\\nstored a file. It will be totally up to you to use either a plugin or your own\\nhooks to store your files in a permanent manner, as well as provide your own\\nadmin thumbnail using \", _jsx(\"strong\", {\n          children: \"upload.adminThumbnail\"\n        }), \".\"]\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Admin Thumbnails\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can specify how Payload retrieves admin thumbnails for your upload-enabled Collections. This property accepts two different configurations:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A string equal to one of your provided image size names to use for the admin panel's thumbnail (seen in the example Media collection above)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"A function that takes the document's data and sends back a full URL to load the thumbnail. For example, to dynamically set an admin thumbnail URL, you could write a function that returns a string pointing to a different file source:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example custom Admin thumbnail:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Media: CollectionConfig = {\\n  slug: 'media',\\n  upload: {\\n    staticURL: '/media',\\n    staticDir: 'media',\\n    imageSizes: [\\n      // ... image sizes here\\n    ],\\n    // highlight-start\\n    adminThumbnail: ({ doc }) =>\\n      `https://google.com/custom-path-to-file/${doc.filename}`,\\n    // highlight-end\\n  },\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(Banner, {\n      children: [_jsx(\"strong\", {\n        children: \"Note:\"\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"If you specify a function to return an admin thumbnail, but your upload is not\\nan image file type (for example, PDF or TXT) your function will not be used.\\nInstead, Payload will display its generic file upload graphic.\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"MimeTypes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Specifying the \", _jsx(_components.code, {\n        children: \"mimeTypes\"\n      }), \" property can restrict what files are allowed from the user's file picker. This accepts an array of strings, which can be any valid mimetype or mimetype wildcards\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Some example values are: \", _jsx(_components.code, {\n        children: \"image/*\"\n      }), \", \", _jsx(_components.code, {\n        children: \"audio/*\"\n      }), \", \", _jsx(_components.code, {\n        children: \"video/*\"\n      }), \", \", _jsx(_components.code, {\n        children: \"image/png\"\n      }), \", \", _jsx(_components.code, {\n        children: \"application/pdf\"\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example mimeTypes usage:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Media: CollectionConfig = {\\n  slug: 'media',\\n  upload: {\\n    staticURL: '/media',\\n    staticDir: 'media',\\n    mimeTypes: ['image/*', 'application/pdf'], // highlight-line\\n  },\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Uploading Files\"\n    }), \"\\n\", _jsxs(Banner, {\n      type: \"warning\",\n      children: [_jsx(\"strong\", {\n        children: \"Important:\"\n      }), _jsx(\"br\", {}), _jsx(_components.p, {\n        children: \"Uploading files is currently only possible through the REST and Local APIs due\\nto how GraphQL works. It's difficult and fairly nonsensical to support\\nuploading files through GraphQL.\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To upload a file, use your collection's \", _jsx(_components.a, {\n        href: \"/docs/rest-api/overview#collections\",\n        children: _jsx(_components.code, {\n          children: \"create\"\n        })\n      }), \" endpoint. Send it all the data that your Collection requires, as well as a \", _jsx(_components.code, {\n        children: \"file\"\n      }), \" key containing the file that you'd like to upload.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Send your request as a \", _jsx(_components.code, {\n        children: \"multipart/form-data\"\n      }), \" request, using \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/API/FormData\",\n        children: _jsx(_components.code, {\n          children: \"FormData\"\n        })\n      }), \" if possible.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://muffinman.io/blog/uploading-files-using-fetch-multipart-form-data/\",\n        children: \"Here is a walkthrough\"\n      }), \" detailing how to upload files as \", _jsx(_components.code, {\n        children: \"multipart/form-data\"\n      }), \" using React.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Access Control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All files that are uploaded to each Collection automatically support the \", _jsx(_components.code, {\n        children: \"read\"\n      }), \" \", _jsx(_components.a, {\n        href: \"/docs/access-control/overview\",\n        children: \"Access Control\"\n      }), \" function from the Collection itself. You can use this to control who should be allowed to see your uploads, and who should not.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Uploads",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Payload supports uploads, storage and management of files directly on your server, combined with powerful file access control.",
        "keywords": "uploads, images, media, overview, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Enabling Uploads",
            "level": 3,
            "id": "enabling-uploads"
          },
          {
            "text": "Payload-wide Upload Options",
            "level": 3,
            "id": "payload-wide-upload-options"
          },
          {
            "text": "Image Sizes",
            "level": 3,
            "id": "image-sizes"
          },
          {
            "text": "Disabling Local Upload Storage",
            "level": 3,
            "id": "disabling-local-upload-storage"
          },
          {
            "text": "Admin Thumbnails",
            "level": 3,
            "id": "admin-thumbnails"
          },
          {
            "text": "MimeTypes",
            "level": 3,
            "id": "mimetypes"
          },
          {
            "text": "Uploading Files",
            "level": 3,
            "id": "uploading-files"
          },
          {
            "text": "Access Control",
            "level": 3,
            "id": "access-control"
          }
        ]
      }
    ]
  },
  {
    "slug": "GraphQL",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    pre: \"pre\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"In addition to its REST and Local APIs, Payload ships with a fully featured and extensible GraphQL API.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, the GraphQL API is exposed via \", _jsx(_components.code, {\n        children: \"/api/graphql\"\n      }), \", but you can customize this URL via specifying your \", _jsx(_components.code, {\n        children: \"routes\"\n      }), \" within the main Payload config.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The labels you provide for your Collections and Globals are used to name the GraphQL types that are created to correspond to your config. Special characters and spaces are removed.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"GraphQL Options\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At the top of your Payload config you can define all the options to manage GraphQL.\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"mutations\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Any custom Mutations to be added in addition to what Payload provides. \", _jsx(_components.a, {\n              href: \"/docs/graphql/extending\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"queries\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Any custom Queries to be added in addition to what Payload provides. \", _jsx(_components.a, {\n              href: \"/docs/graphql/extending\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"maxComplexity\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A number used to set the maximum allowed complexity allowed by requests \", _jsx(_components.a, {\n              href: \"/docs/graphql/overview#query-complexity-limits\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"disablePlaygroundInProduction\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A boolean that if false will enable the graphQL playground, defaults to true. \", _jsx(_components.a, {\n              href: \"/docs/graphql/overview#graphql-playground\",\n              children: \"More\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"disable\"\n            })\n          }), _jsx(_components.td, {\n            children: \"A boolean that if true will disable the graphQL entirely, defaults to false.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"schemaOutputFile\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A string for the file path used by the generate schema command. Defaults to \", _jsx(_components.code, {\n              children: \"graphql.schema\"\n            }), \" next to \", _jsx(_components.code, {\n              children: \"payload.config.ts\"\n            }), \" \", _jsx(_components.a, {\n              href: \"/docs/graphql/graphql-schema\",\n              children: \"More\"\n            })]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Collections\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Everything that can be done to a Collection via the REST or Local API can be done with GraphQL (outside of uploading files, which is REST-only). If you have a collection as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst PublicUser: CollectionConfig = {\\n  slug: 'public-users',\\n  auth: true, // Auth is enabled\\n  fields: [\\n    ...\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Payload will automatically open up the following queries:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Query Name\"\n          }), _jsx(_components.th, {\n            children: \"Operation\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"PublicUser\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"findByID\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"PublicUsers\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"find\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"mePublicUser\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"me\"\n            }), \" auth operation\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"And the following mutations:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Query Name\"\n          }), _jsx(_components.th, {\n            children: \"Operation\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"createPublicUser\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"create\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"updatePublicUser\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"update\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"deletePublicUser\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"delete\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"forgotPasswordPublicUser\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"forgotPassword\"\n            }), \" auth operation\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"resetPasswordPublicUser\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"resetPassword\"\n            }), \" auth operation\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"unlockPublicUser\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"unlock\"\n            }), \" auth operation\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"verifyPublicUser\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"verify\"\n            }), \" auth operation\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"loginPublicUser\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"login\"\n            }), \" auth operation\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"logoutPublicUser\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"logout\"\n            }), \" auth operation\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"refreshTokenPublicUser\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"refresh\"\n            }), \" auth operation\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Globals\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Globals are also fully supported. For example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { GlobalConfig } from 'payload/types';\\n\\nconst Header: GlobalConfig = {\\n  slug: 'header',\\n  fields: [\\n    ...\\n  ],\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Payload will open the following query:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Query Name\"\n          }), _jsx(_components.th, {\n            children: \"Operation\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Header\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"findOne\"\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"And the following mutation:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Query Name\"\n          }), _jsx(_components.th, {\n            children: \"Operation\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"updateHeader\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"update\"\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Preferences\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"User \", _jsx(_components.a, {\n        href: \"/docs/admin/overview#preferences\",\n        children: \"preferences\"\n      }), \"  for the admin panel are also available to GraphQL. To query preferences you must supply an authorization token in the header and only the preferences of that user will be accessible and of the \", _jsx(_components.code, {\n        children: \"key\"\n      }), \" argument.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Payload will open the following query:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Query Name\"\n          }), _jsx(_components.th, {\n            children: \"Operation\"\n          })]\n        })\n      }), _jsx(_components.tbody, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"Preference\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"findOne\"\n            })\n          })]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"And the following mutations:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Query Name\"\n          }), _jsx(_components.th, {\n            children: \"Operation\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"updatePreference\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"update\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"deletePreference\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"delete\"\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"GraphQL Playground\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"GraphQL Playground is enabled by default for development purposes, but disabled in production. You can enable it in production by passing \", _jsx(_components.code, {\n        children: \"graphQL.disablePlaygroundInProduction\"\n      }), \" a \", _jsx(_components.code, {\n        children: \"false\"\n      }), \" setting in the main Payload config.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can even log in using the \", _jsx(_components.code, {\n        children: \"login[collection-singular-label-here]\"\n      }), \" mutation to use the Playground as an authenticated user.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nTo see more regarding how the above queries and mutations are used, visit your GraphQL playground (by default at \", _jsxs(\"a\", {\n          href: \"http://localhost:3000/api/graphql-playground\",\n          children: [\"(\", _jsx(_components.a, {\n            href: \"http://localhost:3000/api/graphql-playground\",\n            children: \"http://localhost:3000/api/graphql-playground\"\n          })]\n        }), \") while your server is running. There, you can use the \\\"Schema\\\" and \\\"Docs\\\" buttons on the right to see a ton of detail about how GraphQL operates within Payload.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Query complexity limits\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload comes with a built-in query complexity limiter to prevent bad people from trying to slow down your server by running massive queries. To learn more, \", _jsx(_components.a, {\n        href: \"/docs/production/preventing-abuse#limiting-graphql-complexity\",\n        children: \"click here\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "GraphQL Overview",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Payload ships with a fully featured and extensible GraphQL API, which can be used in addition to the REST and Local APIs to give you more flexibility.",
        "keywords": "graphql, resolvers, mutations, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "GraphQL Options",
            "level": 2,
            "id": "graphql-options"
          },
          {
            "text": "Collections",
            "level": 2,
            "id": "collections"
          },
          {
            "text": "Globals",
            "level": 2,
            "id": "globals"
          },
          {
            "text": "Preferences",
            "level": 2,
            "id": "preferences"
          },
          {
            "text": "GraphQL Playground",
            "level": 2,
            "id": "graphql-playground"
          },
          {
            "text": "Query complexity limits",
            "level": 2,
            "id": "query-complexity-limits"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    code: \"code\",\n    strong: \"strong\",\n    h5: \"h5\",\n    h3: \"h3\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"You can add your own GraphQL queries and mutations to Payload, making use of all the types that Payload has defined for you.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To do so, add your queries and mutations to the main Payload config as follows:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Config Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"graphQL.queries\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Function that returns an object containing keys to custom GraphQL queries\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"graphQL.mutations\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Function that returns an object containing keys to custom GraphQL mutations\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The above properties each receive a function that is defined with the following arguments:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"GraphQL\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is Payload's GraphQL dependency. You should not install your own copy of GraphQL as a dependency due to underlying restrictions based on how GraphQL works. Instead, you can use the Payload-provided copy via this argument.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"payload\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is a copy of the currently running Payload instance, which provides you with existing GraphQL types for all of your Collections and Globals - among other things.\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Return value\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Both \", _jsx(_components.code, {\n        children: \"graphQL.queries\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"graphQL.mutations\"\n      }), \" functions should return an object with properties equal to your newly written GraphQL queries and mutations.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"payload.config.js\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { buildConfig } from 'payload/config';\\nimport myCustomQueryResolver from './graphQL/resolvers/myCustomQueryResolver';\\n\\nexport default buildConfig({\\n  graphQL: {\\n    // highlight-start\\n    queries: (GraphQL, payload) => {\\n      return {\\n        MyCustomQuery: {\\n          type: new GraphQL.GraphQLObjectType({\\n            name: 'MyCustomQuery',\\n            fields: {\\n              text: {\\n                type: GraphQL.GraphQLString,\\n              },\\n              someNumberField: {\\n                type: GraphQL.GraphQLFloat,\\n              },\\n            },\\n          }),\\n          args: {\\n            argNameHere: {\\n              type: new GraphQL.GraphQLNonNull(GraphQLString),\\n            }\\n          },\\n          resolve: myCustomQueryResolver,\\n        }\\n      }\\n    }\\n    // highlight-end\\n  }\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Adding your own Queries and Mutations",
        "slug": "extending",
        "label": "Custom Queries and Mutations",
        "order": 20,
        "desc": "Payload allows you to add your own GraphQL queries and mutations, simply set up GraphQL in your main Payload config by following these instructions.",
        "keywords": "graphql, resolvers, mutations, custom, queries, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Example",
            "level": 3,
            "id": "example"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"When working with GraphQL it is useful to have the schema for development of other projects that need to call on your GraphQL endpoint. In Payload the schema is controlled by your collections and globals and is made available to the developer or third parties, it is not necessary for developers using Payload to write schema types manually.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"GraphQL Schema generate script\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Run the following command in a Payload project to generate your project's GraphQL schema from Payload:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"payload generate:graphQLSchema\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can run this command whenever you need to regenerate your graphQL schema and output it to a file, and then you can use the schema for writing your own graphQL elsewhere in other projects.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"GraphQL schema output file\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"{\\n  // the remainder of your config\\n\\tgraphQL: {\\n\\t\\tschemaOutputFile: path.resolve(__dirname, './graphql/schema.graphql'),\\n\\t},\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The above example outputs all your definitions to a file relative from your payload config as \", _jsx(_components.code, {\n        children: \"./graphql/schema.graphql\"\n      }), \". By default, the file will be output to your current working directory as \", _jsx(_components.code, {\n        children: \"schema.graphql\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Adding an NPM script\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important:\"\n        }), _jsx(\"br\", {}), \"\\nPayload needs to be able to find your config to generate your GraphQL schema.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload will automatically try and locate your config, but might not always be able to find it. For example, if you are working in a \", _jsx(_components.code, {\n        children: \"/src\"\n      }), \" directory or similar, you need to tell Payload where to find your config manually by using an environment variable. If this applies to you, you can create an NPM script to make generating your types easier.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add an NPM script to generate your types and show Payload where to find your config, open your \", _jsx(_components.code, {\n        children: \"package.json\"\n      }), \" and update the \", _jsx(_components.code, {\n        children: \"scripts\"\n      }), \" property to the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"scripts\\\": {\\n    \\\"generate:graphQLSchema\\\": \\\"PAYLOAD_CONFIG_PATH=src/payload.config.ts payload generate:graphQLSchema\\\",\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now you can run \", _jsx(_components.code, {\n        children: \"yarn generate:graphQLSchema\"\n      }), \" to easily generate your schema.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "GraphQL Schema",
        "slug": "graphql-schema",
        "label": "GraphQL Schema",
        "order": 30,
        "desc": "Output your own GraphQL schema based on your collections and globals to a file.",
        "keywords": "headless cms, typescript, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "GraphQL Schema generate script",
            "level": 3,
            "id": "graphql-schema-generate-script"
          },
          {
            "text": "GraphQL schema output file",
            "level": 3,
            "id": "graphql-schema-output-file"
          }
        ]
      }
    ]
  },
  {
    "slug": "REST-API",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    h5: \"h5\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      children: _jsx(_components.p, {\n        children: \"A fully functional REST API is automatically generated from your Collection and Global configs.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All Payload API routes are mounted prefixed to your config's \", _jsx(_components.code, {\n        children: \"routes.api\"\n      }), \" URL segment (default: \", _jsx(_components.code, {\n        children: \"/api\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"REST query parameters:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/getting-started/concepts#depth\",\n          children: \"depth\"\n        }), \" - automatically populates relationships and uploads\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/configuration/localization#retrieving-localized-docs\",\n          children: \"locale\"\n        }), \" - retrieves document(s) in a specific locale\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/configuration/localization#retrieving-localized-docs\",\n          children: \"fallback-locale\"\n        }), \" - specifies a fallback locale if no locale value exists\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Collections\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each collection is mounted using its \", _jsx(_components.code, {\n        children: \"slug\"\n      }), \" value. For example, if a collection's slug is \", _jsx(_components.code, {\n        children: \"users\"\n      }), \", all corresponding routes will be mounted on \", _jsx(_components.code, {\n        children: \"/api/users\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Note: Collection slugs must be formatted in kebab-case\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"All CRUD operations are exposed as follows:\"\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Method\"\n          }), _jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"GET\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Find paginated documents\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"GET\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/:id\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Find a specific document by ID\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Create a new document\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"PATCH\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/:id\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Update a document by ID\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"DELETE\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/:id\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Delete an existing document by ID\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.h5, {\n      children: [\"Additional \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" query parameters\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" endpoint supports the following additional query parameters:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/queries/overview#sort\",\n          children: \"sort\"\n        }), \" - sort by field\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/queries/overview\",\n          children: \"where\"\n        }), \" - pass a \", _jsx(_components.code, {\n          children: \"where\"\n        }), \" query to constrain returned documents\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/queries/pagination#pagination-controls\",\n          children: \"limit\"\n        }), \" - limit the returned documents to a certain number\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"/docs/queries/pagination#pagination-controls\",\n          children: \"page\"\n        }), \" - get a specific page of documents\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Auth Operations\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Auth enabled collections are also given the following endpoints:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Method\"\n          }), _jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/verify/:token\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"/docs/authentication/operations#verify-by-email\",\n              children: \"Email verification\"\n            }), \", if enabled.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/unlock\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"/docs/authentication/operations#unlock\",\n              children: \"Unlock a user's account\"\n            }), \", if enabled.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/login\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"/docs/authentication/operations#login\",\n              children: \"Logs in\"\n            }), \" a user with email / password.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/logout\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"/docs/authentication/operations#logout\",\n              children: \"Logs out\"\n            }), \" a user.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/refresh-token\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"/docs/authentication/operations#refresh\",\n              children: \"Refreshes a token\"\n            }), \" that has not yet expired.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"GET\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/me\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"/docs/authentication/operations#me\",\n              children: \"Returns the currently logged in user with token\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/forgot-password\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"/docs/authentication/operations#forgot-password\",\n              children: \"Password reset workflow\"\n            }), \" entry point.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/{collection-slug}/reset-password\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"/docs/authentication/operations#reset-password\",\n              children: \"To reset the user's password\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Globals\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Globals cannot be created or deleted, so there are only two REST endpoints opened:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Method\"\n          }), _jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"GET\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/globals/{globalSlug}\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Get a global by slug\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/globals/{globalSlug}\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Update a global by slug\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Preferences\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to the dynamically generated endpoints above Payload also has REST endpoints to manage the admin user \", _jsx(_components.a, {\n        href: \"/docs/admin/overview#preferences\",\n        children: \"preferences\"\n      }), \" for data specific to the authenticated user.\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Method\"\n          }), _jsx(_components.th, {\n            children: \"Path\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"GET\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/_preferences/{key}\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Get a preference by key\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"POST\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/_preferences/{key}\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Create or update by key\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"DELETE\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"/api/_preferences/{key}\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Delete a user preference by key\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Custom Endpoints\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Additional REST API endpoints can be added to your application by providing an array of \", _jsx(_components.code, {\n        children: \"endpoints\"\n      }), \" in various places within a Payload config. Custom endpoints are useful for adding additional middleware on existing routes or for building custom functionality into Payload apps and plugins. Endpoints can be added at the top of the Payload config, \", _jsx(_components.code, {\n        children: \"collections\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"globals\"\n      }), \" and accessed respective of the api and slugs you have configured.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Each endpoint object needs to have:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"path\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"A string for the endpoint route after the collection or globals slug\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"method\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The lowercase HTTP verb to use: 'get', 'head', 'post', 'put', 'delete', 'connect' or 'options'\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"handler\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"A function or array of functions to be called with \", _jsx(_components.strong, {\n              children: \"req\"\n            }), \", \", _jsx(_components.strong, {\n              children: \"res\"\n            }), \" and \", _jsx(_components.strong, {\n              children: \"next\"\n            }), \" arguments. \", _jsx(_components.a, {\n              href: \"https://expressjs.com/en/guide/routing.html#route-handlers\",\n              children: \"Express\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"root\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"When \", _jsx(_components.code, {\n              children: \"true\"\n            }), \", defines the endpoint on the root Express app, bypassing Payload handlers and the \", _jsx(_components.code, {\n              children: \"routes.api\"\n            }), \" subpath. Note: this only applies to top-level endpoints of your Payload config, endpoints defined on \", _jsx(_components.code, {\n              children: \"collections\"\n            }), \" or \", _jsx(_components.code, {\n              children: \"globals\"\n            }), \" cannot be root.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\n// a collection of 'orders' with an additional route for tracking details, reachable at /api/orders/:id/tracking\\nconst Orders: CollectionConfig = {\\n\\tslug: 'orders',\\n\\tfields: [ /* ... */ ],\\n  // highlight-start\\n  endpoints: [\\n    {\\n      path: '/:id/tracking',\\n      method: 'get',\\n      handler: async (req, res, next) => {\\n        const tracking = await getTrackingInfo(req.params.id);\\n        if (tracking) {\\n          res.status(200).send({ tracking });\\n        } else {\\n          res.status(404).send({ error: 'not found' });\\n        }\\n      }\\n    }\\n  ],\\n  // highlight-end\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\n\", _jsx(_components.strong, {\n          children: \"req\"\n        }), \" will have the \", _jsx(_components.strong, {\n          children: \"payload\"\n        }), \" object and can be used inside your endpoint handlers for making calls like req.payload.find() that will make use of access control and hooks.\"]\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "REST API",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Payload generates a fully functional REST API from your Collection and Global configs.",
        "keywords": "rest, api, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Collections",
            "level": 2,
            "id": "collections"
          },
          {
            "text": "Auth Operations",
            "level": 2,
            "id": "auth-operations"
          },
          {
            "text": "Globals",
            "level": 2,
            "id": "globals"
          },
          {
            "text": "Preferences",
            "level": 2,
            "id": "preferences"
          },
          {
            "text": "Custom Endpoints",
            "level": 2,
            "id": "custom-endpoints"
          }
        ]
      }
    ]
  },
  {
    "slug": "Local-API",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h3: \"h3\",\n    code: \"code\",\n    h5: \"h5\",\n    strong: \"strong\",\n    pre: \"pre\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    em: \"em\",\n    h2: \"h2\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"The Payload Local API gives you the ability to execute the same operations that are available through REST and GraphQL within Node, directly on your server. Here, you don't need to deal with server latency or network speed whatsoever and can interact directly with your database.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip:\"\n        }), _jsx(\"br\", {}), \"\\nThe Local API is incredibly powerful when used with server-side rendering app frameworks like NextJS. With other headless CMS, you need to request your data from third-party servers which can add significant loading time to your server-rendered pages. With Payload, you don't have to leave your server to gather the data you need. It can be incredibly fast and is definitely a game changer.\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are some common examples of how you can use the Local API:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Seeding data via Node seed scripts that you write and maintain\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Opening custom Express routes which feature additional functionality but still rely on Payload\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Within access control and hook functions\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Accessing payload\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can gain access to the currently running \", _jsx(_components.code, {\n        children: \"payload\"\n      }), \" object via two ways:\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Importing it\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can import or require \", _jsx(_components.code, {\n        children: \"payload\"\n      }), \" into your own files after it's been initialized, but you need to make sure that your \", _jsx(_components.code, {\n        children: \"import\"\n      }), \" / \", _jsx(_components.code, {\n        children: \"require\"\n      }), \" statements come \", _jsx(_components.strong, {\n        children: \"after\"\n      }), \" you call \", _jsx(_components.code, {\n        children: \"payload.init()\"\n      }), \"—otherwise Payload won't have been initialized yet. That might be obvious. To us, it's usually not.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import payload from 'payload';\\nimport { CollectionAfterChangeHook } from 'payload/types';\\n\\nconst afterChangeHook: CollectionAfterChangeHook = async () => {\\n  const posts = await payload.find({\\n    collection: 'posts',\\n  });\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.h5, {\n      children: [\"Accessing from the \", _jsx(_components.code, {\n        children: \"req\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload is available anywhere you have access to the Express \", _jsx(_components.code, {\n        children: \"req\"\n      }), \" - including within your access control and hook functions.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const afterChangeHook: CollectionAfterChangeHook = async ({ req: { payload }}) => {\\n  const posts = await payload.find({\\n    collection: 'posts',\\n  });\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Local options available\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can specify more options within the Local API vs. REST or GraphQL due to the server-only context that they are executed in.\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Local Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"collection\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Required for Collection operations. Specifies the Collection slug to operate against.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"data\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"The data to use within the operation. Required for \", _jsx(_components.code, {\n              children: \"create\"\n            }), \", \", _jsx(_components.code, {\n              children: \"update\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"depth\"\n            })\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.a, {\n              href: \"/docs/getting-started/concepts#depth\",\n              children: \"Control auto-population\"\n            }), \" of nested relationship and upload fields.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"locale\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Specify \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"locale\"\n            }), \" for any returned documents.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"fallbackLocale\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Specify a \", _jsx(_components.a, {\n              href: \"/docs/configuration/localization\",\n              children: \"fallback locale\"\n            }), \" to use for any returned documents.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"overrideAccess\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Skip access control. By default, this property is set to true within all Local API operations.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"user\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"If you set \", _jsx(_components.code, {\n              children: \"overrideAccess\"\n            }), \" to \", _jsx(_components.code, {\n              children: \"false\"\n            }), \", you can pass a user to use against the access control checks.\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"showHiddenFields\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Opt-in to receiving hidden fields. By default, they are hidden from returned documents in accordance to your config.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"pagination\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Set to false to return all documents and avoid querying for document counts.\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"There are more options available on an operation by operation basis outlined below.\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note:\"\n        }), _jsx(\"br\", {}), \"\\nBy default, all access control checks are disabled in the Local API, but you can re-enable them if you'd like, as well as pass a specific user to run the operation with.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Collections\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following Collection operations are available through the Local API:\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Create\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// The created Post document is returned\\nconst post = await payload.create({\\n  collection: 'posts', // required\\n  data: { // required\\n    title: 'sure',\\n    description: 'maybe',\\n  },\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUserDoc,\\n  overrideAccess: true,\\n  showHiddenFields: false,\\n\\n  // If creating verification-enabled auth doc,\\n  // you can optionally disable the email that is auto-sent\\n  disableVerificationEmail: true,\\n\\n  // If your collection supports uploads, you can upload\\n  // a file directly through the Local API by providing\\n  // its full, absolute file path.\\n  filePath: path.resolve(__dirname, './path-to-image.jpg'),\\n\\n  // Alternatively, you can directly pass a File,\\n  // if file is provided, filePath will be omitted\\n  file: uploadedFile,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Find\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be a paginated set of Posts.\\n// See /docs/queries/pagination for more.\\nconst result = await payload.find({\\n  collection: 'posts', // required\\n  depth: 2,\\n  page: 1,\\n  limit: 10,\\n  where: {}, // pass a `where` query here\\n  sort: '-title',\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Find by ID\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be a Post document.\\nconst result = await payload.findByID({\\n  collection: 'posts', // required\\n  id: '507f1f77bcf86cd799439011', // required\\n  depth: 2,\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Update\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be the updated Post document.\\nconst result = await payload.update({\\n  collection: 'posts', // required\\n  id: '507f1f77bcf86cd799439011', // required\\n  data: { // required\\n    title: 'sure',\\n    description: 'maybe',\\n  },\\n  depth: 2,\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n\\n  // If your collection supports uploads, you can upload\\n  // a file directly through the Local API by providing\\n  // its full, absolute file path.\\n  filePath: path.resolve(__dirname, './path-to-image.jpg'),\\n\\n  // If you are uploading a file and would like to replace\\n  // the existing file instead of generating a new filename,\\n  // you can set the following property to `true`\\n  overwriteExistingFiles: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Delete\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be the now-deleted Post document.\\nconst result = await payload.delete({\\n  collection: 'posts', // required\\n  id: '507f1f77bcf86cd799439011', // required\\n  depth: 2,\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Auth Operations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If a collection has \", _jsx(_components.a, {\n        href: \"/docs/authentication/overview\",\n        children: _jsx(_components.code, {\n          children: \"Authentication\"\n        })\n      }), \" enabled, additional Local API operations will be available:\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Login\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// result will be formatted as follows:\\n// {\\n//   token: 'o38jf0q34jfij43f3f...', // JWT used for auth\\n//   user: { ... } // the user document that just logged in\\n//   exp: 1609619861 // the UNIX timestamp when the JWT will expire\\n// }\\n\\nconst result = await payload.login({\\n  collection: 'users', // required\\n  data: { // required\\n    email: 'dev@payloadcms.com',\\n    password: 'rip',\\n  },\\n  req: req, // pass an Express `req` which will be provided to all hooks\\n  res: res, // used to automatically set an HTTP-only auth cookie\\n  depth: 2,\\n  locale: 'en',\\n  fallbackLocale: false,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Forgot Password\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Returned token will allow for a password reset\\nconst token = await payload.forgotPassword({\\n  collection: 'users', // required\\n  data: { // required\\n    email: 'dev@payloadcms.com',\\n  },\\n  req: req, // pass an Express `req` which will be provided to all hooks\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Reset Password\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be formatted as follows:\\n// {\\n//   token: 'o38jf0q34jfij43f3f...', // JWT used for auth\\n//   user: { ... } // the user document that just logged in\\n// }\\nconst result = await payload.forgotPassword({\\n  collection: 'users', // required\\n  data: { // required\\n    token: 'afh3o2jf2p3f...', // the token generated from the forgotPassword operation\\n  },\\n  req: req, // pass an Express `req` which will be provided to all hooks\\n  res: res, // used to automatically set an HTTP-only auth cookie\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Unlock\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Returned result will be a boolean representing success or failure\\nconst result = await payload.unlock({\\n  collection: 'users', // required\\n  data: { // required\\n    email: 'dev@payloadcms.com',\\n  },\\n  req: req, // pass an Express `req` which will be provided to all hooks\\n  overrideAccess: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Verify\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Returned result will be a boolean representing success or failure\\nconst result = await payload.verify({\\n  collection: 'users', // required\\n  token: 'afh3o2jf2p3f...', // the token saved on the user as `_verificationToken`\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Globals\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following Global operations are available through the Local API:\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Find\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be the Header Global.\\nconst result = await payload.findGlobal({\\n  slug: 'header', // required\\n  depth: 2,\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Update\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"// Result will be the updated Header Global.\\nconst result = await payload.updateGlobal({\\n  slug: 'header', // required\\n  data: { // required\\n    nav: [\\n      {\\n        url: 'https://google.com',\\n      },\\n      {\\n        url: 'https://payloadcms.com',\\n      },\\n    ],\\n  },\\n  depth: 2,\\n  locale: 'en',\\n  fallbackLocale: false,\\n  user: dummyUser,\\n  overrideAccess: false,\\n  showHiddenFields: true,\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"TypeScript\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Local API calls also support passing in a generic. This is especially useful if you generate your TS types using a \", _jsx(_components.a, {\n        href: \"/docs/typescript/generating-types\",\n        children: \"generate types script\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of usage:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"// Our generated types\\nimport { Post } from './payload-types'\\n\\n// Add Post types as generic to create function\\nconst post: Post = await payload.create<Post>({\\n  collection: 'posts',\\n\\n  // Data will now be typed as Post and give you type hints\\n  data: {\\n    title: 'my title',\\n    description: 'my description',\\n  },\\n})\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Local API",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "The Payload Local API allows you to interact with your database and execute the same operations that are available through REST and GraphQL within Node, directly on your server.",
        "keywords": "local api, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Accessing payload",
            "level": 3,
            "id": "accessing-payload"
          },
          {
            "text": "Local options available",
            "level": 3,
            "id": "local-options-available"
          },
          {
            "text": "Collections",
            "level": 2,
            "id": "collections"
          },
          {
            "text": "Auth Operations",
            "level": 2,
            "id": "auth-operations"
          },
          {
            "text": "Globals",
            "level": 2,
            "id": "globals"
          },
          {
            "text": "TypeScript",
            "level": 2,
            "id": "typescript"
          }
        ]
      }
    ]
  },
  {
    "slug": "Queries",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    a: \"a\",\n    strong: \"strong\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload provides an extremely granular querying language through all APIs. Each API takes the same syntax and fully supports all options.\"\n    }), \"\\n\", _jsx(Banner, {\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Here, \\\"querying\\\" relates to filtering or searching through documents within a Collection.\"\n        }), \" You can build queries to pass to Find operations as well as to \", _jsx(\"a\", {\n          href: \"/docs/access-control/overview\",\n          children: \"restrict which documents certain users can access\"\n        }), \" via access control functions.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Simple queries\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, say you have a collection as follows:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { CollectionConfig } from 'payload/types';\\n\\nconst Post: CollectionConfig = {\\n  slug: 'posts',\\n  fields: [\\n    {\\n      name: 'color',\\n      type: 'select',\\n      options: [\\n        'mint',\\n        'dark-gray',\\n        'white',\\n      ],\\n    },\\n    {\\n      name: 'featured',\\n      type: 'checkbox',\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You may eventually have a lot of documents within this Collection. If you wanted to find only documents with \", _jsx(_components.code, {\n        children: \"color\"\n      }), \" equal to \", _jsx(_components.code, {\n        children: \"mint\"\n      }), \", you could write a query as follows:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const query = {\\n  color: { // property name to filter on\\n    equals: 'mint', // operator to use and value to compare against\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The above example demonstrates a simple query but you can get much more complex.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Operators\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Operator\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"equals\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The value must be exactly equal.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"not_equals\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The query will return all documents where the value is not equal.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"greater_than\"\n            })\n          }), _jsx(_components.td, {\n            children: \"For numeric or date-based fields.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"greater_than_equal\"\n            })\n          }), _jsx(_components.td, {\n            children: \"For numeric or date-based fields.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"less_than\"\n            })\n          }), _jsx(_components.td, {\n            children: \"For numeric or date-based fields.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"less_than_equal\"\n            })\n          }), _jsx(_components.td, {\n            children: \"For numeric or date-based fields.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"like\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Case-insensitive string must be present. If string of words, all words must be present, in any order.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"contains\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Must contain the value entered, case-insensitive.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"in\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The value must be found within the provided comma-delimited list of values.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"not_in\"\n            })\n          }), _jsx(_components.td, {\n            children: \"The value must NOT be within the provided comma-delimited list of values.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"exists\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Only return documents where the value either exists (\", _jsx(_components.code, {\n              children: \"true\"\n            }), \") or does not exist (\", _jsx(_components.code, {\n              children: \"false\"\n            }), \").\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"near\"\n            })\n          }), _jsxs(_components.td, {\n            children: [\"For distance related to a \", _jsx(_components.a, {\n              href: \"/docs/fields/point\",\n              children: \"point field\"\n            }), \" comma separated as \", _jsx(_components.code, {\n              children: \"<longitude>, <latitude>, <maxDistance in meters (nullable)>, <minDistance in meters (nullable)>\"\n            }), \".\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Tip\"\n        }), \":\", _jsx(\"br\", {}), \"\\nIf you know your users will be querying on certain fields a lot, you can add \", _jsx(\"strong\", {\n          children: \"index: true\"\n        }), \" to a field's config which will speed up searches using that field immensely.\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"And / Or Logic\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In addition to defining simple queries, you can join multiple queries together using simple AND / OR logic. Let's take the above \", _jsx(_components.code, {\n        children: \"Post\"\n      }), \" collection for example and write a more complex query usnig AND / OR:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const query = {\\n  or: [ // array of OR conditions\\n    {\\n      color: {\\n        equals: 'mint',\\n      },\\n    },\\n    {\\n      and: [ // nested array of AND conditions\\n        {\\n          color: {\\n            equals: 'white',\\n          }\\n        },\\n        {\\n          featured: {\\n            equals: false,\\n          }\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Written in plain English, if the above query were passed to a \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" operation, it would translate to finding posts where either the \", _jsx(_components.code, {\n        children: \"color\"\n      }), \" is \", _jsx(_components.code, {\n        children: \"mint\"\n      }), \" OR the \", _jsx(_components.code, {\n        children: \"color\"\n      }), \" is \", _jsx(_components.code, {\n        children: \"white\"\n      }), \" AND \", _jsx(_components.code, {\n        children: \"featured\"\n      }), \" is set to false.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"GraphQL Find Queries\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"All GraphQL \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" queries support the \", _jsx(_components.code, {\n        children: \"where\"\n      }), \" argument, which accepts queries exactly as detailed above.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"For example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"query {\\n  Posts(where: { color: { equals: mint } }) {\\n    docs {\\n      color\\n    }\\n    totalDocs\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"REST Queries\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With the REST API, you can use the full power of Payload queries as well but they become a bit more unwieldy the more complex that they get.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Simple queries are fairly straightforward to write. To understand the syntax, you need to understand how Express and similar languages would go about parsing a complex URL search string into a JSON object. For example, the above \", _jsx(_components.a, {\n        href: \"#simple-queries\",\n        children: \"simple query\"\n      }), \" would be parsed into a string like this:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"https://localhost:3000/api/posts?where[color][equals]=mint\"\n        })\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This one isn't too bad, but more complex queries get unavoidably more difficult to write as query strings. For this reason, we recommend to use the extremely helpful and ubiquitous \", _jsx(_components.a, {\n        href: \"https://www.npmjs.com/package/qs\",\n        children: _jsx(_components.code, {\n          children: \"qs\"\n        })\n      }), \" package to parse your JSON / object-formatted queries into query strings for use with the REST API.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"For example, using fetch:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"import qs from 'qs';\\n\\nconst query = {\\n  color: {\\n    equals: 'mint',\\n  },\\n  // This query could be much more complex\\n  // and QS would handle it beautifully\\n}\\n\\nconst getPosts = async () => {\\n  const stringifiedQuery = qs.stringify({\\n    where: query // ensure that `qs` adds the `where` property, too!\\n  }, { addQueryPrefix: true });\\n\\n  const response = await fetch(`http://localhost:3000/api/posts${stringifiedQuery}`);\\n  // Continue to handle the response below...\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Local API Queries\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The Local API's \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" operation accepts an object exactly how you write it. For example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const getPosts = async () => {\\n  const posts = await payload.find({\\n    collection: 'posts',\\n    where: {\\n      color: {\\n        equals: 'mint',\\n      },\\n    },\\n  });\\n\\n  return posts;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Sort\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" queries support a \", _jsx(_components.code, {\n        children: \"sort\"\n      }), \" parameter through all APIs. Pass the \", _jsx(_components.code, {\n        children: \"name\"\n      }), \" of a top-level field to sort by that field in ascending order. Prefix the name of the field with a minus symbol (\\\"-\\\") to sort in descending order.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"REST example:\"\n      }), \"\\n\", _jsx(_components.strong, {\n        children: _jsx(_components.code, {\n          children: \"https://localhost:3000/api/posts?sort=-createdAt\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"GraphQL example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"query {\\n  Posts(sort: \\\"-createdAt\\\") {\\n    docs {\\n      color\\n    }\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Local API example:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"const getPosts = async () => {\\n  const posts = await payload.find({\\n    collection: 'posts',\\n    sort: '-createdAt',\\n  });\\n\\n  return posts;\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Querying your Documents",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Payload provides a querying language through all APIs, allowing you to filter or search through documents within a Collection.",
        "keywords": "query, documents, overview, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Simple queries",
            "level": 3,
            "id": "simple-queries"
          },
          {
            "text": "Operators",
            "level": 3,
            "id": "operators"
          },
          {
            "text": "And / Or Logic",
            "level": 3,
            "id": "and-or-logic"
          },
          {
            "text": "GraphQL Find Queries",
            "level": 3,
            "id": "graphql-find-queries"
          },
          {
            "text": "REST Queries",
            "level": 3,
            "id": "rest-queries"
          },
          {
            "text": "Local API Queries",
            "level": 3,
            "id": "local-api-queries"
          },
          {
            "text": "Sort",
            "level": 2,
            "id": "sort"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    strong: \"strong\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    pre: \"pre\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"All collection \", _jsx(_components.code, {\n        children: \"find\"\n      }), \" queries are paginated automatically. Responses are returned with top-level meta data related to pagination, and returned documents are nested within a \", _jsx(_components.code, {\n        children: \"docs\"\n      }), \" array.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsxs(_components.strong, {\n        children: [_jsx(_components.code, {\n          children: \"Find\"\n        }), \" response properties:\"]\n      })\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Property\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"docs\"\n          }), _jsx(_components.td, {\n            children: \"Array of documents in the collection\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"totalDocs\"\n          }), _jsx(_components.td, {\n            children: \"Total available documents within the collection\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"limit\"\n          }), _jsxs(_components.td, {\n            children: [\"Limit query parameter - defaults to \", _jsx(_components.code, {\n              children: \"10\"\n            })]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"totalPages\"\n          }), _jsxs(_components.td, {\n            children: [\"Total pages available, based upon the \", _jsx(_components.code, {\n              children: \"limit\"\n            }), \" queried for\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"page\"\n          }), _jsx(_components.td, {\n            children: \"Current page number\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"pagingCounter\"\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"number\"\n            }), \" of the first doc on the current page\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"hasPrevPage\"\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"true/false\"\n            }), \" if previous page exists\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"hasNextPage\"\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"true/false\"\n            }), \" if next page exists\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"prevPage\"\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"number\"\n            }), \" of previous page, \", _jsx(_components.code, {\n              children: \"null\"\n            }), \" if it doesn't exist\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: \"nextPage\"\n          }), _jsxs(_components.td, {\n            children: [_jsx(_components.code, {\n              children: \"number\"\n            }), \" of next page, \", _jsx(_components.code, {\n              children: \"null\"\n            }), \" if it doesn't exist\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example response:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  // Document Array // highlight-line\\n  \\\"docs\\\": [\\n    {\\n      \\\"title\\\": \\\"Page Title\\\",\\n      \\\"description\\\": \\\"Some description text\\\",\\n      \\\"priority\\\": 1,\\n      \\\"createdAt\\\": \\\"2020-10-17T01:19:29.858Z\\\",\\n      \\\"updatedAt\\\": \\\"2020-10-17T01:19:29.858Z\\\",\\n      \\\"id\\\": \\\"5f8a46a1dd05db75c3c64760\\\"\\n    }\\n  ],\\n  // Metadata // highlight-line\\n  \\\"totalDocs\\\": 6,\\n  \\\"limit\\\": 1,\\n  \\\"totalPages\\\": 6,\\n  \\\"page\\\": 1,\\n  \\\"pagingCounter\\\": 1,\\n  \\\"hasPrevPage\\\": false,\\n  \\\"hasNextPage\\\": true,\\n  \\\"prevPage\\\": null,\\n  \\\"nextPage\\\": 2\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Pagination controls\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All Payload APIs support the pagination controls below. With them, you can create paginated lists of documents within your application:\"\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Control\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"limit\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Limits the number of documents returned\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"page\"\n            })\n          }), _jsx(_components.td, {\n            children: \"Get a specific page number\"\n          })]\n        })]\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Pagination",
        "slug": "pagination",
        "label": "Pagination",
        "order": 20,
        "desc": "Payload queries are equipped with automatic pagination so you create paginated lists of documents within your app.",
        "keywords": "query, documents, pagination, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Pagination controls",
            "level": 2,
            "id": "pagination-controls"
          }
        ]
      }
    ]
  },
  {
    "slug": "Production",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\",\n    h2: \"h2\",\n    h5: \"h5\",\n    code: \"code\",\n    em: \"em\",\n    strong: \"strong\",\n    pre: \"pre\",\n    h4: \"h4\",\n    ul: \"ul\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(Banner, {\n      type: \"success\",\n      children: _jsxs(_components.p, {\n        children: [\"So you've developed a Payload app, it's fully tested, and running great locally. Now it's time to launch. \", _jsx(\"strong\", {\n          children: \"Awesome! Great work!\"\n        }), \" Now, what's next?\"]\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are many ways to deploy Payload to a production environment. When evaluating how you will deploy Payload, you need to consider these main aspects:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#security\",\n          children: \"Security\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#mongodb\",\n          children: \"Your MongoDB\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"#file-storage\",\n          children: \"Permanent File Storage\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Security\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload features a suite of security features that you can rely on to strengthen your application's security. When deploying to Production, it's a good idea to double-check that you are making proper use of each of them.\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"The Secret Key\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When you initialize Payload, you provide it with a \", _jsx(_components.code, {\n        children: \"secret\"\n      }), \" property. This property should be impossible to guess and extremely difficult for brute-force attacks to crack. Make sure your Production \", _jsx(_components.code, {\n        children: \"secret\"\n      }), \" is a long, complex string. It's often best practice to store it in an \", _jsx(_components.code, {\n        children: \"env\"\n      }), \" file which is not checked into your Git repository, using \", _jsx(_components.code, {\n        children: \"dotenv\"\n      }), \" to supply it to your \", _jsx(_components.code, {\n        children: \"payload.init\"\n      }), \" call.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Double-check and thoroughly test all Access Control\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Because \", _jsx(_components.em, {\n        children: _jsx(_components.strong, {\n          children: \"you\"\n        })\n      }), \" are in complete control of who can do what with your data, you should double and triple-check that you wield that power responsibly before deploying to Production.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"error\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"By default, all Access Control functions require that a user is successfully logged in to Payload to create, read, update, or delete data.\"\n        }), \" But, if you allow public user registration, for example, you will want to make sure that your access control functions are more strict - permitting \", _jsx(\"strong\", {\n          children: \"only appropriate users\"\n        }), \" to perform appropriate actions.\"]\n      })\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Building the Admin panel\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Before running in Production, you need to have built a production-ready copy of the Payload Admin panel. To do this, Payload provides the \", _jsx(_components.code, {\n        children: \"build\"\n      }), \" NPM script. You can use it by adding a \", _jsx(_components.code, {\n        children: \"script\"\n      }), \" to your \", _jsx(_components.code, {\n        children: \"package.json\"\n      }), \" file like this:\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"package.json\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-json\",\n        children: \"{\\n  \\\"name\\\": \\\"project-name-here\\\",\\n  \\\"scripts\\\": {\\n    \\\"build\\\": \\\"payload build\\\",\\n  },\\n  \\\"dependencies\\\": {\\n    // your dependencies\\n  },\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then, to build Payload, you would run \", _jsx(_components.code, {\n        children: \"npm run build\"\n      }), \" in your project folder. A production-ready Admin bundle will be created in the \", _jsx(_components.code, {\n        children: \"build\"\n      }), \" directory.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Setting Node to Production\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Make sure you set the environment variable \", _jsx(_components.code, {\n        children: \"NODE_ENV\"\n      }), \" to \", _jsx(_components.code, {\n        children: \"production\"\n      }), \". Based on this variable, many Node packages automatically optimize themselves. In production, Payload automatically disables the \", _jsx(_components.a, {\n        href: \"/docs/graphql/overview#graphql-playground\",\n        children: \"GraphQL Playground\"\n      }), \", serves a production-ready version of the Admin panel, and other changes.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Secure Cookie Settings\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You should be using an SSL certificate for production Payload instances, which means you can \", _jsx(_components.a, {\n        href: \"/docs/authentication/config\",\n        children: \"enable secure cookies\"\n      }), \" in your Authentication-enabled Collection configs.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Preventing API Abuse\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload comes with a robust set of built-in anti-abuse measures, such as locking out users after X amount of failed login attempts, request rate limiting, GraphQL query complexity limits, max \", _jsx(_components.code, {\n        children: \"depth\"\n      }), \" settings, and more. \", _jsx(_components.a, {\n        href: \"/docs/production/preventing-abuse\",\n        children: \"Click here to learn more\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"MongoDB\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Managing MongoDB yourself\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using a \", _jsx(_components.a, {\n        href: \"#persistent-vs-ephemeral-filesystems\",\n        children: \"persistent filesystem-based cloud host\"\n      }), \" such as a \", _jsx(_components.a, {\n        href: \"https://www.digitalocean.com/products/droplets/\",\n        children: \"DigitalOcean Droplet\"\n      }), \" or an \", _jsx(_components.a, {\n        href: \"https://aws.amazon.com/ec2/?ec2-whats-new.sort-by=item.additionalFields.postDateTime&ec2-whats-new.sort-order=desc\",\n        children: \"Amazon EC2\"\n      }), \" server, you might opt to install MongoDB directly on that server itself so that Node can communicate with it locally. With this approach, you can benefit from faster response times, but scaling can become more involved as your app's user base grows.\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Letting someone else do it\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Alternatively, you can rely on a third-party MongoDB host such as \", _jsx(_components.a, {\n        href: \"https://www.mongodb.com/\",\n        children: \"MongoDB Atlas\"\n      }), \". With Atlas or a similar cloud provider, you can trust them to take care of your database's availability, security, redundancy, and backups.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Note regarding Azure Cosmos:\"\n        }), _jsx(\"br\", {}), \"\\nWhen using Azure Cosmos, MongoDB requires an index on any field being sorted on. To make this easier, see the \", _jsx(\"a\", {\n          href: \"/docs/configuration/overview\",\n          children: \"indexSortableFields\"\n        }), \" configuration option.\"]\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"File storage\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using Payload to \", _jsx(_components.a, {\n        href: \"/docs/upload/overview\",\n        children: \"manage file uploads\"\n      }), \", you need to consider where your uploaded files will be permanently stored. If you do not use Payload for file uploads, then this section does not impact your app whatsoever.\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Persistent vs Ephemeral Filesystems\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Some cloud app hosts such as \", _jsx(_components.a, {\n        href: \"https://heroku.com\",\n        children: \"Heroku\"\n      }), \" use \", _jsx(_components.code, {\n        children: \"ephemeral\"\n      }), \" file systems, which means that any files uploaded to your server only last until the server restarts or shuts down. Heroku and similar providers schedule restarts and shutdowns without your control, meaning your uploads will accidentally disappear without any way to get them back.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Alternatively, persistent filesystems will never delete your files and can be trusted to reliably host uploads perpetually.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Popular cloud providers with ephemeral filesystems:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Heroku\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"DigitalOcean Apps\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Popular cloud providers with persistent filesystems:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"DigitalOcean Droplets\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Amazon EC2\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"GoDaddy\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Many other more traditional web hosts\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"error\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Warning:\"\n        }), _jsx(\"br\", {}), \"\\nIf you rely on Payload's \", _jsx(\"strong\", {\n          children: \"Upload\"\n        }), \" functionality, make sure you either use a host with a persistent filesystem or have an integration with a third-party file host like Amazon S3.\"]\n      })\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Using ephemeral filesystem providers like Heroku\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you don't use Payload's \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" functionality, you can go ahead and use Heroku or similar platform easily. Everything will work exactly as you want it to.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"But, if you do, and you still want to use an ephemeral filesystem provider, you can write a hook-based solution to \", _jsx(_components.em, {\n        children: \"copy\"\n      }), \" the files your users upload to a more permanent storage solution like Amazon S3 or DigitalOcean Spaces.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"To automatically send uploaded files to S3 or similar, you could:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Write an asynchronous \", _jsx(_components.code, {\n          children: \"beforeChange\"\n        }), \" hook for all Collections that support Uploads, which takes any uploaded \", _jsx(_components.code, {\n          children: \"file\"\n        }), \" from the Express \", _jsx(_components.code, {\n          children: \"req\"\n        }), \" and sends it to an S3 bucket\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Write an \", _jsx(_components.code, {\n          children: \"afterRead\"\n        }), \" hook to save a \", _jsx(_components.code, {\n          children: \"s3URL\"\n        }), \" field that automatically takes the \", _jsx(_components.code, {\n          children: \"filename\"\n        }), \" stored and formats a full S3 URL\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Write an \", _jsx(_components.code, {\n          children: \"afterDelete\"\n        }), \" hook that automatically deletes files from the S3 bucket\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With the above configuration, deploying to Heroku or similar becomes no problem.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"DigitalOcean Tutorials\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"DigitalOcean provides extremely helpful documentation that can walk you through the entire process of creating a production-ready Droplet to host your Payload app:\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Create a new Ubuntu 20.04 droplet on \", _jsx(_components.a, {\n          href: \"https://digitalocean.com\",\n          children: \"DigitalOcean\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-20-04\",\n          children: \"Initial server setup\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.digitalocean.com/community/tutorials/how-to-install-nginx-on-ubuntu-20-04\",\n          children: \"Install nginx\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-20-04\",\n          children: \"Install and secure MongoDB\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://medium.com/@mhagemann/how-to-add-a-new-user-to-a-mongodb-database-d896776b5362\",\n          children: \"Create a new MongoDB and user\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-application-for-production-on-ubuntu-20-04\",\n          children: \"Set up Node for production\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Docker\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is an example of a multi-stage docker build of Payload for production. Ensure you are setting your environment variables on deployment, like \", _jsx(_components.code, {\n        children: \"PAYLOAD_SECRET\"\n      }), \", \", _jsx(_components.code, {\n        children: \"PAYLOAD_CONFIG_PATH\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"MONGODB_URI\"\n      }), \" if needed.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-dockerfile\",\n        children: \"FROM node:18-alpine as base\\n\\nFROM base as builder\\n\\nWORKDIR /home/node\\nCOPY package*.json ./\\n\\nCOPY . .\\nRUN yarn install\\nRUN yarn build\\n\\nFROM base as runtime\\n\\nENV NODE_ENV=production\\n\\nWORKDIR /home/node\\nCOPY package*.json  ./\\n\\nRUN yarn install --production\\nCOPY --from=builder /home/node/dist ./dist\\nCOPY --from=builder /home/node/build ./build\\n\\nEXPOSE 3000\\n\\nCMD [\\\"node\\\", \\\"dist/server.js\\\"]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Docker Compose\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here is an example of a docker-compose.yml file that can be used for development\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-yml\",\n        children: \"version: '3'\\n\\nservices:\\n\\n  payload:\\n    image: node:18-alpine\\n    ports:\\n      - \\\"3000:3000\\\"\\n    volumes:\\n      - .:/home/node/app\\n      - node_modules:/home/node/app/node_modules\\n    working_dir: /home/node/app/\\n    command: sh -c \\\"yarn install && yarn dev\\\"\\n    depends_on:\\n      - mongo\\n    environment:\\n      MONGODB_URI: mongodb://mongo:27017/payload\\n      PORT: 3000\\n      NODE_ENV: development\\n      PAYLOAD_SECRET: TESTING\\n\\n  mongo:\\n    image: mongo:latest\\n    ports:\\n      - \\\"27017:27017\\\"\\n    command:\\n      - --storageEngine=wiredTiger\\n    volumes:\\n      - data:/data/db\\n    logging:\\n      driver: none\\n\\nvolumes:\\n  data:\\n  node_modules:\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Production Deployment",
        "slug": "deployment",
        "label": "Deployment",
        "order": 10,
        "desc": "When your Payload based app is ready, tested, looking great, it is time to deploy. Learn how to deploy your app and what to consider before deployment.",
        "keywords": "deployment, production, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Security",
            "level": 2,
            "id": "security"
          },
          {
            "text": "MongoDB",
            "level": 2,
            "id": "mongodb"
          },
          {
            "text": "File storage",
            "level": 2,
            "id": "file-storage"
          },
          {
            "text": "DigitalOcean Tutorials",
            "level": 2,
            "id": "digitalocean-tutorials"
          },
          {
            "text": "Docker",
            "level": 2,
            "id": "docker"
          },
          {
            "text": "Docker Compose",
            "level": 2,
            "id": "docker-compose"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    h3: \"h3\",\n    code: \"code\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    strong: \"strong\",\n    a: \"a\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload has built-in security best practices that can be configured to your application-specific needs.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Limit Failed Login Attempts\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set the max number of failed login attempts before a user account is locked out for a period of time. Set the \", _jsx(_components.code, {\n        children: \"maxLoginAttempts\"\n      }), \" on the collections that feature Authentication to a reasonable but low number for your users to get in. Use the \", _jsx(_components.code, {\n        children: \"lockTime\"\n      }), \" to set a number in milliseconds from the time a user fails their last allowed attempt that a user must wait to try again.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Rate Limiting Requests\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To prevent DDoS, brute-force, and similar attacks, you can set IP-based rate limits so that once a certain threshold of requests has been hit by a single IP, further requests from the same IP will be ignored. The Payload config \", _jsx(_components.code, {\n        children: \"rateLimit\"\n      }), \" property accepts an object with the following properties:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"window\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Time in milliseconds to track requests per IP. Defaults to \", _jsx(_components.code, {\n              children: \"90000\"\n            }), \" (15 minutes).\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"max\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"Number of requests served from a single IP before limiting. Defaults to \", _jsx(_components.code, {\n              children: \"500\"\n            }), \".\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"skip\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"Express middleware function that can return true (or promise resulting in true) that will bypass limit.\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"trustProxy\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"True or false, to enable to allow requests to pass through a proxy such as a load balancer or an \", _jsx(_components.code, {\n              children: \"nginx\"\n            }), \" reverse proxy.\"]\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Warning:\"\n        }), _jsx(\"br\", {}), \"\\nVery commonly, NodeJS apps are served behind \", _jsx(_components.code, {\n          children: \"nginx\"\n        }), \" reverse proxies and similar. If you use rate-limiting while you're behind a proxy, \", _jsx(\"strong\", {\n          children: \"all\"\n        }), \" IP addresses from everyone that uses your API will appear as if they are from a local origin (127.0.0.1), and your users will get rate-limited very quickly without cause. If you plan to host your app behind a proxy, make sure you set \", _jsx(\"strong\", {\n          children: \"trustProxy\"\n        }), \" to \", _jsx(\"strong\", {\n          children: \"true\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Max Depth\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Querying a collection and automatically including related documents via \", _jsx(_components.code, {\n        children: \"depth\"\n      }), \" incurs a performance cost. Also, it's possible that your configs may have circular relationships, meaning scenarios where an infinite amount of relationships might populate back and forth until your server times out and crashes. You can prevent any potential of depth-related issues by setting a \", _jsx(_components.code, {\n        children: \"maxDepth\"\n      }), \" property on your Payload config.. The maximum allowed depth should be as small as possible without interrupting dev experience, and it defaults to \", _jsx(_components.code, {\n        children: \"10\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Cross-Site Request Forgery (CSRF)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"CSRF prevention will verify the authenticity of each request to your API to prevent a malicious action from another site from authorized users. See how to configure CSRF \", _jsx(_components.a, {\n        href: \"/docs/authentication/overview#csrf-protection\",\n        children: \"here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Cross Origin Resource Sharing (CORS)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To securely allow headless operation you will need to configure the allowed origins for requests to be able to use the Payload API. You can see how to set CORS as well as other payload configuration settings \", _jsx(_components.a, {\n        href: \"/docs/configuration/overview\",\n        children: \"here\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Limiting GraphQL Complexity\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Because GraphQL gives the power of query writing outside a server's control, someone with bad intentions might write a maliciously complex query and bog down your server. To prevent resource-intensive GraphQL requests, Payload provides a way specify complexity limits which are based on a complexity score that is calculated for each request.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Any GraphQL request that is calculated to be too expensive is rejected. On the Payload config, in \", _jsx(_components.code, {\n        children: \"graphQL\"\n      }), \" you can set the \", _jsx(_components.code, {\n        children: \"maxComplexity\"\n      }), \" value as an integer. For reference, the default complexity value for each added field is 1, and all \", _jsx(_components.code, {\n        children: \"relationship\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"upload\"\n      }), \" fields are assigned a value of 10.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you do not need GraphQL it is advised that you disable it altogether with the Payload config by setting \", _jsx(_components.code, {\n        children: \"graphQL.disable: true\"\n      }), \". Should you wish to enable GraphQL again, you can remove this property or set it \", _jsx(_components.code, {\n        children: \"false\"\n      }), \", any time. By turning it off, Payload will bypass creating schemas from your collections and will not register the express route.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Malicious File Uploads\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload does not execute uploaded files on the server, but depending on your setup it may be used to transmit and store potentially dangerous files. If your configuration allows file uploads there is the potential that a bad actor uploads a malicious file that is then served to other users. Consider the following ways to mitigate the risks.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"First, enable email \", _jsx(_components.a, {\n        href: \"/docs/authentication/config#email-verification\",\n        children: \"verification\"\n      }), \" when users are allowed to register new accounts and add other bot prevention services.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Review that \", _jsx(_components.code, {\n        children: \"create\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"update\"\n      }), \" access on file upload collections are as restrictive as your application needs allow. Consider limiting \", _jsx(_components.code, {\n        children: \"read\"\n      }), \" access of uploaded user's files and how you might limit user uploaded files from being served outside of Payload.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also add a \", _jsx(_components.a, {\n        href: \"https://github.com/Cisco-Talos/clamav\",\n        children: \"3rd party library\"\n      }), \" to scan files in a \", _jsx(_components.a, {\n        href: \"/docs/hooks/collections\",\n        children: \"hook\"\n      }), \" or have antivirus software in place.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Preventing Production API Abuse",
        "slug": "preventing-abuse",
        "label": "Preventing Abuse",
        "order": 20,
        "desc": "Payload has built-in security that can be configured to combat production API abuse such as limiting login attempts and IP requests.",
        "keywords": "abuse, production, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Introduction",
            "level": 2,
            "id": "introduction"
          },
          {
            "text": "Limit Failed Login Attempts",
            "level": 3,
            "id": "limit-failed-login-attempts"
          },
          {
            "text": "Rate Limiting Requests",
            "level": 3,
            "id": "rate-limiting-requests"
          },
          {
            "text": "Max Depth",
            "level": 3,
            "id": "max-depth"
          },
          {
            "text": "Cross-Site Request Forgery (CSRF)",
            "level": 3,
            "id": "cross-site-request-forgery-csrf"
          },
          {
            "text": "Cross Origin Resource Sharing (CORS)",
            "level": 3,
            "id": "cross-origin-resource-sharing-cors"
          },
          {
            "text": "Limiting GraphQL Complexity",
            "level": 3,
            "id": "limiting-graphql-complexity"
          },
          {
            "text": "Malicious File Uploads",
            "level": 3,
            "id": "malicious-file-uploads"
          }
        ]
      }
    ]
  },
  {
    "slug": "Email",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h3: \"h3\",\n    p: \"p\",\n    a: \"a\",\n    code: \"code\",\n    strong: \"strong\",\n    ol: \"ol\",\n    li: \"li\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    em: \"em\",\n    pre: \"pre\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h3, {\n      children: \"Introduction\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload comes ready to send your application's email. Whether you simply need built-in password reset\\nemail to work or you want customers to get an order confirmation email, you're almost there. Payload makes use of\\n\", _jsx(_components.a, {\n        href: \"https://nodemailer.com\",\n        children: \"NodeMailer\"\n      }), \" for email and won't get in your way for those already familiar.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For email to send from your Payload server, some configuration is required. The settings you provide will be set\\nin the \", _jsx(_components.code, {\n        children: \"email\"\n      }), \" property object of your payload init call. Payload will make use of the transport that you have configured for it for things like reset password or verifying new user accounts and email send methods are available to you as well on your payload instance.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Configuration\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Three ways to set it up\"\n      })\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Default\"\n        }), \": When email is not needed, a mock email handler will be created and used when nothing is provided. This is ideal for development environments and can be changed later when ready to \", _jsx(_components.a, {\n          href: \"/docs/production/deployment\",\n          children: \"go to production\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Recommended\"\n        }), \": Set the \", _jsx(_components.code, {\n          children: \"transportOptions\"\n        }), \" and Payload will do the set up for you.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Advanced\"\n        }), \": The \", _jsx(_components.code, {\n          children: \"transport\"\n        }), \" object can be assigned a nodemailer transport object set up in your server scripts and given for Payload to use.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The following options are configurable in the \", _jsx(_components.code, {\n        children: \"email\"\n      }), \" property object as part of the options object when calling payload.init().\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Option\"\n          }), _jsx(_components.th, {\n            children: \"Description\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fromName\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The name part of the From field that will be seen on the delivered email\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsxs(_components.td, {\n            children: [_jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"fromAddress\"\n              })\n            }), \" *\"]\n          }), _jsx(_components.td, {\n            children: \"The email address part of the From field that will be used when delivering email\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"transport\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"The NodeMailer transport object for when you want to do it yourself, not needed when transportOptions is set\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"transportOptions\"\n              })\n            })\n          }), _jsxs(_components.td, {\n            children: [\"An object that configures the transporter that Payload will create. For all the available options see the \", _jsx(_components.a, {\n              href: \"https://nodemailer.com/smtp/\",\n              children: \"NodeMailer documentation\"\n            }), \" or see the examples below\"]\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.strong, {\n              children: _jsx(_components.code, {\n                children: \"logMockCredentials\"\n              })\n            })\n          }), _jsx(_components.td, {\n            children: \"If set to true and no transport/transportOptions, ethereal credentials will be logged to console on startup\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"* An asterisk denotes that a property is required.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Use SMTP\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Simple Mail Transfer Protocol, also known as SMTP can be passed in using the \", _jsx(_components.code, {\n        children: \"transportOptions\"\n      }), \" object on the \", _jsx(_components.code, {\n        children: \"email\"\n      }), \" options.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example email part using SMTP:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"payload.init({\\n  email: {\\n    transportOptions: {\\n      host: process.env.SMTP_HOST,\\n      auth: {\\n        user: process.env.SMTP_USER,\\n        pass: process.env.SMTP_PASS\\n      },\\n      port: 587,\\n      secure: true, // use TLS\\n      tls: {\\n        // do not fail on invalid certs\\n        rejectUnauthorized: false\\n        }\\n      },\\n    fromName: 'hello',\\n    fromAddress: 'hello@example.com'\\n  }\\n  // ...\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [\"It is best practice to avoid saving credentials or API keys directly in your code, use \", _jsx(\"a\", {\n          href: \"/docs/configuration/overview#using-environment-variables-in-your-config\",\n          children: \"environment variables\"\n        }), \".\"]\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Use an email service\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Many third party mail providers are available and offer benefits beyond basic SMTP. As an example your payload init could look this if you wanted to use SendGrid.com though the same approach would work for any other \", _jsx(_components.a, {\n        href: \"https://nodemailer.com/transports/\",\n        children: \"NodeMailer transports\"\n      }), \" shown here or provided by another third party.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import payload from 'payload'\\nimport nodemailerSendgrid from 'nodemailer-sendgrid'\\n\\nconst sendGridAPIKey = process.env.SENDGRID_API_KEY;\\n\\npayload.init({\\n  ...sendGridAPIKey ? {\\n    email: {\\n      transportOptions: nodemailerSendgrid({\\n        apiKey: sendGridAPIKey,\\n      }),\\n      fromName: 'Admin',\\n      fromAddress: 'admin@example.com',\\n    },\\n  } : {},\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Use a custom NodeMailer transport\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To take full control of the mail transport you may wish to use \", _jsx(_components.code, {\n        children: \"nodemailer.createTransport()\"\n      }), \" on your server and provide it to Payload init.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import payload from 'payload'\\nimport nodemailer from 'nodemailer'\\n\\nconst payload = require('payload');\\nconst nodemailer = require('nodemailer');\\n\\nconst transport = await nodemailer.createTransport({\\n  host: process.env.SMTP_HOST,\\n  port: 587,\\n  auth: {\\n    user: process.env.SMTP_USER,\\n    pass: process.env.SMTP_PASS\\n  },\\n});\\n\\npayload.init({\\n  email: {\\n    fromName: 'Admin',\\n    fromAddress: 'admin@example.com',\\n    transport\\n  },\\n  // ...\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Sending Mail\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With a working transport you can call it anywhere you have access to payload by calling \", _jsx(_components.code, {\n        children: \"payload.sendEmail(message)\"\n      }), \". The \", _jsx(_components.code, {\n        children: \"message\"\n      }), \" will contain the \", _jsx(_components.code, {\n        children: \"to\"\n      }), \", \", _jsx(_components.code, {\n        children: \"subject\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"email\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"text\"\n      }), \" for the email being sent. To see all available message configuration options see \", _jsx(_components.a, {\n        href: \"https://nodemailer.com/message\",\n        children: \"NodeMailer\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Mock transport\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"By default, Payload uses a mock implementation that only sends mail to the \", _jsx(_components.a, {\n        href: \"https://ethereal.email\",\n        children: \"ethereal\"\n      }), \" capture service that will never reach a user's inbox. While in development you may wish to make use of the captured messages which is why the payload output during server output helpfully logs this out on the server console.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To see ethereal credentials, add \", _jsx(_components.code, {\n        children: \"logMockCredentials: true\"\n      }), \" to the email options. This will cause them to be logged to console on startup.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"payload.init({\\n  email: {\\n    fromName: 'Admin',\\n    fromAddress: 'admin@example.com',\\n    logMockCredentials: true, // Optional\\n  },\\n  // ...\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Console output when starting payload with a mock email instance and logMockCredentials: true\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"[06:37:21] INFO  (payload): Starting Payload...\\n[06:37:22] INFO  (payload): Payload Demo Initialized\\n[06:37:22] INFO  (payload): listening on 3000...\\n[06:37:22] INFO  (payload): Connected to Mongo server successfully!\\n[06:37:23] INFO  (payload): E-mail configured with mock configuration\\n[06:37:23] INFO  (payload): Log into mock email provider at https://ethereal.email\\n[06:37:23] INFO  (payload): Mock email account username: hhav5jw7doo4euev@ethereal.email\\n[06:37:23] INFO  (payload): Mock email account password: VNdGcvDZeyEhtuPBqf\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The mock email handler is used when payload is started with neither \", _jsx(_components.code, {\n        children: \"transport\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"transportOptions\"\n      }), \" to know how to deliver email.\"]\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsx(_components.p, {\n        children: \"The randomly generated email account username and password will be different each time the Payload server starts.\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Using multiple mail providers\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload supports the use of a single transporter of email, but there is nothing stopping you from having more. Consider a use case where sending bulk email is handled differently than transactional email and could be done using a \", _jsx(_components.a, {\n        href: \"/docs/hooks/overview\",\n        children: \"hook\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Email Functionality",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Payload uses NodeMailer to allow you to send emails smoothly from your app. Set up email functions such as password resets, order confirmations and more.",
        "keywords": "email, overview, config, configuration, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Introduction",
            "level": 3,
            "id": "introduction"
          },
          {
            "text": "Configuration",
            "level": 3,
            "id": "configuration"
          },
          {
            "text": "Use SMTP",
            "level": 3,
            "id": "use-smtp"
          },
          {
            "text": "Use an email service",
            "level": 3,
            "id": "use-an-email-service"
          },
          {
            "text": "Use a custom NodeMailer transport",
            "level": 3,
            "id": "use-a-custom-nodemailer-transport"
          },
          {
            "text": "Sending Mail",
            "level": 3,
            "id": "sending-mail"
          },
          {
            "text": "Mock transport",
            "level": 3,
            "id": "mock-transport"
          },
          {
            "text": "Using multiple mail providers",
            "level": 3,
            "id": "using-multiple-mail-providers"
          }
        ]
      }
    ]
  },
  {
    "slug": "TypeScript",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    h4: \"h4\",\n    h2: \"h2\",\n    h5: \"h5\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Payload supports TypeScript natively, and not only that, the entirety of the CMS is built with TypeScript. To get started developing with Payload and TypeScript, you can use one of Payload's built-in boilerplates in one line via \", _jsx(_components.code, {\n        children: \"create-payload-app\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"npx create-payload-app\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pick a TypeScript project type to get started easily.\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Setting up from Scratch\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It's also possible to set up a TypeScript project from scratch. We plan to write up a guide for exactly how—so keep an eye out for that, too.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Using Payload's Exported Types\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Payload exports a number of types that you may find useful while writing your own plugins, hooks, access control functions, custom routes, GraphQL queries / mutations, or anything else.\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Config Types\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/configuration/overview#typescript\",\n          children: \"Base config\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/configuration/collections#typescript\",\n          children: \"Collections\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/configuration/globals#typescript\",\n          children: \"Globals\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/fields/overview#typescript\",\n          children: \"Fields\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Hook Types\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/hooks/collections#typescript\",\n          children: \"Collection hooks\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/hooks/globals#typescript\",\n          children: \"Global hooks\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"/docs/hooks/fields#typescript\",\n          children: \"Field hooks\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "TypeScript - Overview",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Payload is the most powerful TypeScript headless CMS available.",
        "keywords": "headless cms, typescript, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "Using Payload's Exported Types",
            "level": 2,
            "id": "using-payloads-exported-types"
          }
        ]
      },
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"While building your own custom functionality into Payload, like plugins, hooks, access control functions, custom routes, GraphQL queries / mutations, or anything else, you may benefit from generating your own TypeScript types dynamically from your Payload config itself.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Run the following command in a Payload project to generate types:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"payload generate:types\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can run this command whenever you need to regenerate your types, and then you can use these types in your Payload code directly.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, let's look at the following simple Payload config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"const config: Config = {\\n  serverURL: process.env.PAYLOAD_PUBLIC_SERVER_URL,\\n  admin: {\\n    user: 'users',\\n  }\\n  collections: [\\n    {\\n      slug: 'users',\\n      fields: [\\n        {\\n          name: 'name',\\n          type: 'text',\\n          required: true,\\n        }\\n      ]\\n    },\\n    {\\n      slug: 'posts',\\n      admin: {\\n        useAsTitle: 'title',\\n      },\\n      fields: [\\n        {\\n          name: 'title',\\n          type: 'text',\\n        },\\n        {\\n          name: 'author',\\n          type: 'relationship',\\n          relationTo: 'users',\\n        },\\n      ]\\n    }\\n  ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By generating types, we'll end up with a file containing the following two TypeScript interfaces:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"export interface User {\\n  id: string;\\n  name: string;\\n  email?: string;\\n  resetPasswordToken?: string;\\n  resetPasswordExpiration?: string;\\n  loginAttempts?: number;\\n  lockUntil?: string;\\n}\\n\\nexport interface Post {\\n  id: string;\\n  title?: string;\\n  author?: string | User;\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Customizing the output path of your generated types\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can specify where you want your types to be generated by adding a property to your Payload config:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"{\\n  // the remainder of your config\\n\\ttypescript: {\\n\\t\\toutputFile: path.resolve(__dirname, './generated-types.ts'),\\n\\t},\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The above example places your types next to your Payload config itself as the file \", _jsx(_components.code, {\n        children: \"generated-types.ts\"\n      }), \". By default, the file will be output to your current working directory as \", _jsx(_components.code, {\n        children: \"payload-types.ts\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Adding an NPM script\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"warning\",\n      children: _jsxs(_components.p, {\n        children: [_jsx(\"strong\", {\n          children: \"Important:\"\n        }), _jsx(\"br\", {}), \"\\nPayload needs to be able to find your config to generate your types.\"]\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload will automatically try and locate your config, but might not always be able to find it. For example, if you are working in a \", _jsx(_components.code, {\n        children: \"/src\"\n      }), \" directory or similar, you need to tell Payload where to find your config manually by using an environment variable. If this applies to you, you can create an NPM script to make generating your types easier.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To add an NPM script to generate your types and show Payload where to find your config, open your \", _jsx(_components.code, {\n        children: \"package.json\"\n      }), \" and update the \", _jsx(_components.code, {\n        children: \"scripts\"\n      }), \" property to the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"{\\n  \\\"scripts\\\": {\\n    \\\"generate:types\\\": \\\"PAYLOAD_CONFIG_PATH=src/payload.config.ts payload generate:types\\\",\\n  },\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now you can run \", _jsx(_components.code, {\n        children: \"yarn generate:types\"\n      }), \" to easily generate your types.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Generating TypeScript Interfaces",
        "slug": "generating-types",
        "label": "Generating Types",
        "order": 20,
        "desc": "Generate your own TypeScript interfaces based on your collections and globals.",
        "keywords": "headless cms, typescript, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": []
      }
    ]
  },
  {
    "slug": "Plugins",
    "docs": [
      {
        "content": {
          "compiledSource": "/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    h4: \"h4\",\n    em: \"em\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components), {Banner} = _components;\n  if (!Banner) _missingMdxReference(\"Banner\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Payload comes with a built-in Plugins infrastructure that allows developers to build their own modular and easily reusable sets of functionality.\"\n    }), \"\\n\", _jsx(Banner, {\n      type: \"success\",\n      children: _jsx(_components.p, {\n        children: \"Because we rely on a simple config-based structure, Payload plugins simply take in a user's existing config and return a modified config with new fields, hooks, collections, admin views, or anything else you can think of.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Writing plugins is no more complex than writing regular JavaScript. If you know how \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax\",\n        children: \"spread syntax\"\n      }), \" works and are up to speed with Payload concepts, writing a plugin will be a breeze.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example use cases:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Automatically sync data from a specific collection to HubSpot or a similar CRM when data is added or changes\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Add password-protection functionality to certain documents\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Add a full ecommerce backend to any Payload app\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Add custom reporting views to Payload's admin panel\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Encrypt specific collections' data\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Add a full form builder implementation\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Integrate all \", _jsx(_components.code, {\n          children: \"upload\"\n        }), \"-enabled collections with a third-party file host like S3 or Cloudinary\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Add custom routes or GraphQL queries / mutations with any type of custom functionality that you can think of\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"How to install plugins\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The base Payload config allows for a \", _jsx(_components.code, {\n        children: \"plugins\"\n      }), \" property which takes an \", _jsx(_components.code, {\n        children: \"array\"\n      }), \" of \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/blob/master/src/config/types.ts#L21\",\n        children: _jsx(_components.code, {\n          children: \"Plugins\"\n        })\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-js\",\n        children: \"import { buildConfig } from 'payload/config';\\n\\n// note: these plugins are not real (yet?)\\nimport addLastModified from 'payload-add-last-modified';\\nimport passwordProtect from 'payload-password-protect';\\n\\nconst config = buildConfig({\\n\\tcollections: [\\n\\t\\t{\\n\\t\\t\\tslug: 'pages',\\n\\t\\t\\tfields: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tname: 'title',\\n\\t\\t\\t\\t\\ttype: 'text',\\n\\t\\t\\t\\t\\trequired: true,\\n\\t\\t\\t\\t},\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tname: 'content',\\n\\t\\t\\t\\t\\ttype: 'richText',\\n\\t\\t\\t\\t\\trequired: true,\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t}\\n\\t],\\n  plugins: [\\n    // Many plugins require options to be passed.\\n    // In the following example, we call the function\\n    // and pass it options accordingly\\n    passwordProtect(['pages']),\\n\\n    // This plugin takes no options and just\\n    // needs to be passed directly\\n    addLastModified,\\n\\n    // ..\\n    // To understand how to use the plugins you're interested in,\\n    // consult their corresponding documentation\\n  ]\\n});\\n\\nexport default config;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"When Plugins are initialized\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Payload Plugins are executed \", _jsx(_components.em, {\n        children: \"after\"\n      }), \" the incoming config is validated, but before it is sanitized and had default options merged in.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After all plugins are executed, the full config with all plugins will be sanitized.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Simple example\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Here is an example for how to automatically add a \", _jsx(_components.code, {\n        children: \"lastModifiedBy\"\n      }), \" field to all Payload collections using a Plugin written in TypeScript.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-ts\",\n        children: \"import { Config, Plugin } from 'payload/config';\\n\\nconst addLastModified: Plugin = (incomingConfig: Config): Config => {\\n  // Find all incoming auth-enabled collections\\n  // so we can create a lastModifiedBy relationship field\\n  // to all auth collections\\n  const authEnabledCollections = incomingConfig.collections.filter(\\n    collection => Boolean(collection.auth)\\n  );\\n\\n  // Spread the existing config\\n  const config: Config = {\\n    ...incomingConfig,\\n    collections: incomingConfig.collections.map((collection) => {\\n\\n      // Spread each item that we are modifying,\\n      // and add our new field - complete with\\n      // hooks and proper admin UI config\\n      return {\\n        ...collection,\\n        fields: [\\n          ...collection.fields,\\n          {\\n            name: 'lastModifiedBy',\\n            type: 'relationship',\\n            relationTo: authEnabledCollections.map(({ slug }) => slug),\\n            hooks: {\\n              beforeChange: [\\n                ({ req }) => ({\\n                  value: req?.user?.id,\\n                  relationTo: req?.user?.collection,\\n                }),\\n              ]\\n            },\\n            admin: {\\n              position: 'sidebar',\\n              readOnly: true,\\n            },\\n          },\\n        ],\\n      };\\n    }),\\n  };\\n\\n  return config;\\n};\\n\\nexport default addLastModified;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Available Plugins\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can discover existing plugins by browsing the \", _jsx(_components.code, {\n        children: \"payload-plugin\"\n      }), \" topic on \", _jsx(_components.a, {\n        href: \"https://github.com/topics/payload-plugin\",\n        children: \"GitHub\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For maintainers building plugins for others to use, please add the topic to help others find it. If you would like one to be built by the core Payload team, \", _jsx(_components.a, {\n        href: \"https://github.com/payloadcms/payload/discussions\",\n        children: \"open a Feature Request\"\n      }), \" in our GitHub Discussions board. We would be happy to review your code and maybe feature you and your plugin where appropriate.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n",
          "frontmatter": {},
          "scope": {}
        },
        "title": "Plugins",
        "slug": "overview",
        "label": "Overview",
        "order": 10,
        "desc": "Plugins provide a great way to modularize Payload functionalities into easy-to-use enhancements and extensions of your Payload apps.",
        "keywords": "plugins, config, configuration, extensions, custom, documentation, Content Management System, cms, headless, javascript, node, react, express",
        "headings": [
          {
            "text": "How to install plugins",
            "level": 3,
            "id": "how-to-install-plugins"
          },
          {
            "text": "Simple example",
            "level": 2,
            "id": "simple-example"
          },
          {
            "text": "Available Plugins",
            "level": 3,
            "id": "available-plugins"
          }
        ]
      }
    ]
  }
]